{"version":3,"file":"index.js","sources":["../src/Network/helpers/rpcFromConfig.ts","../src/Network/constants.ts","../src/helpers/http_client.ts","../src/helpers/network_helper.ts","../src/utils/FetchHTTPProvider.ts","../src/Network/getEthersProvider.ts","../src/Network/eventEmitter.ts","../src/common.ts","../src/Network/helpers/idFromAlias.ts","../src/Asset/Assets.ts","../src/Asset/ERC721/getErc721Token.ts","../src/helpers/tx_helper.ts","../src/errors.ts","../src/Asset/Erc20Token.ts","../src/Asset/Erc20.ts","../src/Network/network.ts","../src/Network/helpers/aliasFromNetworkID.ts","../src/Network/providers/AVMWebSocketProvider.ts","../src/Network/providers/EVMWebSocketProvider.ts","../src/Network/providers/WebsocketProvider.ts","../src/Network/utils.ts","../src/Keystore/Crypto.ts","../src/Keystore/constants.ts","../src/Keystore/keystore.ts","../src/Wallet/constants.ts","../src/Wallet/helpers/derivationHelper.ts","../src/helpers/utxo_helper.ts","../src/helpers/address_helper.ts","../src/utils/utils.ts","../src/utils/number_utils.ts","../src/utils/fee_utils.ts","../src/utils/waitTxUtils.ts","../src/utils/sleep.ts","../src/utils/CypherAES.ts","../src/Explorer/ortelius/utxoUtils.ts","../src/History/history_helpers.ts","../src/History/base_tx_parser.ts","../src/Explorer/snowtrace/constants.ts","../src/Explorer/snowtrace/utils.ts","../src/Explorer/snowtrace/snowtrace.ts","../src/Explorer/snowtrace/types.ts","../src/Explorer/ortelius/requests.ts","../src/Explorer/ortelius/utils.ts","../src/Explorer/coingecko/requests.ts","../src/History/importExportParser.ts","../src/History/parsers.ts","../src/History/evmParser.ts","../src/History/types.ts","../src/UniversalTx/UniversalNode.ts","../src/UniversalTx/UniversalNodeX.ts","../src/UniversalTx/UniversalNodeP.ts","../src/UniversalTx/UniversalNodeC.ts","../src/UniversalTx/utils.ts","../src/helpers/gas_helper.ts","../src/Wallet/Wallet.ts","../src/Wallet/HdScanner.ts","../src/Wallet/HDWalletAbstract.ts","../src/Wallet/EVM/EvmWalletReadonly.ts","../src/Wallet/PublicMnemonicWallet.ts","../src/Wallet/Ledger/utils.ts","../src/Wallet/Ledger/errors.ts","../src/Wallet/Ledger/LedgerWallet.ts","../src/Wallet/EVM/EvmWallet.ts","../src/Wallet/MnemonicWallet.ts","../src/Wallet/SingletonWallet.ts","../src/Csv/constants.ts","../src/Csv/createCsvContent.ts","../src/Csv/parseStakingTxs.ts","../src/Csv/parseNormalTxs.ts"],"sourcesContent":["import { NetworkConfig } from '../types';\r\n\r\nexport function getRpcC(conf: NetworkConfig) {\r\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/C/rpc`;\r\n}\r\nexport function getRpcX(conf: NetworkConfig) {\r\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/X`;\r\n}\r\nexport function getRpcP(conf: NetworkConfig) {\r\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/P`;\r\n}\r\n","import { NetworkConfig } from './types';\r\nimport {\r\n    DefaultPlatformChainID,\r\n    TestAvaxAssetID,\r\n    TestCBlockchainID,\r\n    TestXBlockchainID,\r\n} from '@c4tplatform/caminojs/dist/utils/constants';\r\nimport { getRpcC, getRpcP, getRpcX } from './helpers/rpcFromConfig';\r\n\r\nexport const LocalnetConfig: NetworkConfig = {\r\n    rawUrl: 'http://localhost:9650',\r\n    apiProtocol: 'http',\r\n    apiIp: 'localhost',\r\n    apiPort: 9650,\r\n    networkID: 12345,\r\n    // @ts-ignore\r\n    xChainID: TestXBlockchainID,\r\n    // @ts-ignore\r\n    pChainID: DefaultPlatformChainID,\r\n    // @ts-ignore\r\n    cChainID: TestCBlockchainID,\r\n    // @ts-ignore\r\n    evmChainID: 43112,\r\n    // @ts-ignore\r\n    avaxID: TestAvaxAssetID,\r\n    get rpcUrl() {\r\n        return {\r\n            c: getRpcC(this),\r\n            p: getRpcP(this),\r\n            x: getRpcX(this),\r\n        };\r\n    },\r\n};\r\n\r\n// Default network connection\r\nexport const DefaultConfig = LocalnetConfig;\r\n","export class HttpClient {\r\n    private TIMEOUT = 10000;\r\n\r\n    constructor(private baseURL: string) {}\r\n\r\n    get<T>(path: string, params?: Record<string, any>): Promise<T> {\r\n        const query = params && new URLSearchParams(params);\r\n        path = query ? `${path}?${query.toString()}` : path;\r\n        const url = `${this.baseURL}/${path}`;\r\n        const options = {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' },\r\n        };\r\n        return this.handleResponse<T>(this.fetchWithTimeout(url, options));\r\n    }\r\n\r\n    post<T>(path: string, data: Record<string, any>): Promise<T> {\r\n        const url = `${this.baseURL}/${path}`;\r\n        const options = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(data),\r\n        };\r\n        return this.handleResponse<T>(this.fetchWithTimeout(url, options));\r\n    }\r\n\r\n    private async handleResponse<T>(responsePromise: Promise<Response>): Promise<T> {\r\n        const response = await responsePromise;\r\n        if (response.ok) {\r\n            return await response.json();\r\n        } else {\r\n            const errorMessage = await response.text();\r\n            return Promise.reject(new Error(errorMessage));\r\n        }\r\n    }\r\n\r\n    private async fetchWithTimeout(input: RequestInfo, options: RequestInit & { timeout?: number } = {}) {\r\n        const { timeout = this.TIMEOUT } = options;\r\n\r\n        const controller = new AbortController();\r\n        const id = setTimeout(() => controller.abort(), timeout);\r\n        const response = await fetch(input, {\r\n            ...options,\r\n            signal: controller.signal,\r\n        });\r\n        clearTimeout(id);\r\n        return response;\r\n    }\r\n}\r\n","import { NetworkConfig } from '@/Network/types';\r\n\r\nimport { Avalanche } from '@c4tplatform/caminojs/dist';\r\nimport { HttpClient } from './http_client';\r\n\r\nexport function wsUrlFromConfigX(config: NetworkConfig): string {\r\n    let protocol = config.apiProtocol === 'http' ? 'ws' : 'wss';\r\n    return `${protocol}://${config.apiIp}:${config.apiPort}/ext/bc/X/events`;\r\n}\r\n\r\nexport function wsUrlFromConfigEVM(config: NetworkConfig): string {\r\n    let protocol = config.apiProtocol === 'http' ? 'ws' : 'wss';\r\n    return `${protocol}://${config.apiIp}:${config.apiPort}/ext/bc/C/ws`;\r\n}\r\n\r\n/**\r\n * Given the base url of an Avalanche API, requests the Network ID\r\n * @param url The base url for the Avalanche API\r\n */\r\nexport async function getNetworkIdFromURL(url: string): Promise<number> {\r\n    // TODO: Not be the best to assume /ext/info but Avalanchejs complicates things\r\n    let res = await fetch(url + '/ext/info', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            jsonrpc: '2.0',\r\n            id: 1,\r\n            method: 'info.getNetworkID',\r\n        }),\r\n    });\r\n    const data = await res.json();\r\n\r\n    return parseInt(data.result.networkID);\r\n}\r\n\r\nexport function createAvalancheProvider(config: NetworkConfig) {\r\n    return new Avalanche(config.apiIp, config.apiPort, config.apiProtocol, config.networkID);\r\n}\r\n\r\n/**\r\n * Given a network configuration returns an HttpClient instance connected to the explorer\r\n */\r\nexport function createExplorerApi(networkConfig: NetworkConfig) {\r\n    if (!networkConfig.explorerURL) {\r\n        throw new Error('Network configuration does not specify an explorer API.');\r\n    }\r\n\r\n    return new HttpClient(networkConfig.explorerURL);\r\n}\r\n\r\n/**\r\n * Given a network configuration returns an HttpClient instance connected to the signavault\r\n */\r\nexport function createSignavaultApi(networkConfig: NetworkConfig) {\r\n    if (!networkConfig.signavaultURL) {\r\n        throw new Error('Network configuration does not specify an explorer API.');\r\n    }\r\n\r\n    return new HttpClient(networkConfig.signavaultURL);\r\n}\r\n\r\n/**\r\n * Checks if the given network accepts credentials.\r\n * This must be true to use cookies.\r\n */\r\nexport async function canUseCredentials(config: NetworkConfig): Promise<boolean> {\r\n    let provider = createAvalancheProvider(config);\r\n    provider.setRequestConfig('withCredentials', true);\r\n\r\n    let infoApi = provider.Info();\r\n\r\n    // Make a dummy request with credentials\r\n    try {\r\n        await infoApi.getNetworkID();\r\n        return true;\r\n        // eslint-disable-next-line\r\n    } catch (e) {}\r\n\r\n    provider.setRequestConfig('withCredentials', false);\r\n\r\n    try {\r\n        await infoApi.getNetworkID();\r\n    } catch (e) {\r\n        throw new Error('Unable to connect.');\r\n    }\r\n\r\n    return false;\r\n}\r\n","const NETWORK_TIMEOUT = 'NETWORK_REQUEST_TIMEOUT';\r\n\r\n/**\r\n * HttpProvider should be used to send rpc calls over http\r\n */\r\nexport class FetchHttpProvider {\r\n    withCredentials: boolean;\r\n    timeout: number;\r\n    headers?: { name: string; value: string }[];\r\n    agent?: string;\r\n    connected: boolean;\r\n\r\n    constructor(\r\n        private host: string,\r\n        options?: {\r\n            withCredentials?: boolean;\r\n            timeout?: number;\r\n            headers?: { name: string; value: string }[];\r\n            agent?: string;\r\n            keepAlive?: boolean;\r\n        }\r\n    ) {\r\n        this.withCredentials = options?.withCredentials || false;\r\n        this.timeout = options?.timeout || 0;\r\n        this.headers = options?.headers;\r\n        this.agent = options?.agent;\r\n        this.connected = false;\r\n\r\n        this.host = host || 'http://localhost:8545';\r\n    }\r\n\r\n    private prepareRequest(body: string): Promise<unknown> {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(this.host, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    ...this.headers?.reduce((prev, current) => ({ ...prev, [current.name]: current.value }), {}),\r\n                },\r\n                credentials: this.withCredentials ? 'include' : undefined,\r\n                body,\r\n            }).then(resolve, reject);\r\n\r\n            if (this.timeout) {\r\n                const e = new Error(NETWORK_TIMEOUT);\r\n                setTimeout(reject, this.timeout, e);\r\n            }\r\n        });\r\n    }\r\n\r\n    send(payload: unknown, callback: (error: Error | null, response?: any) => void) {\r\n        this.prepareRequest(JSON.stringify(payload))\r\n            .then((response: any) => response?.json())\r\n            .then((result) => {\r\n                this.connected = true;\r\n                callback(null, result);\r\n            })\r\n            .catch((e) => {\r\n                if (e?.message === NETWORK_TIMEOUT) {\r\n                    callback(new Error('CONNECTION TIMEOUT: timeout of ' + this.timeout + ' ms achived'));\r\n                    return;\r\n                }\r\n\r\n                const error = new Error(\"CONNECTION ERROR: Couldn't connect to node \" + this.host + '.') as any;\r\n                if (e) {\r\n                    error.code = e.code;\r\n                    error.reason = e.reason;\r\n                }\r\n\r\n                this.connected = false;\r\n                callback(error);\r\n            });\r\n    }\r\n\r\n    disconnect() {\r\n        //NO OP\r\n    }\r\n\r\n    supportsSubscriptions() {\r\n        return false;\r\n    }\r\n}\r\n","import { ethers } from 'ethers';\r\nimport { NetworkConfig } from '@/Network/types';\r\n\r\nexport function getEthersJsonRpcProvider(config: NetworkConfig) {\r\n    return new ethers.providers.JsonRpcProvider(config.rpcUrl.c, {\r\n        name: '',\r\n        chainId: config.evmChainID,\r\n    });\r\n}\r\n","import { NetworkConfig } from '@/Network/types';\r\nimport EventEmitter from 'events';\r\n\r\n/**\r\n * Fire network change event\r\n * @param newNetwork The newly connected network config\r\n */\r\nexport function emitNetworkChange(newNetwork: NetworkConfig) {\r\n    networkEvents.emit('network_change', newNetwork);\r\n}\r\n\r\nconst MAX_LISTENERS = 100;\r\n\r\nexport const networkEvents: EventEmitter = new EventEmitter();\r\nnetworkEvents.setMaxListeners(MAX_LISTENERS);\r\n","import { BinTools } from '@c4tplatform/caminojs/dist';\r\n\r\nexport const bintools = BinTools.getInstance();\r\n\r\nexport type ChainIdType = 'X' | 'P' | 'C';\r\n","import { ChainIdType } from '@/common';\r\nimport { avalanche } from '@/Network/network';\r\n\r\n/**\r\n * Given a chain alias, returns the chain id.\r\n * @param alias `X`, `P` or `C`\r\n */\r\nexport function chainIdFromAlias(alias: ChainIdType) {\r\n    if (alias === 'X') {\r\n        return avalanche().XChain().getBlockchainID();\r\n    } else if (alias === 'P') {\r\n        return avalanche().PChain().getBlockchainID();\r\n    } else if (alias === 'C') {\r\n        return avalanche().CChain().getBlockchainID();\r\n    }\r\n    throw new Error('Unknown chain alias.');\r\n}\r\n","import { avalanche } from '@/Network/network';\r\n\r\nimport { iAssetCache, iAssetDescriptionClean } from '@/Asset/types';\r\nimport xss from 'xss';\r\nlet assetCache: iAssetCache = {};\r\n\r\nexport function getAssetDescriptionSync(assetId: string): iAssetDescriptionClean {\r\n    if (typeof assetCache[assetId] === 'undefined') throw new Error(`Asset ID ${assetId} is not known.`);\r\n    return assetCache[assetId];\r\n}\r\n\r\n/**\r\n * Uses the node api to get meta data given an asset ID. Saves the result to cache.\r\n * @param assetId\r\n */\r\nexport async function getAssetDescription(assetId: string): Promise<iAssetDescriptionClean> {\r\n    let cache = assetCache[assetId];\r\n    if (cache) {\r\n        return cache;\r\n    }\r\n\r\n    try {\r\n        let res = await avalanche().XChain().getAssetDescription(assetId);\r\n        let clean: iAssetDescriptionClean = {\r\n            ...res,\r\n            assetID: assetId,\r\n            name: xss(res.name),\r\n            symbol: xss(res.symbol),\r\n        };\r\n\r\n        assetCache[assetId] = clean;\r\n        return clean;\r\n    } catch (e) {\r\n        throw new Error(`Asset ${assetId} does not exist.`);\r\n    }\r\n}\r\n","import { ERC721Abi } from '@/helpers/tx_helper';\r\nimport { ContractFactory, ContractInterface } from 'ethers';\r\n// import { web3 } from '@/Network';\r\n// import { AbiItem } from 'web3-utils';\r\n/**\r\n * Returns an ethers ERC721 Contract\r\n * @param address\r\n */\r\nexport function getErc721TokenEthers(address: string) {\r\n    return ContractFactory.getContract(address, (ERC721Abi as unknown) as ContractInterface);\r\n}\r\n\r\n/**\r\n * Returns an web3 ERC721 Contract\r\n * @param address\r\n */\r\n// export function getErc721TokenWeb3(address: string) {\r\n//     return new web3.eth.Contract(abi as AbiItem[], address);\r\n// }\r\n","import { avalanche, ethersProvider, web3 } from '@/Network/network';\r\n\r\nimport { BN, Buffer } from '@c4tplatform/caminojs/dist';\r\nimport {\r\n    AVMConstants,\r\n    MinterSet,\r\n    NFTMintOutput,\r\n    UnsignedTx as AVMUnsignedTx,\r\n    UTXO as AVMUTXO,\r\n    UTXOSet as AVMUTXOSet,\r\n    UTXOSet,\r\n} from '@c4tplatform/caminojs/dist/apis/avm';\r\n\r\nimport { PayloadBase } from '@c4tplatform/caminojs/dist/utils';\r\nimport { OutputOwners } from '@c4tplatform/caminojs/dist/common';\r\nimport { PlatformVMConstants, UTXOSet as PlatformUTXOSet } from '@c4tplatform/caminojs/dist/apis/platformvm';\r\n\r\nimport { EVMConstants } from '@c4tplatform/caminojs/dist/apis/evm';\r\n\r\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\r\nimport { Chain, Common, Hardfork } from '@ethereumjs/common';\r\n\r\nimport ERC20Abi from '@/Abi/ERC20.json';\r\nimport ERC721Abi from '@/Abi/ERC721.json';\r\nimport { bintools } from '@/common';\r\nimport { ExportChainsC, ExportChainsP, ExportChainsX } from '@/Wallet/types';\r\nimport { chainIdFromAlias } from '@/Network/helpers/idFromAlias';\r\nimport { getErc721TokenEthers } from '@/Asset';\r\n\r\nexport async function buildCreateNftFamilyTx(\r\n    name: string,\r\n    symbol: string,\r\n    groupNum: number,\r\n    fromAddrs: string[],\r\n    minterAddr: string,\r\n    changeAddr: string,\r\n    utxoSet: UTXOSet\r\n) {\r\n    let fromAddresses = fromAddrs;\r\n    let changeAddress = changeAddr;\r\n    let minterAddress = minterAddr;\r\n\r\n    const minterSets: MinterSet[] = [];\r\n\r\n    // Create the groups\r\n    for (let i = 0; i < groupNum; i++) {\r\n        const minterSet: MinterSet = new MinterSet(1, [minterAddress]);\r\n        minterSets.push(minterSet);\r\n    }\r\n\r\n    let unsignedTx: AVMUnsignedTx = await avalanche()\r\n        .XChain()\r\n        .buildCreateNFTAssetTx(utxoSet, fromAddresses, [changeAddress], minterSets, name, symbol);\r\n    return unsignedTx;\r\n}\r\n\r\nexport async function buildMintNftTx(\r\n    mintUtxo: AVMUTXO,\r\n    payload: PayloadBase,\r\n    quantity: number,\r\n    ownerAddress: string,\r\n    changeAddress: string,\r\n    fromAddresses: string[],\r\n    utxoSet: UTXOSet\r\n): Promise<AVMUnsignedTx> {\r\n    let addrBuf = bintools.parseAddress(ownerAddress, 'X');\r\n    let owners = [];\r\n\r\n    let sourceAddresses = fromAddresses;\r\n\r\n    for (let i = 0; i < quantity; i++) {\r\n        let owner = new OutputOwners([addrBuf]);\r\n        owners.push(owner);\r\n    }\r\n\r\n    let groupID = (mintUtxo.getOutput() as NFTMintOutput).getGroupID();\r\n\r\n    let mintTx = await avalanche()\r\n        .XChain()\r\n        .buildCreateNFTMintTx(\r\n            utxoSet,\r\n            owners,\r\n            sourceAddresses,\r\n            [changeAddress],\r\n            mintUtxo.getUTXOID(),\r\n            groupID,\r\n            payload\r\n        );\r\n    return mintTx;\r\n}\r\n\r\nexport async function buildAvmExportTransaction(\r\n    destinationChain: ExportChainsX,\r\n    utxoSet: AVMUTXOSet,\r\n    fromAddresses: string[],\r\n    toAddress: string,\r\n    amount: BN, // export amount + fee\r\n    sourceChangeAddress: string\r\n) {\r\n    let destinationChainId = chainIdFromAlias(destinationChain);\r\n\r\n    return await avalanche()\r\n        .XChain()\r\n        .buildExportTx(utxoSet as AVMUTXOSet, amount, destinationChainId, [toAddress], fromAddresses, [\r\n            sourceChangeAddress,\r\n        ]);\r\n}\r\n\r\nexport async function buildPlatformExportTransaction(\r\n    utxoSet: PlatformUTXOSet,\r\n    fromAddresses: string[],\r\n    toAddress: string,\r\n    amount: BN, // export amount + fee\r\n    sourceChangeAddress: string,\r\n    destinationChain: ExportChainsP\r\n) {\r\n    let destinationChainId = chainIdFromAlias(destinationChain);\r\n\r\n    return await avalanche()\r\n        .PChain()\r\n        .buildExportTx(utxoSet, amount, destinationChainId, [toAddress], fromAddresses, [sourceChangeAddress]);\r\n}\r\n\r\n/**\r\n *\r\n * @param fromAddresses\r\n * @param toAddress\r\n * @param amount\r\n * @param fromAddressBech\r\n * @param destinationChain Either `X` or `P`\r\n * @param fee Export fee in nAVAX\r\n */\r\nexport async function buildEvmExportTransaction(\r\n    fromAddresses: string[],\r\n    toAddress: string,\r\n    amount: BN, // export amount + fee\r\n    fromAddressBech: string,\r\n    destinationChain: ExportChainsC,\r\n    fee: BN\r\n) {\r\n    let destinationChainId = chainIdFromAlias(destinationChain);\r\n\r\n    const nonce = await web3.eth.getTransactionCount(fromAddresses[0]);\r\n    const avaxAssetIDBuf: Buffer = await avalanche().XChain().getAVAXAssetID();\r\n    const avaxAssetIDStr: string = bintools.cb58Encode(avaxAssetIDBuf);\r\n\r\n    let fromAddressHex = fromAddresses[0];\r\n\r\n    return await avalanche()\r\n        .CChain()\r\n        .buildExportTx(\r\n            amount,\r\n            avaxAssetIDStr,\r\n            destinationChainId,\r\n            fromAddressHex,\r\n            fromAddressBech,\r\n            [toAddress],\r\n            nonce,\r\n            undefined,\r\n            undefined,\r\n            fee\r\n        );\r\n}\r\n\r\nexport async function buildEvmTransferEIP1559Tx(\r\n    from: string,\r\n    to: string,\r\n    amount: BN, // in wei\r\n    priorityFee: BN,\r\n    maxFee: BN,\r\n    gasLimit: number\r\n) {\r\n    const nonce = await web3.eth.getTransactionCount(from);\r\n    const chainId = await web3.eth.getChainId();\r\n    const networkId = await web3.eth.net.getId();\r\n\r\n    const common = Common.custom({ networkId, chainId });\r\n\r\n    const tx = FeeMarketEIP1559Transaction.fromTxData(\r\n        {\r\n            nonce: nonce,\r\n            maxFeePerGas: '0x' + maxFee.toString('hex'),\r\n            maxPriorityFeePerGas: '0x' + priorityFee.toString('hex'),\r\n            gasLimit: gasLimit,\r\n            to: to,\r\n            value: '0x' + amount.toString('hex'),\r\n            data: '0x',\r\n        },\r\n        { common }\r\n    );\r\n    return tx;\r\n}\r\n\r\nexport async function buildEvmTransferNativeTx(\r\n    from: string,\r\n    to: string,\r\n    amount: BN, // in wei\r\n    gasPrice: BN,\r\n    gasLimit: number\r\n) {\r\n    const nonce = await web3.eth.getTransactionCount(from);\r\n    const chainId = await web3.eth.getChainId();\r\n    const networkId = await web3.eth.net.getId();\r\n\r\n    const common = Common.custom({ networkId, chainId });\r\n\r\n    const tx = Transaction.fromTxData(\r\n        {\r\n            nonce: nonce,\r\n            gasPrice: '0x' + gasPrice.toString('hex'),\r\n            gasLimit: gasLimit,\r\n            to: to,\r\n            value: '0x' + amount.toString('hex'),\r\n            data: '0x',\r\n        },\r\n        { common }\r\n    );\r\n    return tx;\r\n}\r\n\r\nexport async function buildCustomEvmTx(\r\n    from: string,\r\n    gasPrice: BN,\r\n    gasLimit: number,\r\n    data?: string,\r\n    to?: string,\r\n    value?: string,\r\n    nonce?: number\r\n): Promise<Transaction> {\r\n    if (typeof nonce === 'undefined') {\r\n        nonce = await web3.eth.getTransactionCount(from);\r\n    }\r\n\r\n    const chainId = await web3.eth.getChainId();\r\n    const networkId = await web3.eth.net.getId();\r\n\r\n    const chainParams = {\r\n        common: Common.custom(\r\n            {\r\n                networkId,\r\n                chainId,\r\n            },\r\n            {\r\n                baseChain: Chain.Mainnet,\r\n                hardfork: Hardfork.Istanbul,\r\n            }\r\n        ),\r\n    };\r\n\r\n    let gasPriceHex = `0x${gasPrice.toString('hex')}`;\r\n\r\n    let tx = Transaction.fromTxData(\r\n        {\r\n            nonce,\r\n            gasPrice: gasPriceHex,\r\n            gasLimit,\r\n            value,\r\n            to,\r\n            data,\r\n        },\r\n        chainParams\r\n    );\r\n    return tx;\r\n}\r\n\r\nexport async function buildEvmTransferErc20Tx(\r\n    from: string,\r\n    to: string,\r\n    amount: BN, // in wei\r\n    gasPrice: BN,\r\n    gasLimit: number,\r\n    contractAddress: string\r\n) {\r\n    //@ts-ignore\r\n    const cont = new web3.eth.Contract(ERC20Abi.abi, contractAddress);\r\n    const tokenTx = cont.methods.transfer(to, amount.toString());\r\n\r\n    let data = tokenTx.encodeABI();\r\n\r\n    let tx = await buildCustomEvmTx(from, gasPrice, gasLimit, data, contractAddress);\r\n\r\n    return tx;\r\n}\r\n\r\nexport async function buildEvmTransferErc721Tx(\r\n    from: string,\r\n    to: string,\r\n    gasPrice: BN,\r\n    gasLimit: number,\r\n    tokenContract: string,\r\n    tokenId: number\r\n) {\r\n    const nonce = await web3.eth.getTransactionCount(from);\r\n    const chainId = await web3.eth.getChainId();\r\n    const networkId = await web3.eth.net.getId();\r\n    const chainParams = {\r\n        common: Common.custom(\r\n            {\r\n                networkId,\r\n                chainId,\r\n            },\r\n            {\r\n                baseChain: Chain.Mainnet,\r\n                hardfork: Hardfork.Istanbul,\r\n            }\r\n        ),\r\n    };\r\n    // @ts-ignore\r\n    const contract = new web3.eth.Contract(ERC721Abi.abi, tokenContract);\r\n    const tokenTx = contract.methods['safeTransferFrom(address,address,uint256)'](from, to, tokenId);\r\n\r\n    let tx = Transaction.fromTxData(\r\n        {\r\n            nonce: nonce,\r\n            gasPrice: '0x' + gasPrice.toString('hex'),\r\n            gasLimit: gasLimit,\r\n            value: '0x0',\r\n            to: tokenContract,\r\n            data: tokenTx.encodeABI(),\r\n        },\r\n        chainParams\r\n    );\r\n    return tx;\r\n}\r\n\r\nexport async function estimateErc20Gas(tokenContract: string, from: string, to: string, value: BN) {\r\n    //@ts-ignore\r\n    const contract = new web3.eth.Contract(ERC20Abi.abi, tokenContract);\r\n    const tokenTx = contract.methods.transfer(to, value.toString());\r\n    return await tokenTx.estimateGas({\r\n        from: from,\r\n    });\r\n}\r\n\r\n/**\r\n * Estimate the gas limit for the ERC721 `safeTransferFrom(address,address,uint256)` method.\r\n * @param contract\r\n * @param from\r\n * @param to\r\n * @param tokenID\r\n */\r\nexport async function estimateErc721TransferGas(contract: string, from: string, to: string, tokenID: number) {\r\n    let c = getErc721TokenEthers(contract);\r\n    c = c.connect(ethersProvider);\r\n    const gas = await c.estimateGas['safeTransferFrom(address,address,uint256)'](from, to, tokenID);\r\n    return gas.toNumber();\r\n}\r\n\r\n/**\r\n * Estimates the gas needed to send AVAX\r\n * @param to Destination address\r\n * @param amount Amount of AVAX to send, given in WEI\r\n * @param gasPrice Given in WEI\r\n */\r\nexport async function estimateAvaxGas(from: string, to: string, amount: BN, gasPrice: BN): Promise<number> {\r\n    try {\r\n        return await web3.eth.estimateGas({\r\n            from,\r\n            to,\r\n            gasPrice: `0x${gasPrice.toString('hex')}`,\r\n            value: `0x${amount.toString('hex')}`,\r\n        });\r\n    } catch (e) {\r\n        // TODO: Throws an error if we do not have enough avax balance\r\n        //TODO: Is it ok to return 21000\r\n        return 21000;\r\n    }\r\n}\r\n\r\nexport enum AvmTxNameEnum {\r\n    'Transaction' = AVMConstants.BASETX,\r\n    'Mint' = AVMConstants.CREATEASSETTX,\r\n    'Operation' = AVMConstants.OPERATIONTX,\r\n    'Import' = AVMConstants.IMPORTTX,\r\n    'Export' = AVMConstants.EXPORTTX,\r\n}\r\n\r\nexport enum PlatfromTxNameEnum {\r\n    'Transaction' = PlatformVMConstants.BASETX,\r\n    'Add Validator' = PlatformVMConstants.ADDVALIDATORTX,\r\n    'Add Delegator' = PlatformVMConstants.ADDDELEGATORTX,\r\n    'Import' = PlatformVMConstants.IMPORTTX,\r\n    'Export' = PlatformVMConstants.EXPORTTX,\r\n    'Add Subnet Validator' = PlatformVMConstants.ADDSUBNETVALIDATORTX,\r\n    'Create Chain' = PlatformVMConstants.CREATECHAINTX,\r\n    'Create Subnet' = PlatformVMConstants.CREATESUBNETTX,\r\n    'Advance Time' = PlatformVMConstants.ADVANCETIMETX,\r\n    'Reward Validator' = PlatformVMConstants.REWARDVALIDATORTX,\r\n}\r\n\r\n// TODO: create asset transactions\r\nexport enum ParseableAvmTxEnum {\r\n    'Transaction' = AVMConstants.BASETX,\r\n    'Import' = AVMConstants.IMPORTTX,\r\n    'Export' = AVMConstants.EXPORTTX,\r\n}\r\n\r\nexport enum ParseablePlatformEnum {\r\n    'Transaction' = PlatformVMConstants.BASETX,\r\n    'Add Validator' = PlatformVMConstants.ADDVALIDATORTX,\r\n    'Add Delegator' = PlatformVMConstants.ADDDELEGATORTX,\r\n    'Import' = PlatformVMConstants.IMPORTTX,\r\n    'Export' = PlatformVMConstants.EXPORTTX,\r\n}\r\n\r\nexport enum ParseableEvmTxEnum {\r\n    'Import' = EVMConstants.IMPORTTX,\r\n    'Export' = EVMConstants.EXPORTTX,\r\n}\r\n\r\nexport { ERC20Abi, ERC721Abi };\r\n","export const NO_NETWORK = new Error('No network selected.');\r\nexport const NO_EXPLORER_API = new Error('Explorer API not found.');\r\n","import { activeNetwork, web3 } from '@/Network/network';\r\nimport { ERC20Abi } from '@/helpers/tx_helper';\r\nimport { Erc20TokenData } from '@/Asset/types';\r\nimport { NO_NETWORK } from '@/errors';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport { Contract } from 'web3-eth-contract';\r\nimport xss from 'xss';\r\nexport class Erc20Token {\r\n    contract: Contract;\r\n    address: string;\r\n    name: string;\r\n    symbol: string;\r\n    decimals: number;\r\n    chainId: number;\r\n    data: Erc20TokenData;\r\n\r\n    constructor(data: Erc20TokenData) {\r\n        this.name = xss(data.name);\r\n        this.symbol = xss(data.symbol);\r\n        this.address = data.address;\r\n        this.decimals = data.decimals;\r\n        this.chainId = data.chainId;\r\n        this.data = data;\r\n\r\n        //@ts-ignore\r\n        this.contract = new web3.eth.Contract(ERC20Abi.abi, data.address);\r\n    }\r\n\r\n    toData(): Erc20TokenData {\r\n        return this.data;\r\n    }\r\n\r\n    static async getData(address: string): Promise<Erc20TokenData> {\r\n        //@ts-ignore\r\n        let contract = new web3.eth.Contract(ERC20Abi.abi, address);\r\n\r\n        let contractCalls = await Promise.all([\r\n            contract.methods.name().call(),\r\n            contract.methods.symbol().call(),\r\n            contract.methods.decimals().call(),\r\n        ]);\r\n        // Purify the values for XSS protection\r\n        let name = xss(contractCalls[0]);\r\n        let symbol = xss(contractCalls[1]);\r\n        let decimals = parseInt(contractCalls[2]);\r\n\r\n        if (!activeNetwork) {\r\n            throw NO_NETWORK;\r\n        }\r\n\r\n        return {\r\n            name,\r\n            symbol,\r\n            decimals,\r\n            address,\r\n            chainId: activeNetwork.evmChainID,\r\n        };\r\n    }\r\n\r\n    async balanceOf(address: string): Promise<BN> {\r\n        let bal = await this.contract.methods.balanceOf(address).call();\r\n        return new BN(bal);\r\n    }\r\n}\r\n","import { Erc20Store, Erc20TokenData } from '@/Asset/types';\r\nimport { Erc20Token } from '@/Asset/Erc20Token';\r\n\r\nexport let erc20Cache: Erc20Store = {};\r\n\r\nexport function getErc20Cache(): Erc20Store {\r\n    return {\r\n        ...erc20Cache,\r\n    };\r\n}\r\n\r\n/**\r\n * Clears the internal erc20 cache.\r\n */\r\nexport function bustErc20Cache() {\r\n    erc20Cache = {};\r\n}\r\n\r\n/**\r\n * Fetches ERC20 data from the given contract address and adds the token to the given store.\r\n * @param address ERC20 Contract address\r\n */\r\nasync function addErc20Token(address: string): Promise<Erc20Token> {\r\n    let existing = erc20Cache[address];\r\n    if (existing) {\r\n        return existing;\r\n    }\r\n\r\n    try {\r\n        let data: Erc20TokenData = await Erc20Token.getData(address);\r\n        let token = new Erc20Token(data);\r\n\r\n        erc20Cache[address] = token;\r\n        return token;\r\n    } catch (e) {\r\n        throw new Error('Unable to add ERC20 contract.');\r\n    }\r\n}\r\n\r\n/**\r\n * Initates and caches an erc20 token from the given data.\r\n * @param data Information such as name, symbol, and address about the ERC20 token.\r\n */\r\nexport function addErc20TokenFromData(data: Erc20TokenData): Erc20Token {\r\n    let address = data.address;\r\n    let existing = erc20Cache[address];\r\n    if (existing) {\r\n        return existing;\r\n    }\r\n\r\n    let token = new Erc20Token(data);\r\n    erc20Cache[address] = token;\r\n    return token;\r\n}\r\n\r\nexport async function getContractDataErc20(address: string): Promise<Erc20TokenData> {\r\n    try {\r\n        let data: Erc20TokenData = await Erc20Token.getData(address);\r\n        return data;\r\n    } catch (e) {\r\n        throw new Error(`ERC20 contract ${address} does not exist.`);\r\n    }\r\n}\r\n\r\nexport async function getErc20Token(address: string): Promise<Erc20Token> {\r\n    let storeItem = erc20Cache[address];\r\n    if (storeItem) {\r\n        return storeItem;\r\n    } else {\r\n        return await addErc20Token(address);\r\n    }\r\n}\r\n","import { Avalanche } from '@c4tplatform/caminojs/dist';\r\nimport Web3 from 'web3';\r\nimport { DefaultConfig } from './constants';\r\nimport { NetworkConfig, NetworkConfigRpc, NetworkProtocolType } from './types';\r\nimport { getRpcC, getRpcP, getRpcX } from './helpers/rpcFromConfig';\r\nimport { createAvalancheProvider } from '@/helpers/network_helper';\r\nimport { FetchHttpProvider } from '@/utils/FetchHTTPProvider';\r\nimport { getEthersJsonRpcProvider } from '@/Network/getEthersProvider';\r\nimport { ethers } from 'ethers';\r\nimport { HttpClient } from '@/helpers/http_client';\r\nimport { emitNetworkChange } from '@/Network/eventEmitter';\r\nimport { bustErc20Cache } from '@/Asset/Erc20';\r\n\r\nlet avaInst: Avalanche = createAvalancheProvider(DefaultConfig);\r\n\r\nexport const avalanche = () => avaInst;\r\n\r\nfunction getProviderFromUrl(url: string, credentials = false) {\r\n    return new FetchHttpProvider(url, {\r\n        timeout: 20000,\r\n        withCredentials: credentials,\r\n    });\r\n}\r\n\r\nconst rpcUrl = getRpcC(DefaultConfig);\r\nexport const web3 = new Web3(getProviderFromUrl(rpcUrl, true) as any);\r\n// JSON RPC Ethers provider\r\nexport let ethersProvider: ethers.providers.JsonRpcProvider = getEthersJsonRpcProvider(DefaultConfig);\r\nexport let explorer_api: HttpClient | null = null;\r\nexport let activeNetwork: NetworkConfig = DefaultConfig;\r\n\r\n/**\r\n * Returns the evm chain ID of the active network\r\n */\r\nexport function getEvmChainID(): number {\r\n    return activeNetwork.evmChainID;\r\n}\r\n\r\n/**\r\n * Changes the connected network of the SDK.\r\n * This is a synchronous call that does not do any network requests.\r\n * @param conf\r\n * @param credentials\r\n */\r\nexport function setAvalanche(ava: Avalanche): void {\r\n    avaInst = ava;\r\n\r\n    let conf: NetworkConfig = {\r\n        rawUrl: ava.getURL(),\r\n        apiProtocol: ava.getProtocol().toLowerCase() as NetworkProtocolType,\r\n        apiIp: ava.getHost(),\r\n        apiPort: ava.getPort(),\r\n        networkID: ava.getNetworkID(),\r\n        xChainID: ava.getNetwork().X.blockchainID,\r\n        pChainID: ava.getNetwork().P.blockchainID,\r\n        cChainID: ava.getNetwork().C.blockchainID,\r\n        avaxID: ava.getNetwork().X.avaxAssetID,\r\n        evmChainID: ava.getNetwork().C.chainID ?? 0,\r\n        get rpcUrl(): NetworkConfigRpc {\r\n            return {\r\n                c: getRpcC(this),\r\n                p: getRpcP(this),\r\n                x: getRpcX(this),\r\n            };\r\n        },\r\n    };\r\n\r\n    const useCredentials = ava.getRequestConfig().withCredentials === true;\r\n\r\n    let rpcUrl = getRpcC(conf);\r\n    web3.setProvider(getProviderFromUrl(rpcUrl, useCredentials) as any);\r\n    // Update ethers provider\r\n    ethersProvider = getEthersJsonRpcProvider(conf);\r\n\r\n    activeNetwork = conf;\r\n\r\n    emitNetworkChange(conf);\r\n    bustErc20Cache();\r\n}\r\n","import { ChainIdType } from '@/common';\r\nimport { activeNetwork } from '@/Network/network';\r\n\r\n/**\r\n * Given the chain ID returns the chain alias\r\n * @param id Chain id\r\n */\r\nexport function idToChainAlias(id: string): ChainIdType {\r\n    if (id === activeNetwork.xChainID) {\r\n        return 'X';\r\n    } else if (id === activeNetwork.pChainID) {\r\n        return 'P';\r\n    } else if (id === activeNetwork.cChainID) {\r\n        return 'C';\r\n    }\r\n    throw new Error('Unknown chain ID.');\r\n}\r\n","import Sockette from 'sockette';\r\nimport { PubSub } from '@c4tplatform/caminojs/dist';\r\nimport { WalletType } from '@/Wallet/types';\r\n\r\nconst FILTER_ADDRESS_SIZE = 1000;\r\n\r\nexport class AVMWebSocketProvider {\r\n    isConnected = false;\r\n    socket: Sockette;\r\n\r\n    wallets: WalletType[] = [];\r\n    boundHandler: any;\r\n\r\n    constructor(wsUrl: string) {\r\n        this.boundHandler = () => this.onWalletAddressChange();\r\n        this.socket = new Sockette(wsUrl, {\r\n            onopen: () => {\r\n                this.onOpen();\r\n            },\r\n            onclose: () => {\r\n                this.onClose();\r\n            },\r\n            onmessage: () => {\r\n                this.onMessage();\r\n            },\r\n            onerror: () => {\r\n                this.onError();\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Starts watching for transactions on this wallet.\r\n     * @param wallet The wallet instance to track\r\n     */\r\n    trackWallet(wallet: WalletType): void {\r\n        if (this.wallets.includes(wallet)) {\r\n            return;\r\n        }\r\n        this.wallets.push(wallet);\r\n\r\n        wallet.on('addressChanged', this.boundHandler);\r\n        this.updateFilterAddresses();\r\n    }\r\n\r\n    onWalletAddressChange(): void {\r\n        this.updateFilterAddresses();\r\n    }\r\n\r\n    removeWallet(w: WalletType): void {\r\n        if (!this.wallets.includes(w)) {\r\n            return;\r\n        }\r\n\r\n        let index = this.wallets.indexOf(w);\r\n        this.wallets.splice(index, 1);\r\n        w.off('addressChanged', this.boundHandler);\r\n    }\r\n\r\n    setEndpoint(wsUrl: string): void {\r\n        this.socket.close();\r\n\r\n        this.socket = new Sockette(wsUrl, {\r\n            onopen: () => {\r\n                this.onOpen();\r\n            },\r\n            onclose: () => {\r\n                this.onClose();\r\n            },\r\n            onmessage: () => {\r\n                this.onMessage();\r\n            },\r\n            onerror: () => {\r\n                this.onError();\r\n            },\r\n        });\r\n    }\r\n\r\n    // Clears the filter listening to X chain transactions\r\n    clearFilter(): void {\r\n        let pubsub = new PubSub();\r\n        let bloom = pubsub.newBloom(FILTER_ADDRESS_SIZE);\r\n        this.socket.send(bloom);\r\n    }\r\n\r\n    /**\r\n     * Creates a bloom filter from the addresses of the tracked wallets and subscribes to\r\n     * transactions on the node.\r\n     */\r\n    updateFilterAddresses() {\r\n        if (!this.isConnected) {\r\n            return;\r\n        }\r\n\r\n        let wallets = this.wallets;\r\n\r\n        let addrs = [];\r\n        for (let i = 0; i < wallets.length; i++) {\r\n            let w = wallets[i];\r\n            let externalAddrs = w.getExternalAddressesXSync();\r\n            let addrsLen = externalAddrs.length;\r\n            let startIndex = Math.max(0, addrsLen - FILTER_ADDRESS_SIZE);\r\n            let addAddrs = externalAddrs.slice(startIndex);\r\n            addrs.push(...addAddrs);\r\n        }\r\n\r\n        let pubsub = new PubSub();\r\n        let bloom = pubsub.newBloom(FILTER_ADDRESS_SIZE);\r\n        this.socket.send(bloom);\r\n\r\n        // Divide addresses by 100 and send multiple messages\r\n        // There is a max msg size ~10kb\r\n        const GROUP_AMOUNT = 100;\r\n        let index = 0;\r\n        while (index < addrs.length) {\r\n            let chunk = addrs.slice(index, index + GROUP_AMOUNT);\r\n            let addAddrs = pubsub.addAddresses(chunk);\r\n            this.socket.send(addAddrs);\r\n            index += GROUP_AMOUNT;\r\n        }\r\n    }\r\n\r\n    private updateWalletBalanceX() {\r\n        this.wallets.forEach((w) => {\r\n            w.updateUtxosX();\r\n        });\r\n    }\r\n\r\n    private onOpen() {\r\n        this.isConnected = true;\r\n        this.updateFilterAddresses();\r\n    }\r\n\r\n    private onMessage() {\r\n        this.updateWalletBalanceX();\r\n    }\r\n\r\n    private onClose() {\r\n        this.isConnected = false;\r\n    }\r\n\r\n    private onError() {}\r\n}\r\n","import { ethers } from 'ethers';\r\nimport { WalletType } from '@/Wallet/types';\r\n\r\nconst SOCKET_RECONNECT_TIMEOUT = 1000;\r\n\r\nexport class EVMWebSocketProvider {\r\n    provider: ethers.providers.WebSocketProvider;\r\n    wsUrl: string;\r\n    wallets: WalletType[] = [];\r\n\r\n    constructor(wsUrl: string) {\r\n        let provider = new ethers.providers.WebSocketProvider(wsUrl);\r\n        this.provider = provider;\r\n        this.wsUrl = wsUrl;\r\n\r\n        this.addListeners();\r\n    }\r\n\r\n    setEndpoint(wsUrl: string): void {\r\n        this.destroyConnection();\r\n        let provider = new ethers.providers.WebSocketProvider(wsUrl);\r\n        this.provider = provider;\r\n        this.wsUrl = wsUrl;\r\n\r\n        this.addListeners();\r\n    }\r\n\r\n    trackWallet(wallet: WalletType): void {\r\n        if (this.wallets.includes(wallet)) {\r\n            return;\r\n        }\r\n\r\n        this.wallets.push(wallet);\r\n    }\r\n\r\n    removeWallet(wallet: WalletType): void {\r\n        if (!this.wallets.includes(wallet)) {\r\n            return;\r\n        }\r\n\r\n        let index = this.wallets.indexOf(wallet);\r\n        this.wallets.splice(index, 1);\r\n    }\r\n\r\n    async destroyConnection(): Promise<void> {\r\n        this.provider._websocket.onclose = () => {};\r\n        await this.provider.destroy();\r\n    }\r\n\r\n    async reconnect(): Promise<void> {\r\n        // Clear the current onclose handler so that we dont attempt a reconnection\r\n        await this.destroyConnection();\r\n        let wsProvider = new ethers.providers.WebSocketProvider(this.wsUrl);\r\n        this.provider = wsProvider;\r\n    }\r\n\r\n    private addListeners() {\r\n        let provider = this.provider;\r\n\r\n        provider.on('block', () => {\r\n            this.onBlock();\r\n        });\r\n\r\n        // Save default function so we can keep calling it\r\n        let defaultOnOpen = provider._websocket.onopen;\r\n        let defaultOnClose = provider._websocket.onclose;\r\n\r\n        provider._websocket.onopen = (ev: any) => {\r\n            if (defaultOnOpen) defaultOnOpen(ev);\r\n        };\r\n\r\n        provider._websocket.onclose = (ev: any) => {\r\n            if (defaultOnClose) defaultOnClose(ev);\r\n\r\n            setTimeout(() => {\r\n                this.reconnect();\r\n            }, SOCKET_RECONNECT_TIMEOUT);\r\n        };\r\n    }\r\n\r\n    private removeListeners() {\r\n        this.provider.off('block', this.onBlock);\r\n    }\r\n\r\n    private onBlock() {\r\n        // Update wallet balances\r\n        this.wallets.forEach((w) => {\r\n            w.updateAvaxBalanceC();\r\n        });\r\n    }\r\n}\r\n","import { AVMWebSocketProvider } from '@/Network/providers/AVMWebSocketProvider';\r\nimport { EVMWebSocketProvider } from '@/Network/providers/EVMWebSocketProvider';\r\nimport { WalletType } from '@/Wallet/types';\r\nimport { NetworkConfig } from '@/Network/types';\r\nimport { wsUrlFromConfigEVM, wsUrlFromConfigX } from '@/helpers/network_helper';\r\nimport { activeNetwork } from '@/Network/network';\r\n\r\nexport class WebsocketProvider {\r\n    avmProvider: AVMWebSocketProvider;\r\n    evmProvider: EVMWebSocketProvider;\r\n\r\n    constructor(avmEndpoint: string, evmEndpoint: string) {\r\n        this.avmProvider = new AVMWebSocketProvider(avmEndpoint);\r\n        this.evmProvider = new EVMWebSocketProvider(evmEndpoint);\r\n    }\r\n\r\n    static fromActiveNetwork(): WebsocketProvider {\r\n        return WebsocketProvider.fromNetworkConfig(activeNetwork);\r\n    }\r\n\r\n    static fromNetworkConfig(config: NetworkConfig): WebsocketProvider {\r\n        let evm = wsUrlFromConfigEVM(config);\r\n        let avm = wsUrlFromConfigX(config);\r\n        return new WebsocketProvider(avm, evm);\r\n    }\r\n\r\n    public setEndpoints(avmEndpoint: string, evmEndpoint: string): void {\r\n        this.avmProvider.setEndpoint(avmEndpoint);\r\n        this.evmProvider.setEndpoint(evmEndpoint);\r\n    }\r\n\r\n    public setNetwork(config: NetworkConfig): void {\r\n        let evm = wsUrlFromConfigEVM(config);\r\n        let avm = wsUrlFromConfigX(config);\r\n        this.setEndpoints(avm, evm);\r\n    }\r\n\r\n    public trackWallet(wallet: WalletType): void {\r\n        this.avmProvider.trackWallet(wallet);\r\n        this.evmProvider.trackWallet(wallet);\r\n    }\r\n\r\n    public removeWallet(wallet: WalletType): void {\r\n        this.avmProvider.removeWallet(wallet);\r\n        this.evmProvider.removeWallet(wallet);\r\n    }\r\n}\r\n","import { NetworkConfig } from '@/Network/types';\r\nimport { LocalnetConfig } from '@/Network/constants';\r\nimport { activeNetwork } from '@/Network/network';\r\n\r\nexport function isFujiNetwork(_: NetworkConfig) {\r\n    return false;\r\n}\r\n\r\nexport function isMainnetNetwork(_: NetworkConfig) {\r\n    return false;\r\n}\r\n\r\nexport function isLocalNetwork(activeNetwork: NetworkConfig) {\r\n    return activeNetwork.networkID === LocalnetConfig.networkID;\r\n}\r\n\r\nexport function getAvaxAssetID() {\r\n    return activeNetwork.avaxID;\r\n}\r\n\r\nexport function getActiveNetworkConfig() {\r\n    return activeNetwork;\r\n}\r\n","import { Buffer } from 'buffer/';\r\nimport createHash from 'create-hash';\r\n\r\n/**\r\n * @ignore\r\n */\r\n\r\n/**\r\n * Helper utility for encryption and password hashing, browser-safe.\r\n * Encryption is using AES-GCM with a random public nonce.\r\n */\r\nexport default class CryptoHelpers {\r\n    protected ivSize = 12;\r\n\r\n    protected saltSize = 16;\r\n\r\n    protected tagLength = 128;\r\n\r\n    protected aesLength = 256;\r\n\r\n    public keygenIterations = 200000; //3.0, 2.0 uses 100000\r\n\r\n    /**\r\n     * Internal-intended function for cleaning passwords.\r\n     *\r\n     * @param password\r\n     * @param salt\r\n     */\r\n    _pwcleaner(password: string, slt: Buffer): Buffer {\r\n        const pw: Buffer = Buffer.from(password, 'utf8');\r\n        return this.sha256(Buffer.concat([pw, slt]));\r\n    }\r\n    /**\r\n     * Internal-intended function for producing an intermediate key.\r\n     *\r\n     * @param pwkey\r\n     */\r\n\r\n    async _keyMaterial(pwkey: Buffer): Promise<CryptoKey> {\r\n        return crypto.subtle.importKey('raw', new Uint8Array(pwkey), { name: 'PBKDF2' }, false, ['deriveKey']);\r\n    }\r\n\r\n    /**\r\n     * Internal-intended function for turning an intermediate key into a salted key.\r\n     *\r\n     * @param keyMaterial\r\n     * @param salt\r\n     */\r\n    async _deriveKey(keyMaterial: CryptoKey, salt: Buffer): Promise<CryptoKey> {\r\n        return crypto.subtle.deriveKey(\r\n            {\r\n                name: 'PBKDF2',\r\n                salt,\r\n                iterations: this.keygenIterations,\r\n                hash: 'SHA-256',\r\n            },\r\n            keyMaterial,\r\n            { name: 'AES-GCM', length: this.aesLength },\r\n            false,\r\n            ['encrypt', 'decrypt']\r\n        );\r\n    }\r\n\r\n    /**\r\n     * A SHA256 helper function.\r\n     *\r\n     * @param message The message to hash\r\n     *\r\n     * @returns A {@link https://github.com/feross/buffer|Buffer} containing the SHA256 hash of the message\r\n     */\r\n    sha256(message: string | Buffer): Buffer {\r\n        let buff: Buffer;\r\n        if (typeof message === 'string') {\r\n            buff = Buffer.from(message, 'utf8');\r\n        } else {\r\n            buff = Buffer.from(message);\r\n        }\r\n        return Buffer.from(createHash('sha256').update(buff).digest()); // ensures correct Buffer class is used\r\n    }\r\n\r\n    /**\r\n     * Generates a randomized {@link https://github.com/feross/buffer|Buffer} to be used as a salt\r\n     */\r\n    makeSalt(): Buffer {\r\n        const salt = Buffer.alloc(this.saltSize);\r\n        crypto.getRandomValues(salt);\r\n        return salt;\r\n    }\r\n\r\n    /**\r\n     * Produces a password-safe hash.\r\n     *\r\n     * @param password A string for the password\r\n     * @param salt An optional {@link https://github.com/feross/buffer|Buffer} containing a salt used in the password hash\r\n     *\r\n     * @returns An object containing the \"salt\" and the \"hash\" produced by this function, both as {@link https://github.com/feross/buffer|Buffer}.\r\n     */\r\n    async pwhash(password: string, salt: Buffer): Promise<{ salt: Buffer; hash: Buffer }> {\r\n        let slt: Buffer;\r\n        if (salt instanceof Buffer) {\r\n            slt = salt;\r\n            // @ts-ignore\r\n        } else if (salt instanceof Uint8Array && process.env.NODE_ENV === 'test') {\r\n            slt = salt;\r\n        } else {\r\n            slt = this.makeSalt();\r\n        }\r\n\r\n        const hash: Buffer = this._pwcleaner(password, this._pwcleaner(password, slt));\r\n        return { salt: slt, hash };\r\n    }\r\n\r\n    /**\r\n     * Encrypts plaintext with the provided password using AES-GCM.\r\n     *\r\n     * @param password A string for the password\r\n     * @param plaintext The plaintext to encrypt\r\n     * @param salt An optional {@link https://github.com/feross/buffer|Buffer} for the salt to use in the encryption process\r\n     *\r\n     * @returns An object containing the \"salt\", \"iv\", and \"ciphertext\", all as {@link https://github.com/feross/buffer|Buffer}.\r\n     */\r\n    async encrypt(\r\n        password: string,\r\n        plaintext: Buffer | string,\r\n        salt: Buffer | undefined = undefined\r\n    ): Promise<{ salt: Buffer; iv: Buffer; ciphertext: Buffer }> {\r\n        let slt: Buffer;\r\n        if (typeof salt !== 'undefined' && salt instanceof Buffer) {\r\n            slt = salt;\r\n        } else {\r\n            slt = this.makeSalt();\r\n        }\r\n\r\n        let pt: Buffer;\r\n        if (typeof plaintext !== 'undefined' && plaintext instanceof Buffer) {\r\n            pt = plaintext;\r\n        } else {\r\n            pt = Buffer.from(plaintext, 'utf8');\r\n        }\r\n        const pwkey: Buffer = this._pwcleaner(password, slt);\r\n        const keyMaterial: CryptoKey = await this._keyMaterial(pwkey);\r\n        const pkey: CryptoKey = await this._deriveKey(keyMaterial, slt);\r\n        const iv: Buffer = Buffer.from(crypto.getRandomValues(new Uint8Array(this.ivSize)));\r\n\r\n        const ciphertext: Buffer = Buffer.from(\r\n            await crypto.subtle.encrypt(\r\n                {\r\n                    name: 'AES-GCM',\r\n                    iv,\r\n                    additionalData: slt,\r\n                    tagLength: this.tagLength,\r\n                },\r\n                pkey,\r\n                pt\r\n            )\r\n        );\r\n\r\n        return {\r\n            salt: slt,\r\n            iv,\r\n            ciphertext,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Decrypts ciphertext with the provided password, iv, and salt.\r\n     *\r\n     * @param password A string for the password\r\n     * @param ciphertext A {@link https://github.com/feross/buffer|Buffer} for the ciphertext\r\n     * @param salt A {@link https://github.com/feross/buffer|Buffer} for the salt\r\n     * @param iv A {@link https://github.com/feross/buffer|Buffer} for the iv\r\n     */\r\n    async decrypt(password: string, ciphertext: Buffer, salt: Buffer, iv: Buffer): Promise<Buffer> {\r\n        const pwkey: Buffer = this._pwcleaner(password, salt);\r\n        const keyMaterial: CryptoKey = await this._keyMaterial(pwkey);\r\n        const pkey: CryptoKey = await this._deriveKey(keyMaterial, salt);\r\n\r\n        const pt: Buffer = Buffer.from(\r\n            await crypto.subtle.decrypt(\r\n                {\r\n                    name: 'AES-GCM',\r\n                    iv, // The initialization vector you used to encrypt\r\n                    additionalData: salt, // The addtionalData you used to encrypt (if any)\r\n                    tagLength: 128, // The tagLength you used to encrypt (if any)\r\n                },\r\n                pkey, // from generateKey or importKey above\r\n                ciphertext // ArrayBuffer of the data\r\n            )\r\n        );\r\n        return pt;\r\n    }\r\n\r\n    constructor() {}\r\n}\r\n","export const SUPPORTED_VERSION = ['2.0', '3.0', '4.0', '5.0', '6.0'];\r\nexport const KEYSTORE_VERSION = '6.0'; // the current version\r\nexport const ITERATIONS_V2 = 100000;\r\nexport const ITERATIONS_V3 = 200000; // and any version above\r\n","// Functions to manage import/export of keystore files\r\nimport {\r\n    AllKeyFileDecryptedTypes,\r\n    AllKeyFileTypes,\r\n    KeyFileDecryptedV2,\r\n    KeyFileDecryptedV3,\r\n    KeyFileDecryptedV4,\r\n    KeyFileDecryptedV5,\r\n    KeyFileDecryptedV6,\r\n    KeyFileKeyDecryptedV2,\r\n    KeyFileKeyDecryptedV3,\r\n    KeyFileKeyDecryptedV4,\r\n    KeyFileKeyDecryptedV5,\r\n    KeyFileKeyDecryptedV6,\r\n    KeyFileKeyV2,\r\n    KeyFileKeyV3,\r\n    KeyFileKeyV4,\r\n    KeyFileKeyV5,\r\n    KeyFileKeyV6,\r\n    KeyFileV2,\r\n    KeyFileV3,\r\n    KeyFileV4,\r\n    KeyFileV5,\r\n    KeyFileV6,\r\n    KeystoreFileKeyType,\r\n} from './types';\r\nimport { avalanche } from '@/Network/network';\r\nimport { Buffer } from 'buffer/';\r\nimport { MnemonicWallet } from '@/Wallet/MnemonicWallet';\r\nimport Crypto from './Crypto';\r\nimport { SingletonWallet } from '@/Wallet/SingletonWallet';\r\nimport { AccessWalletMultipleInput } from './types';\r\n// import { keyToKeypair } from '@/helpers/helper'\r\nimport * as bip39 from 'bip39';\r\nimport { bintools } from '@/common';\r\nimport { Buffer as AjsBuffer } from '@c4tplatform/caminojs/dist';\r\nimport { ITERATIONS_V2, ITERATIONS_V3, KEYSTORE_VERSION } from '@/Keystore/constants';\r\n\r\nconst cryptoHelpers = new Crypto();\r\n\r\ninterface IHash {\r\n    salt: Buffer;\r\n    hash: Buffer;\r\n}\r\n\r\ninterface PKCrypt {\r\n    salt: Buffer;\r\n    iv: Buffer;\r\n    ciphertext: Buffer;\r\n}\r\n\r\nexport async function readV2(data: KeyFileV2, pass: string) {\r\n    const version: string = data.version;\r\n    cryptoHelpers.keygenIterations = ITERATIONS_V2;\r\n\r\n    let salt: Buffer = bintools.cb58Decode(data.salt);\r\n    let pass_hash: string = data.pass_hash;\r\n\r\n    let checkHashString: string;\r\n    let checkHash: Buffer = await cryptoHelpers._pwcleaner(pass, salt);\r\n    checkHashString = bintools.cb58Encode(AjsBuffer.from(checkHash));\r\n\r\n    if (checkHashString !== pass_hash) {\r\n        throw 'INVALID_PASS';\r\n    }\r\n\r\n    let keys: KeyFileKeyV2[] = data.keys;\r\n    let keysDecrypt: KeyFileKeyDecryptedV2[] = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let key_data: KeyFileKeyV2 = keys[i];\r\n\r\n        let key: Buffer = bintools.cb58Decode(key_data.key);\r\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\r\n\r\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\r\n        let key_string = bintools.cb58Encode(AjsBuffer.from(key_decrypt));\r\n\r\n        keysDecrypt.push({\r\n            key: key_string,\r\n        });\r\n    }\r\n\r\n    return {\r\n        version,\r\n        activeIndex: 0,\r\n        keys: keysDecrypt,\r\n    };\r\n}\r\nexport async function readV3(data: KeyFileV3, pass: string) {\r\n    const version: string = data.version;\r\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\r\n\r\n    let salt: Buffer = bintools.cb58Decode(data.salt);\r\n    let pass_hash: string = data.pass_hash;\r\n\r\n    let checkHashString: string;\r\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\r\n    checkHashString = bintools.cb58Encode(AjsBuffer.from(checkHash.hash));\r\n\r\n    if (checkHashString !== pass_hash) {\r\n        throw 'INVALID_PASS';\r\n    }\r\n\r\n    let keys: KeyFileKeyV3[] = data.keys;\r\n    let keysDecrypt: KeyFileKeyDecryptedV3[] = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let key_data: KeyFileKeyV3 = keys[i];\r\n\r\n        let key: Buffer = bintools.cb58Decode(key_data.key);\r\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\r\n\r\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\r\n        let key_string = bintools.cb58Encode(AjsBuffer.from(key_decrypt));\r\n\r\n        keysDecrypt.push({\r\n            key: key_string,\r\n        });\r\n    }\r\n\r\n    return {\r\n        version,\r\n        activeIndex: 0,\r\n        keys: keysDecrypt,\r\n    };\r\n}\r\nexport async function readV4(data: KeyFileV4, pass: string): Promise<KeyFileDecryptedV5> {\r\n    const version = data.version;\r\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\r\n\r\n    let salt: Buffer = bintools.cb58Decode(data.salt);\r\n    let pass_hash: string = data.pass_hash;\r\n\r\n    let checkHashString: string;\r\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\r\n    checkHashString = bintools.cb58Encode(AjsBuffer.from(checkHash.hash));\r\n\r\n    if (checkHashString !== pass_hash) {\r\n        throw 'INVALID_PASS';\r\n    }\r\n\r\n    let keys: KeyFileKeyV4[] = data.keys;\r\n    let keysDecrypt: KeyFileKeyDecryptedV4[] = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let key_data: KeyFileKeyV4 = keys[i];\r\n\r\n        let key: Buffer = bintools.cb58Decode(key_data.key);\r\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\r\n\r\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\r\n        let key_string = bintools.cb58Encode(AjsBuffer.from(key_decrypt));\r\n\r\n        keysDecrypt.push({\r\n            key: key_string,\r\n        });\r\n    }\r\n\r\n    return {\r\n        version,\r\n        activeIndex: 0,\r\n        keys: keysDecrypt,\r\n    };\r\n}\r\n\r\nexport async function readV5(data: KeyFileV5, pass: string): Promise<KeyFileDecryptedV5> {\r\n    const version: string = data.version;\r\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\r\n\r\n    let salt: Buffer = bintools.cb58Decode(data.salt);\r\n    let pass_hash = data.pass_hash;\r\n\r\n    let checkHashString: string;\r\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\r\n    checkHashString = bintools.cb58Encode(AjsBuffer.from(checkHash.hash));\r\n\r\n    if (checkHashString !== pass_hash) {\r\n        throw 'INVALID_PASS';\r\n    }\r\n\r\n    let keys: KeyFileKeyV5[] = data.keys;\r\n    let keysDecrypt: KeyFileKeyDecryptedV5[] = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let key_data: KeyFileKeyV5 = keys[i];\r\n\r\n        let key: Buffer = bintools.cb58Decode(key_data.key);\r\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\r\n\r\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\r\n        let key_string = key_decrypt.toString();\r\n\r\n        keysDecrypt.push({\r\n            key: key_string,\r\n        });\r\n    }\r\n\r\n    return {\r\n        version,\r\n        activeIndex: 0,\r\n        keys: keysDecrypt,\r\n    };\r\n}\r\n\r\nexport async function readV6(data: KeyFileV6, pass: string): Promise<KeyFileDecryptedV6> {\r\n    const version: string = data.version;\r\n    const activeIndex = data.activeIndex;\r\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\r\n\r\n    let salt: Buffer = bintools.cb58Decode(data.salt);\r\n\r\n    let keys: KeyFileKeyV6[] = data.keys;\r\n    let keysDecrypt: KeyFileKeyDecryptedV6[] = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let key_data: KeyFileKeyV6 = keys[i];\r\n\r\n        let key: Buffer = bintools.cb58Decode(key_data.key);\r\n        let type: KeystoreFileKeyType = key_data.type;\r\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\r\n\r\n        let key_decrypt: Buffer;\r\n        try {\r\n            key_decrypt = await cryptoHelpers.decrypt(pass, key, salt, nonce);\r\n        } catch (e) {\r\n            throw 'INVALID_PASS';\r\n        }\r\n\r\n        const key_string = key_decrypt.toString();\r\n\r\n        keysDecrypt.push({\r\n            key: key_string,\r\n            type: type,\r\n        });\r\n    }\r\n\r\n    return {\r\n        version,\r\n        activeIndex: activeIndex || 0,\r\n        keys: keysDecrypt,\r\n    };\r\n}\r\n\r\n/**\r\n * Will decrypt and return the keys of the encrypted wallets in the given json file\r\n * @param data A JSON file of encrypted wallet keys\r\n * @param pass The password to decrypt the keys\r\n */\r\nexport async function readKeyFile(data: AllKeyFileTypes, pass: string): Promise<AllKeyFileDecryptedTypes> {\r\n    switch (data.version) {\r\n        case '6.0':\r\n            return await readV6(data as KeyFileV6, pass);\r\n        case '5.0':\r\n            return await readV5(data as KeyFileV5, pass);\r\n        case '4.0':\r\n            return await readV4(data as KeyFileV4, pass);\r\n        case '3.0':\r\n            return await readV3(data as KeyFileV3, pass);\r\n        case '2.0':\r\n            return await readV2(data as KeyFileV2, pass);\r\n        default:\r\n            throw 'INVALID_VERSION';\r\n    }\r\n}\r\n\r\nexport function extractKeysV2(\r\n    file: KeyFileDecryptedV2 | KeyFileDecryptedV3 | KeyFileDecryptedV4\r\n): AccessWalletMultipleInput[] {\r\n    let chainID = avalanche().XChain().getBlockchainAlias();\r\n    let keys = (file as KeyFileDecryptedV2 | KeyFileDecryptedV3 | KeyFileDecryptedV4).keys;\r\n\r\n    return keys.map((key) => {\r\n        // Private keys from the keystore file do not have the PrivateKey- prefix\r\n        let pk = 'PrivateKey-' + key.key;\r\n        // let keypair = keyToKeypair(pk, chainID)\r\n        let keypair = avalanche().XChain().newKeyChain().importKey(pk);\r\n\r\n        let keyBuf = keypair.getPrivateKey();\r\n        let keyHex: string = keyBuf.toString('hex');\r\n        let paddedKeyHex = keyHex.padStart(64, '0');\r\n        let mnemonic: string = bip39.entropyToMnemonic(paddedKeyHex);\r\n\r\n        return {\r\n            key: mnemonic,\r\n            type: 'mnemonic',\r\n        };\r\n    });\r\n}\r\n\r\nexport function extractKeysV5(file: KeyFileDecryptedV5): AccessWalletMultipleInput[] {\r\n    return file.keys.map((key) => ({\r\n        key: key.key,\r\n        type: 'mnemonic',\r\n    }));\r\n}\r\n\r\nexport function extractKeysV6(file: KeyFileDecryptedV6): AccessWalletMultipleInput[] {\r\n    return file.keys.map((key) => ({\r\n        type: key.type,\r\n        key: key.key,\r\n    }));\r\n}\r\n\r\nexport function extractKeysFromDecryptedFile(file: AllKeyFileDecryptedTypes): AccessWalletMultipleInput[] {\r\n    switch (file.version) {\r\n        case '6.0':\r\n            return extractKeysV6(file as KeyFileDecryptedV6);\r\n        case '5.0':\r\n            return extractKeysV5(file as KeyFileDecryptedV5);\r\n        case '4.0':\r\n            return extractKeysV2(file as KeyFileDecryptedV4);\r\n        case '3.0':\r\n            return extractKeysV2(file as KeyFileDecryptedV3);\r\n        case '2.0':\r\n            return extractKeysV2(file as KeyFileDecryptedV2);\r\n        default:\r\n            throw 'INVALID_VERSION';\r\n    }\r\n}\r\n\r\n/**\r\n * Given an array of wallets, the active index, and a password, return an encrypted JSON object that is the keystore file\r\n * @param wallets An array of wallet to encrypt\r\n * @param pass Password used in encryption\r\n * @param activeIndex Index of the active wallet in the `wallets` array\r\n * @return Returns a JSON object that can later be decrypted with `readKeyfile` and the given password\r\n */\r\nexport async function makeKeyfile(\r\n    wallets: (MnemonicWallet | SingletonWallet)[],\r\n    pass: string,\r\n    activeIndex: number\r\n): Promise<KeyFileV6> {\r\n    // 3.0 and above uses 200,000\r\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\r\n\r\n    let salt: Buffer = await cryptoHelpers.makeSalt();\r\n\r\n    let keys: KeyFileKeyV6[] = [];\r\n\r\n    for (let i = 0; i < wallets.length; i++) {\r\n        let wallet = wallets[i];\r\n        let key;\r\n        let type: KeystoreFileKeyType;\r\n        if (wallet.type === 'singleton') {\r\n            key = (wallet as SingletonWallet).key;\r\n            type = 'singleton';\r\n        } else {\r\n            key = (wallet as MnemonicWallet).getMnemonic();\r\n            type = 'mnemonic';\r\n        }\r\n        let pk_crypt: PKCrypt = await cryptoHelpers.encrypt(pass, key, salt);\r\n\r\n        let key_data: KeyFileKeyV6 = {\r\n            key: bintools.cb58Encode(AjsBuffer.from(pk_crypt.ciphertext)),\r\n            iv: bintools.cb58Encode(AjsBuffer.from(pk_crypt.iv)),\r\n            type: type,\r\n        };\r\n        keys.push(key_data);\r\n    }\r\n\r\n    let file_data: KeyFileV6 = {\r\n        version: KEYSTORE_VERSION,\r\n        salt: bintools.cb58Encode(AjsBuffer.from(salt)),\r\n        activeIndex,\r\n        keys: keys,\r\n    };\r\n    return file_data;\r\n}\r\n","// HD WALLET\r\n// m / purpose' / coin_type' / account' / change / address_index\r\n\r\nexport const AVAX_TOKEN_INDEX: string = '9000';\r\nexport const AVAX_TOKEN_PATH = `m/44'/${AVAX_TOKEN_INDEX}'`;\r\nexport const AVAX_ACCOUNT_PATH: string = `m/44'/${AVAX_TOKEN_INDEX}'/0'`; // Change and index left out\r\nexport const ETH_ACCOUNT_PATH: string = `m/44'/60'/0'`;\r\nexport const LEDGER_ETH_ACCOUNT_PATH = ETH_ACCOUNT_PATH + '/0/0';\r\n\r\nexport const HD_SCAN_GAP_SIZE: number = 20; // a gap of at least 20 indexes is needed to claim an index unused\r\nexport const SCAN_SIZE: number = 70; // the total number of utxos to look at initially to calculate last index\r\nexport const HD_SCAN_LOOK_UP_WINDOW: number = 64; // Number of addresses to check with the explorer at a single call\r\nexport const SCAN_RANGE: number = SCAN_SIZE - HD_SCAN_GAP_SIZE; // How many items are actually scanned\r\n\r\nexport const LEDGER_EXCHANGE_TIMEOUT = 90_000;\r\nexport const MIN_EVM_SUPPORT_V = '0.5.3';\r\n/**\r\n * In order to free the thread when deriving addresses, the execution will sleep every N address derived\r\n */\r\nexport const DERIVATION_SLEEP_INTERVAL = 200;\r\n","import { AVAX_TOKEN_PATH, ETH_ACCOUNT_PATH } from '@/Wallet/constants';\r\n\r\n/**\r\n * Given an account number, returns the Avalanche account derivation path as a string\r\n * @param accountIndex\r\n */\r\nexport function getAccountPathAvalanche(accountIndex: number) {\r\n    if (accountIndex < 0) throw new Error('Account index can not be less than 0.');\r\n    return `${AVAX_TOKEN_PATH}/${accountIndex}'`;\r\n}\r\n\r\n/**\r\n * Returns the string `m/44'/60'/0'/0/n` where `n` is the account index.\r\n * @param accountIndex\r\n */\r\nexport function getAccountPathEVM(accountIndex: number) {\r\n    if (accountIndex < 0) throw new Error('Account index can not be less than 0.');\r\n    return `${ETH_ACCOUNT_PATH}/0/${accountIndex}`;\r\n}\r\n","import { UTXOSet as AVMUTXOSet } from '@c4tplatform/caminojs/dist/apis/avm/utxos';\r\nimport { UTXOSet as PlatformUTXOSet } from '@c4tplatform/caminojs/dist/apis/platformvm/utxos';\r\nimport { UTXOSet as EVMUTXOSet } from '@c4tplatform/caminojs/dist/apis/evm/utxos';\r\nimport { avalanche } from '@/Network/network';\r\nimport { ExportChainsC, ExportChainsP, ExportChainsX } from '@/Wallet/types';\r\nimport { chainIdFromAlias } from '@/Network/helpers/idFromAlias';\r\nimport { GetStakeResponse } from '@c4tplatform/caminojs/dist/apis/platformvm/interfaces';\r\n\r\n/**\r\n *\r\n * @param addrs an array of X chain addresses to get the atomic utxos of\r\n * @param sourceChain Which chain to check against, either `P` or `C`\r\n */\r\nexport async function avmGetAtomicUTXOs(addrs: string[], sourceChain: ExportChainsX): Promise<AVMUTXOSet> {\r\n    const selection = addrs.slice(0, 1024);\r\n    const remaining = addrs.slice(1024);\r\n\r\n    const sourceChainId = chainIdFromAlias(sourceChain);\r\n    let utxoSet = (await avalanche().XChain().getUTXOs(selection, sourceChainId)).utxos;\r\n\r\n    if (remaining.length > 0) {\r\n        const nextSet = await avmGetAtomicUTXOs(remaining, sourceChain);\r\n        utxoSet = utxoSet.merge(nextSet);\r\n    }\r\n    return utxoSet;\r\n}\r\n\r\n// todo: Use end index to get ALL utxos\r\nexport async function platformGetAtomicUTXOs(addrs: string[], sourceChain: ExportChainsP): Promise<PlatformUTXOSet> {\r\n    let selection = addrs.slice(0, 1024);\r\n    let remaining = addrs.slice(1024);\r\n    const sourceChainId = chainIdFromAlias(sourceChain);\r\n\r\n    let utxoSet = (await avalanche().PChain().getUTXOs(selection, sourceChainId)).utxos;\r\n    if (remaining.length > 0) {\r\n        let nextSet = await platformGetAtomicUTXOs(remaining, sourceChain);\r\n        utxoSet = utxoSet.merge(nextSet);\r\n    }\r\n    return utxoSet;\r\n}\r\n\r\n// todo: Use end index to get ALL utxos\r\nexport async function evmGetAtomicUTXOs(addrs: string[], sourceChain: ExportChainsC): Promise<EVMUTXOSet> {\r\n    if (addrs.length > 1024) {\r\n        throw new Error('Number of addresses can not be greater than 1024.');\r\n    }\r\n    const sourceChainId = chainIdFromAlias(sourceChain);\r\n    let result: EVMUTXOSet = (await avalanche().CChain().getUTXOs(addrs, sourceChainId)).utxos;\r\n    return result;\r\n}\r\n\r\nexport async function getStakeForAddresses(addrs: string[]): Promise<GetStakeResponse> {\r\n    if (addrs.length <= 256) {\r\n        let data = await avalanche().PChain().getStake(addrs);\r\n        return data;\r\n    } else {\r\n        //Break the list in to 1024 chunks\r\n        let chunk = addrs.slice(0, 256);\r\n        let remainingChunk = addrs.slice(256);\r\n\r\n        let chunkData = await avalanche().PChain().getStake(chunk);\r\n        let chunkStake = chunkData.staked;\r\n        let chunkUtxos = chunkData.stakedOutputs;\r\n\r\n        let next = await getStakeForAddresses(remainingChunk);\r\n        return {\r\n            staked: chunkStake.add(next.staked),\r\n            stakedOutputs: [...chunkUtxos, ...next.stakedOutputs],\r\n        };\r\n    }\r\n}\r\n\r\nexport async function avmGetAllUTXOs(addrs: string[]): Promise<AVMUTXOSet> {\r\n    if (addrs.length <= 1024) {\r\n        let utxos = await avmGetAllUTXOsForAddresses(addrs);\r\n        return utxos;\r\n    } else {\r\n        //Break the list in to 1024 chunks\r\n        let chunk = addrs.slice(0, 1024);\r\n        let remainingChunk = addrs.slice(1024);\r\n\r\n        let newSet = await avmGetAllUTXOsForAddresses(chunk);\r\n        return newSet.merge(await avmGetAllUTXOs(remainingChunk));\r\n    }\r\n}\r\n\r\nexport async function avmGetAllUTXOsForAddresses(addrs: string[], endIndex?: any): Promise<AVMUTXOSet> {\r\n    if (addrs.length > 1024) throw new Error('Maximum length of addresses is 1024');\r\n    let response;\r\n    if (!endIndex) {\r\n        response = await avalanche().XChain().getUTXOs(addrs);\r\n    } else {\r\n        response = await avalanche().XChain().getUTXOs(addrs, undefined, 0, endIndex);\r\n    }\r\n\r\n    let utxoSet = response.utxos;\r\n    let nextEndIndex = response.endIndex;\r\n    let len = response.numFetched;\r\n\r\n    if (len >= 1024) {\r\n        let subUtxos = await avmGetAllUTXOsForAddresses(addrs, nextEndIndex);\r\n        return utxoSet.merge(subUtxos);\r\n    }\r\n    return utxoSet;\r\n}\r\n\r\n// helper method to get utxos for more than 1024 addresses\r\nexport async function platformGetAllUTXOs(addrs: string[]): Promise<PlatformUTXOSet> {\r\n    if (addrs.length <= 1024) {\r\n        let newSet = await platformGetAllUTXOsForAddresses(addrs);\r\n        return newSet;\r\n    } else {\r\n        //Break the list in to 1024 chunks\r\n        let chunk = addrs.slice(0, 1024);\r\n        let remainingChunk = addrs.slice(1024);\r\n\r\n        let newSet = await platformGetAllUTXOsForAddresses(chunk);\r\n\r\n        return newSet.merge(await platformGetAllUTXOs(remainingChunk));\r\n    }\r\n}\r\n\r\nexport async function platformGetAllUTXOsForAddresses(addrs: string[], endIndex?: any): Promise<PlatformUTXOSet> {\r\n    let response;\r\n    if (!endIndex) {\r\n        response = await avalanche().PChain().getUTXOs(addrs);\r\n    } else {\r\n        response = await avalanche().PChain().getUTXOs(addrs, undefined, 0, endIndex);\r\n    }\r\n\r\n    let utxoSet = response.utxos;\r\n    let nextEndIndex = response.endIndex;\r\n    let len = response.numFetched;\r\n\r\n    if (len >= 1024) {\r\n        let subUtxos = await platformGetAllUTXOsForAddresses(addrs, nextEndIndex);\r\n        return utxoSet.merge(subUtxos);\r\n    }\r\n\r\n    return utxoSet;\r\n}\r\n","import { ChainIdType } from '@/common';\r\nimport Web3 from 'web3';\r\nimport { bintools } from '@/common';\r\n\r\nexport const validateAddress = (address: string): boolean | string => {\r\n    return validateAddressX(address) || validateAddressP(address) || validateAddressEVM(address);\r\n};\r\n\r\nexport function validateAddressX(address: string) {\r\n    try {\r\n        let buff = bintools.parseAddress(address, 'X');\r\n        if (!buff) return false;\r\n        return true;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function validateAddressP(address: string) {\r\n    try {\r\n        let buff = bintools.parseAddress(address, 'P');\r\n        if (!buff) return false;\r\n        return true;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function validateAddressEVM(address: string) {\r\n    return Web3.utils.isAddress(address);\r\n}\r\n\r\n/**\r\n * Returns the human readable part of a X or P bech32 address.\r\n * @param address\r\n */\r\nexport function getAddressHRP(address: string): string {\r\n    if (!validateAddress(address)) {\r\n        throw new Error('Invalid X or P address.');\r\n    }\r\n    return address.split('-')[1].split('1')[0];\r\n}\r\n\r\n/**\r\n * Given an address, return which Chain it belongs to\r\n * @param address\r\n */\r\nexport function getAddressChain(address: string): ChainIdType {\r\n    if (!validateAddress(address)) {\r\n        throw new Error('Invalid address.');\r\n    }\r\n\r\n    if (Web3.utils.isAddress(address)) {\r\n        return 'C';\r\n    } else {\r\n        return address[0] as ChainIdType;\r\n    }\r\n}\r\n","import { Buffer as BufferAvalanche } from '@c4tplatform/caminojs/dist';\r\nimport { validateAddress } from '@/helpers/address_helper';\r\nimport createHash from 'create-hash';\r\nimport { PayloadBase, PayloadTypes } from '@c4tplatform/caminojs/dist/utils';\r\n\r\n/**\r\n * Checks if address is valid.\r\n *\r\n * @return\r\n * boolean if address is valid, error message if not valid.\r\n */\r\nexport function isValidAddress(address: string): boolean {\r\n    return validateAddress(address) === true;\r\n}\r\n\r\nexport function digestMessage(msgStr: string): Buffer {\r\n    let mBuf = Buffer.from(msgStr, 'utf8');\r\n    let msgSize = Buffer.alloc(4);\r\n    msgSize.writeUInt32BE(mBuf.length, 0);\r\n    let msgBuf = Buffer.from(`\\x1AAvalanche Signed Message:\\n${msgSize}${msgStr}`, 'utf8');\r\n    return createHash('sha256').update(msgBuf).digest();\r\n}\r\n\r\nlet payloadtypes = PayloadTypes.getInstance();\r\n\r\nexport function parseNftPayload(rawPayload: string): PayloadBase {\r\n    let payload = BufferAvalanche.from(rawPayload, 'base64');\r\n    payload = BufferAvalanche.concat([new BufferAvalanche(4).fill(payload.length), payload]);\r\n\r\n    let typeId = payloadtypes.getTypeID(payload);\r\n    let pl: BufferAvalanche = payloadtypes.getContent(payload);\r\n    let payloadbase: PayloadBase = payloadtypes.select(typeId, pl);\r\n\r\n    return payloadbase;\r\n}\r\n","import { BN } from '@c4tplatform/caminojs/dist';\r\nimport Big from 'big.js';\r\n\r\ndeclare module 'big.js' {\r\n    interface Big {\r\n        toLocaleString(toFixed?: number): string;\r\n    }\r\n}\r\n\r\nBig.prototype.toLocaleString = function (toFixed: number = 9) {\r\n    let fixedStr = this.toFixed(toFixed, 0);\r\n    let split = fixedStr.split('.');\r\n    let wholeStr = parseInt(split[0]).toLocaleString('en-US');\r\n\r\n    if (split.length === 1) {\r\n        return wholeStr;\r\n    } else {\r\n        let remainderStr = split[1];\r\n\r\n        // remove trailing 0s\r\n        let lastChar = remainderStr.charAt(remainderStr.length - 1);\r\n        while (lastChar === '0') {\r\n            remainderStr = remainderStr.substring(0, remainderStr.length - 1);\r\n            lastChar = remainderStr.charAt(remainderStr.length - 1);\r\n        }\r\n\r\n        let trimmed = remainderStr.substring(0, toFixed);\r\n        if (!trimmed) return wholeStr;\r\n        return `${wholeStr}.${trimmed}`;\r\n    }\r\n};\r\n\r\n/**\r\n * @param val the amount to parse\r\n * @param denomination number of decimal places to parse with\r\n */\r\nexport function bnToBig(val: BN, denomination = 0): Big {\r\n    let mult = Big(10).pow(denomination);\r\n    return new Big(val.toString()).div(mult);\r\n}\r\n\r\n/**\r\n * Converts a BN amount of 18 decimals to 9.\r\n * Used for AVAX C <-> X,P conversions\r\n * @param amount\r\n */\r\nexport function avaxCtoX(amount: BN) {\r\n    let tens = new BN(10).pow(new BN(9));\r\n    return amount.div(tens);\r\n}\r\n\r\nexport function avaxXtoC(amount: BN) {\r\n    let tens = new BN(10).pow(new BN(9));\r\n    return amount.mul(tens);\r\n}\r\n\r\nexport function avaxPtoC(amount: BN) {\r\n    return avaxXtoC(amount);\r\n}\r\n\r\nexport function bnToBigAvaxX(val: BN): Big {\r\n    return bnToBig(val, 9);\r\n}\r\n\r\nexport function bnToBigAvaxP(val: BN): Big {\r\n    return bnToBigAvaxX(val);\r\n}\r\n\r\nexport function bnToBigAvaxC(val: BN): Big {\r\n    return bnToBig(val, 18);\r\n}\r\n\r\n/**\r\n * Parses the value using a denomination of 18\r\n *\r\n * @param val the amount to parse given in WEI\r\n *\r\n * @example\r\n * ```\r\n * bnToAvaxC(new BN('22500000000000000000')\r\n * // will return  22.5\r\n *```\r\n *\r\n */\r\nexport function bnToAvaxC(val: BN): string {\r\n    return bnToLocaleString(val, 18);\r\n}\r\n\r\n/**\r\n * Parses the value using a denomination of 9\r\n *\r\n * @param val the amount to parse given in nAVAX\r\n */\r\nexport function bnToAvaxX(val: BN): string {\r\n    return bnToLocaleString(val, 9);\r\n}\r\n\r\n/**\r\n * Parses the value using a denomination of 9\r\n *\r\n * @param val the amount to parse given in nAVAX\r\n */\r\nexport function bnToAvaxP(val: BN): string {\r\n    return bnToAvaxX(val);\r\n}\r\n\r\n/**\r\n *\r\n * @param val the number to parse\r\n * @param decimals number of decimal places used to parse the number\r\n */\r\nexport function numberToBN(val: number | string, decimals: number): BN {\r\n    let valBig = Big(val);\r\n    let tens = Big(10).pow(decimals);\r\n    let valBN = new BN(valBig.times(tens).toFixed(0));\r\n    return valBN;\r\n}\r\n\r\nexport function numberToBNAvaxX(val: number | string) {\r\n    return numberToBN(val, 9);\r\n}\r\n\r\nexport function numberToBNAvaxP(val: number | string) {\r\n    return numberToBNAvaxX(val);\r\n}\r\n\r\nexport function numberToBNAvaxC(val: number | string) {\r\n    return numberToBN(val, 18);\r\n}\r\n\r\n/**\r\n * @Remarks\r\n * A helper method to convert BN numbers to human readable strings.\r\n *\r\n * @param val The amount to convert\r\n * @param decimals Number of decimal places to parse the amount with\r\n *\r\n * @example\r\n * ```\r\n * bnToLocaleString(new BN(100095),2)\r\n * // will return '1,000.95'\r\n * ```\r\n */\r\nexport function bnToLocaleString(val: BN, decimals = 9): string {\r\n    let bigVal = bnToBig(val, decimals);\r\n    return bigToLocaleString(bigVal, decimals);\r\n}\r\n\r\nexport function bigToLocaleString(bigVal: Big, decimals: number = 9): string {\r\n    let fixedStr = bigVal.toFixed(decimals);\r\n    let split = fixedStr.split('.');\r\n    let wholeStr = parseInt(split[0]).toLocaleString('en-US');\r\n\r\n    if (split.length === 1) {\r\n        return wholeStr;\r\n    } else {\r\n        let remainderStr = split[1];\r\n\r\n        // remove trailing 0s\r\n        let lastChar = remainderStr.charAt(remainderStr.length - 1);\r\n        while (lastChar === '0') {\r\n            remainderStr = remainderStr.substring(0, remainderStr.length - 1);\r\n            lastChar = remainderStr.charAt(remainderStr.length - 1);\r\n        }\r\n\r\n        let trimmed = remainderStr.substring(0, decimals);\r\n        if (!trimmed) return wholeStr;\r\n        return `${wholeStr}.${trimmed}`;\r\n    }\r\n}\r\n\r\n/**\r\n * Converts a string to a BN value of the given denomination.\r\n * @param value The string value of the\r\n * @param decimals\r\n *\r\n * @example\r\n * ```\r\n * stringToBN('1.32', 5) // is same as BN(132000)\r\n * ```\r\n */\r\nexport function stringToBN(value: string, decimals: number) {\r\n    let big = Big(value);\r\n    let tens = Big(10).pow(decimals);\r\n    let mult = big.times(tens);\r\n    let rawStr = mult.toFixed(0, 0);\r\n    return new BN(rawStr);\r\n}\r\n\r\nexport function bigToBN(val: Big, denom: number): BN {\r\n    let denomFlr = Math.floor(denom);\r\n    if (denomFlr < 0) throw new Error('Denomination can not be less that 0.');\r\n\r\n    const bnBig = val.mul(Big(10).pow(denomFlr));\r\n    const bnStr = bnBig.toFixed(0, 0);\r\n    return new BN(bnStr);\r\n}\r\n","import { avalanche } from '@/Network/network';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\n\r\n/**\r\n * Returns the transaction fee for X chain.\r\n */\r\nexport function getTxFeeX(): BN {\r\n    return avalanche().XChain().getTxFee();\r\n}\r\n\r\n/**\r\n * Returns the transaction fee for P chain.\r\n */\r\nexport function getTxFeeP(): BN {\r\n    return avalanche().PChain().getTxFee();\r\n}\r\n","import {\r\n    AvmStatusResponseType,\r\n    AvmStatusType,\r\n    ChainStatusResponseTypeC,\r\n    ChainStatusTypeC,\r\n    PlatformStatusResponseType,\r\n    PlatformStatusType,\r\n} from '@/utils/types';\r\nimport { avalanche, web3 } from '@/Network/network';\r\n\r\n/**\r\n * Waits until the given tx id is accepted on X chain\r\n * @param txId Tx ID to wait for\r\n * @param tryCount Number of attempts until timeout\r\n */\r\nexport async function waitTxX(txId: string, tryCount = 10): Promise<string> {\r\n    if (tryCount <= 0) {\r\n        throw new Error('Timeout');\r\n    }\r\n    let resp: AvmStatusResponseType;\r\n\r\n    try {\r\n        resp = (await avalanche().XChain().getTxStatus(txId)) as AvmStatusResponseType;\r\n    } catch (e) {\r\n        throw new Error('Unable to get transaction status.');\r\n    }\r\n\r\n    let status: AvmStatusType;\r\n    let reason;\r\n    if (typeof resp === 'string') {\r\n        status = resp as AvmStatusType;\r\n    } else {\r\n        status = resp.status as AvmStatusType;\r\n        reason = resp.reason;\r\n    }\r\n\r\n    if (status === 'Unknown' || status === 'Processing') {\r\n        return await new Promise((resolve) => {\r\n            setTimeout(async () => {\r\n                resolve(await waitTxX(txId, tryCount - 1));\r\n            }, 1000);\r\n        });\r\n        // return await waitTxX(txId, tryCount - 1);\r\n    } else if (status === 'Rejected') {\r\n        throw new Error(reason);\r\n    } else if (status === 'Accepted') {\r\n        return txId;\r\n    }\r\n\r\n    return txId;\r\n}\r\n\r\nexport async function waitTxP(txId: string, tryCount = 10): Promise<string> {\r\n    if (tryCount <= 0) {\r\n        throw new Error('Timeout');\r\n    }\r\n    let resp: PlatformStatusResponseType;\r\n\r\n    try {\r\n        resp = (await avalanche().PChain().getTxStatus(txId)) as PlatformStatusResponseType;\r\n    } catch (e) {\r\n        throw new Error('Unable to get transaction status.');\r\n    }\r\n\r\n    let status: PlatformStatusType;\r\n    let reason;\r\n    if (typeof resp === 'string') {\r\n        status = resp as PlatformStatusType;\r\n    } else {\r\n        status = resp.status as PlatformStatusType;\r\n        reason = resp.reason;\r\n    }\r\n\r\n    if (status === 'Unknown' || status === 'Processing') {\r\n        return await new Promise((resolve) => {\r\n            setTimeout(async () => {\r\n                resolve(await waitTxP(txId, tryCount - 1));\r\n            }, 1000);\r\n        });\r\n        // return await waitTxX(txId, tryCount - 1);\r\n    } else if (status === 'Dropped') {\r\n        throw new Error(reason);\r\n    } else if (status === 'Committed') {\r\n        return txId;\r\n    } else {\r\n        throw new Error('Unknown status type.');\r\n    }\r\n}\r\n\r\nexport async function waitTxEvm(txHash: string, tryCount = 10): Promise<string> {\r\n    if (tryCount <= 0) {\r\n        throw new Error('Timeout');\r\n    }\r\n\r\n    let receipt;\r\n\r\n    try {\r\n        receipt = await web3.eth.getTransactionReceipt(txHash);\r\n    } catch (e) {\r\n        throw new Error('Unable to get transaction receipt.');\r\n    }\r\n\r\n    if (!receipt) {\r\n        return await new Promise((resolve) => {\r\n            setTimeout(async () => {\r\n                resolve(await waitTxEvm(txHash, tryCount - 1));\r\n            }, 1000);\r\n        });\r\n    } else {\r\n        if (receipt.status) {\r\n            return txHash;\r\n        } else {\r\n            throw new Error('Transaction reverted.');\r\n        }\r\n    }\r\n}\r\n\r\nexport async function waitTxC(txId: string, tryCount = 10): Promise<string> {\r\n    if (tryCount <= 0) {\r\n        throw new Error('Timeout');\r\n    }\r\n\r\n    let resp: ChainStatusResponseTypeC;\r\n    try {\r\n        resp = (await avalanche().CChain().getAtomicTxStatus(txId)) as ChainStatusResponseTypeC;\r\n    } catch (e) {\r\n        throw new Error('Unable to get transaction status.');\r\n    }\r\n\r\n    let status: ChainStatusTypeC;\r\n    let reason;\r\n    if (typeof resp === 'string') {\r\n        status = resp as ChainStatusTypeC;\r\n    } else {\r\n        status = resp.status as ChainStatusTypeC;\r\n        reason = resp.reason;\r\n    }\r\n\r\n    if (status === 'Unknown' || status === 'Processing') {\r\n        return await new Promise((resolve) => {\r\n            setTimeout(async () => {\r\n                resolve(await waitTxC(txId, tryCount - 1));\r\n            }, 1000);\r\n        });\r\n        // return await waitTxX(txId, tryCount - 1);\r\n    } else if (status === 'Dropped') {\r\n        throw new Error(reason);\r\n    } else if (status === 'Accepted') {\r\n        return txId;\r\n    } else {\r\n        throw new Error('Unknown status type.');\r\n    }\r\n}\r\n","export async function sleep(durMs: number) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, durMs);\r\n    });\r\n}\r\n","import CryptoJS from 'crypto-js/core';\r\nimport AES from 'crypto-js/aes';\r\nimport randomstring from 'randomstring';\r\n\r\n/**\r\n * A helper class to obfuscate strings when storing in memory. Used as a helper rather than secure encryption.\r\n * @Remarks Do NOT use this class for actual secure encryption needs.\r\n */\r\nexport class CypherAES {\r\n    private pass: string;\r\n    private encrypted: string;\r\n\r\n    constructor(value: string) {\r\n        this.pass = randomstring.generate(32);\r\n        this.encrypted = AES.encrypt(value, this.pass).toString();\r\n    }\r\n\r\n    public getValue() {\r\n        return AES.decrypt(this.encrypted, this.pass).toString(CryptoJS.enc.Utf8);\r\n    }\r\n}\r\n","import { OrteliusUTXO } from '@/Explorer';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport { iHistoryBaseTxTokenOwners } from '@/History';\r\n\r\nexport function filterDuplicateStrings(vals: string[]) {\r\n    return vals.filter((val, i) => vals.indexOf(val) === i);\r\n}\r\n\r\nexport function isArraysOverlap(arr1: any[], arr2: any[]): boolean {\r\n    let overlaps = arr1.filter((item) => arr2.includes(item));\r\n    return overlaps.length > 0;\r\n}\r\n\r\n/**\r\n * Returns true if this utxo is owned by any of the given addresses\r\n * @param ownerAddrs Addresses to check against\r\n * @param output The UTXO\r\n */\r\nexport function isOutputOwner(ownerAddrs: string[], output: OrteliusUTXO): boolean {\r\n    let outAddrs = output.addresses;\r\n    if (!outAddrs) return false;\r\n\r\n    let totAddrs = outAddrs.filter((addr) => {\r\n        return ownerAddrs.includes(addr);\r\n    });\r\n\r\n    return totAddrs.length > 0;\r\n}\r\n\r\nexport function isOutputOwnerC(ownerAddr: string, output: OrteliusUTXO): boolean {\r\n    let outAddrs = output.caddresses;\r\n    if (!outAddrs) return false;\r\n    return outAddrs.includes(ownerAddr);\r\n}\r\n\r\n/**\r\n * Returns the total amount of `assetID` in the given `utxos` owned by `address`. Checks for X/P addresses.\r\n * @param utxos UTXOs to calculate balance from.\r\n * @param addresses The wallet's  addresses.\r\n * @param assetID Only count outputs of this asset ID.\r\n * @param chainID Only count the outputs on this chain.\r\n * @param isStake Set to `true` if looking for staking utxos.\r\n */\r\nexport function getAssetBalanceFromUTXOs(\r\n    utxos: OrteliusUTXO[],\r\n    addresses: string[],\r\n    assetID: string,\r\n    chainID: string,\r\n    isStake = false\r\n) {\r\n    let myOuts = utxos.filter((utxo) => {\r\n        if (\r\n            assetID === utxo.assetID &&\r\n            isOutputOwner(addresses, utxo) &&\r\n            chainID === utxo.chainID &&\r\n            utxo.stake === isStake\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    let tot = myOuts.reduce((acc, utxo) => {\r\n        return acc.add(new BN(utxo.amount));\r\n    }, new BN(0));\r\n\r\n    return tot;\r\n}\r\n\r\n/**\r\n * Returns the total amount of `assetID` in the given `utxos` owned by `address`. Checks for EVM address.\r\n * @param utxos UTXOs to calculate balance from.\r\n * @param address The wallet's  evm address `0x...`.\r\n * @param assetID Only count outputs of this asset ID.\r\n * @param chainID Only count the outputs on this chain.\r\n * @param isStake Set to `true` if looking for staking utxos.\r\n */\r\nexport function getEvmAssetBalanceFromUTXOs(\r\n    utxos: OrteliusUTXO[],\r\n    address: string,\r\n    assetID: string,\r\n    chainID: string,\r\n    isStake = false\r\n) {\r\n    let myOuts = utxos.filter((utxo) => {\r\n        if (\r\n            assetID === utxo.assetID &&\r\n            isOutputOwnerC(address, utxo) &&\r\n            chainID === utxo.chainID &&\r\n            utxo.stake === isStake\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    let tot = myOuts.reduce((acc, utxo) => {\r\n        return acc.add(new BN(utxo.amount));\r\n    }, new BN(0));\r\n\r\n    return tot;\r\n}\r\n\r\n/**\r\n * Returns UTXOs owned by the given addresses\r\n * @param outs UTXOs to filter\r\n * @param myAddrs Addresses to filter by\r\n */\r\nexport function getOwnedOutputs(outs: OrteliusUTXO[], myAddrs: string[]) {\r\n    return outs.filter((out) => {\r\n        let outAddrs = out.addresses || [];\r\n        return isArraysOverlap(myAddrs, outAddrs);\r\n    });\r\n}\r\n\r\n/**\r\n * Returns addresses of the given UTXOs\r\n * @param outs UTXOs to get the addresses of.\r\n */\r\nexport function getAddresses(outs: OrteliusUTXO[]): string[] {\r\n    let allAddrs: string[] = [];\r\n\r\n    for (let i = 0; i < outs.length; i++) {\r\n        let out = outs[i];\r\n        let addrs = out.addresses || [];\r\n        allAddrs.push(...addrs);\r\n    }\r\n\r\n    // Remove duplicated\r\n    return allAddrs.filter((addr, i) => allAddrs.indexOf(addr) === i);\r\n}\r\n\r\n/**\r\n * Returns only the UTXOs of the given asset id.\r\n * @param outs\r\n * @param assetID\r\n */\r\nexport function getAssetOutputs(outs: OrteliusUTXO[], assetID: string) {\r\n    return outs.filter((out) => out.assetID === assetID);\r\n}\r\n\r\n/**\r\n * Returns UTXOs not owned by the given addresses\r\n * @param outs UTXOs to filter\r\n * @param myAddrs Addresses to filter by\r\n */\r\nexport function getNotOwnedOutputs(outs: OrteliusUTXO[], myAddrs: string[]) {\r\n    return outs.filter((out) => {\r\n        let outAddrs = out.addresses || [];\r\n        return !isArraysOverlap(myAddrs, outAddrs);\r\n    });\r\n}\r\n\r\nexport function getOutputTotals(outs: OrteliusUTXO[]) {\r\n    return outs.reduce((acc, out) => {\r\n        return acc.add(new BN(out.amount));\r\n    }, new BN(0));\r\n}\r\n\r\nexport function getRewardOuts(outs: OrteliusUTXO[]) {\r\n    return outs.filter((out) => out.rewardUtxo);\r\n}\r\n\r\n/**\r\n * Returns outputs belonging to the given chain ID\r\n * @param outs UTXOs to filter\r\n * @param chainID Chain ID to filter by\r\n */\r\nexport function getOutputsOfChain(outs: OrteliusUTXO[], chainID: string) {\r\n    return outs.filter((out) => out.chainID === chainID);\r\n}\r\n\r\n/**\r\n * Filters the UTXOs of a certain output type\r\n * @param outs UTXOs to filter\r\n * @param type Output type to filter by\r\n */\r\nexport function getOutputsOfType(outs: OrteliusUTXO[], type: number) {\r\n    return outs.filter((out) => out.outputType === type);\r\n}\r\n\r\n/**\r\n * Returns a map of asset id to owner addresses\r\n * @param outs\r\n */\r\nexport function getOutputsAssetOwners(outs: OrteliusUTXO[]): iHistoryBaseTxTokenOwners {\r\n    let assetIDs = getOutputsAssetIDs(outs);\r\n    let res: iHistoryBaseTxTokenOwners = {};\r\n\r\n    for (let i = 0; i < assetIDs.length; i++) {\r\n        let id = assetIDs[i];\r\n        let assetUTXOs = getAssetOutputs(outs, id);\r\n        let addrs = getAddresses(assetUTXOs);\r\n        res[id] = addrs;\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * Returns an array of Asset IDs from the given UTXOs\r\n * @param outs Array of UTXOs\r\n */\r\nexport function getOutputsAssetIDs(outs: OrteliusUTXO[]): string[] {\r\n    let res = [];\r\n\r\n    for (let i = 0; i < outs.length; i++) {\r\n        let out = outs[i];\r\n        res.push(out.assetID);\r\n    }\r\n    return filterDuplicateStrings(res);\r\n}\r\n","import { OrteliusUTXO } from '@/Explorer';\r\nimport { iHistoryNftFamilyBalance } from '@/History/types';\r\nimport { AVMConstants } from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport { parseNftPayload } from '@/utils';\r\nimport { isOutputOwner } from '@/Explorer/ortelius/utxoUtils';\r\n\r\n/**\r\n * Parse the raw memo field to readable text.\r\n * @param raw\r\n */\r\nexport function parseMemo(raw: string): string {\r\n    const memoText = new Buffer(raw, 'base64').toString('utf8');\r\n\r\n    // Bug that sets memo to empty string (AAAAAA==) for some tx types\r\n    if (!memoText.length || raw === 'AAAAAA==') return '';\r\n    return memoText;\r\n}\r\n\r\nexport function getNFTBalanceFromUTXOs(\r\n    utxos: OrteliusUTXO[],\r\n    addresses: string[],\r\n    assetID: string\r\n): iHistoryNftFamilyBalance {\r\n    let nftUTXOs = utxos.filter((utxo) => {\r\n        if (\r\n            utxo.outputType === AVMConstants.NFTXFEROUTPUTID &&\r\n            utxo.assetID === assetID &&\r\n            isOutputOwner(addresses, utxo)\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    let res: iHistoryNftFamilyBalance = {};\r\n    for (let i = 0; i < nftUTXOs.length; i++) {\r\n        let utxo = nftUTXOs[i];\r\n        let groupID = utxo.groupID;\r\n\r\n        let content;\r\n        if (utxo.payload) {\r\n            let parsedPayload = parseNftPayload(utxo.payload);\r\n            content = parsedPayload.getContent().toString();\r\n        }\r\n\r\n        if (res[groupID]) {\r\n            res[groupID].amount++;\r\n        } else {\r\n            res[groupID] = {\r\n                payload: content || '',\r\n                amount: 1,\r\n            };\r\n        }\r\n    }\r\n    return res;\r\n}\r\n","import {\r\n    iHistoryBaseTx,\r\n    iHistoryBaseTxNFTsReceivedRaw,\r\n    iHistoryBaseTxNFTsSentRaw,\r\n    iHistoryBaseTxToken,\r\n    iHistoryBaseTxTokenLossGain,\r\n    iHistoryBaseTxTokenOwners,\r\n} from '@/History';\r\nimport * as Assets from '@/Asset/Assets';\r\nimport { bnToLocaleString, getTxFeeX } from '@/utils';\r\nimport { AVMConstants } from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport { getNFTBalanceFromUTXOs, parseMemo } from '@/History/history_helpers';\r\nimport {\r\n    filterDuplicateStrings,\r\n    getAssetOutputs,\r\n    getNotOwnedOutputs,\r\n    getOutputsAssetIDs,\r\n    getOutputsAssetOwners,\r\n    getOutputsOfType,\r\n    getOutputTotals,\r\n    getOwnedOutputs,\r\n} from '@/Explorer/ortelius/utxoUtils';\r\nimport { getAvaxAssetID } from '@/Network/utils';\r\nimport { OrteliusAvalancheTx, OrteliusUTXO } from '@/Explorer';\r\n\r\nexport async function getBaseTxSummary(tx: OrteliusAvalancheTx, ownerAddrs: string[]): Promise<iHistoryBaseTx> {\r\n    let ins = tx.inputs?.map((input) => input.output) || [];\r\n    let outs = tx.outputs || [];\r\n\r\n    // Calculate losses from inputs\r\n    let losses = getOwnedTokens(ins, ownerAddrs);\r\n    let gains = getOwnedTokens(outs, ownerAddrs);\r\n\r\n    let nowOwnedIns = getNotOwnedOutputs(ins, ownerAddrs);\r\n    let nowOwnedOuts = getNotOwnedOutputs(outs, ownerAddrs);\r\n\r\n    let froms = getOutputsAssetOwners(nowOwnedIns);\r\n    let tos = getOutputsAssetOwners(nowOwnedOuts);\r\n\r\n    let tokens = await getBaseTxTokensSummary(gains, losses, froms, tos);\r\n\r\n    return {\r\n        id: tx.id,\r\n        fee: getTxFeeX(),\r\n        type: 'transaction',\r\n        timestamp: new Date(tx.timestamp),\r\n        memo: parseMemo(tx.memo),\r\n        tokens: tokens,\r\n    };\r\n}\r\n\r\nfunction getBaseTxNFTLosses(tx: OrteliusAvalancheTx, ownerAddrs: string[]): iHistoryBaseTxNFTsSentRaw {\r\n    let ins = tx.inputs || [];\r\n    let inUTXOs = ins.map((input) => input.output);\r\n    let nftUTXOs = inUTXOs.filter((utxo) => {\r\n        return utxo.outputType === AVMConstants.NFTXFEROUTPUTID;\r\n    });\r\n\r\n    let res: iHistoryBaseTxNFTsSentRaw = {};\r\n    for (let assetID in tx.inputTotals) {\r\n        let nftBal = getNFTBalanceFromUTXOs(nftUTXOs, ownerAddrs, assetID);\r\n\r\n        // If empty dictionary pass\r\n        if (Object.keys(nftBal).length === 0) continue;\r\n\r\n        res[assetID] = nftBal;\r\n    }\r\n    return res;\r\n}\r\n\r\nfunction getBaseTxNFTGains(tx: OrteliusAvalancheTx, ownerAddrs: string[]): iHistoryBaseTxNFTsReceivedRaw {\r\n    let outs = tx.outputs || [];\r\n    let nftUTXOs = outs.filter((utxo) => {\r\n        return utxo.outputType === AVMConstants.NFTXFEROUTPUTID;\r\n    });\r\n    let res: iHistoryBaseTxNFTsReceivedRaw = {};\r\n\r\n    for (let assetID in tx.inputTotals) {\r\n        let nftBal = getNFTBalanceFromUTXOs(nftUTXOs, ownerAddrs, assetID);\r\n        // If empty dictionary pass\r\n        if (Object.keys(nftBal).length === 0) continue;\r\n\r\n        res[assetID] = nftBal;\r\n    }\r\n    return res;\r\n}\r\n\r\n/**\r\n * Returns a dictionary of asset totals belonging to the owner\r\n * @param utxos\r\n * @param ownerAddrs\r\n */\r\nfunction getOwnedTokens(utxos: OrteliusUTXO[], ownerAddrs: string[]): iHistoryBaseTxTokenLossGain {\r\n    let tokenUTXOs = getOutputsOfType(utxos, AVMConstants.SECPXFEROUTPUTID);\r\n    // Owned inputs\r\n    let myUTXOs = getOwnedOutputs(tokenUTXOs, ownerAddrs);\r\n\r\n    // Asset IDs received\r\n    let assetIDs = getOutputsAssetIDs(myUTXOs);\r\n\r\n    let res: iHistoryBaseTxTokenLossGain = {};\r\n\r\n    for (let i = 0; i < assetIDs.length; i++) {\r\n        let assetID = assetIDs[i];\r\n        let assetUTXOs = getAssetOutputs(myUTXOs, assetID);\r\n        let tot = getOutputTotals(assetUTXOs);\r\n        res[assetID] = tot;\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nasync function getBaseTxTokensSummary(\r\n    gains: iHistoryBaseTxTokenLossGain,\r\n    losses: iHistoryBaseTxTokenLossGain,\r\n    froms: iHistoryBaseTxTokenOwners,\r\n    tos: iHistoryBaseTxTokenOwners\r\n): Promise<iHistoryBaseTxToken[]> {\r\n    let res: iHistoryBaseTxToken[] = [];\r\n\r\n    let assetIDs = filterDuplicateStrings([...Object.keys(gains), ...Object.keys(losses)]);\r\n\r\n    // Fetch asset descriptions\r\n    let calls = assetIDs.map((id) => Assets.getAssetDescription(id));\r\n    let descs = await Promise.all(calls);\r\n    let descsDict: any = {};\r\n\r\n    // Convert array to dict\r\n    for (let i = 0; i < descs.length; i++) {\r\n        let desc = descs[i];\r\n        descsDict[desc.assetID] = desc;\r\n    }\r\n\r\n    for (let i = 0; i < assetIDs.length; i++) {\r\n        let id = assetIDs[i];\r\n        let tokenGain = gains[id] || new BN(0);\r\n        let tokenLost = losses[id] || new BN(0);\r\n        let tokenDesc = descsDict[id];\r\n\r\n        // If we sent avax, deduct the fee\r\n        if (id === getAvaxAssetID() && !tokenLost.isZero()) {\r\n            tokenLost = tokenLost.sub(getTxFeeX());\r\n        }\r\n\r\n        // How much we gained/lost of this token\r\n        let diff = tokenGain.sub(tokenLost);\r\n        let diffClean = bnToLocaleString(diff, tokenDesc.denomination);\r\n\r\n        // If we didnt gain or lose anything, ignore this token\r\n        if (diff.isZero()) continue;\r\n\r\n        if (diff.isNeg()) {\r\n            res.push({\r\n                amount: diff,\r\n                amountDisplayValue: diffClean,\r\n                addresses: tos[id],\r\n                asset: tokenDesc,\r\n            });\r\n        } else {\r\n            res.push({\r\n                amount: diff,\r\n                amountDisplayValue: diffClean,\r\n                addresses: froms[id],\r\n                asset: tokenDesc,\r\n            });\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n","export const SNOWTRACE_MAINNET = 'https://api.snowtrace.io';\r\nexport const SNOWTRACE_TESTNET = 'https://api-testnet.snowtrace.io';\r\n","import { SnowtraceErc20Tx, SnowtraceNormalTx } from '@/Explorer';\r\n\r\n/**\r\n * Filter duplicate Snowtrace transactions\r\n * @param txs\r\n */\r\nexport function filterDuplicateTransactions<Tx extends SnowtraceErc20Tx | SnowtraceNormalTx>(txs: Tx[]) {\r\n    const hashes = txs.map((tx) => tx.hash);\r\n    return txs.filter((tx, i) => {\r\n        return hashes.indexOf(tx.hash) === i;\r\n    });\r\n}\r\n","import { SNOWTRACE_MAINNET, SNOWTRACE_TESTNET } from '@/Explorer/snowtrace/constants';\r\nimport { isFujiNetwork, isMainnetNetwork, NetworkConfig } from '@/Network';\r\nimport { SnowtraceErc20Tx, SnowtraceNormalTx, SnowtraceResponse } from '@/Explorer/snowtrace/types';\r\nimport { filterDuplicateTransactions } from './utils';\r\n\r\nasync function fetchSnowtraceAPI<T>(query: string, isMainnet = true): Promise<T> {\r\n    const baseUrl = isMainnet ? SNOWTRACE_MAINNET : SNOWTRACE_TESTNET;\r\n    const response = await fetch(`${baseUrl}/${query}`);\r\n    return response.json();\r\n}\r\n\r\nexport async function getErc20History(\r\n    address: string,\r\n    networkConfig: NetworkConfig,\r\n    page = 0,\r\n    offset = 0,\r\n    contractAddress?: string\r\n) {\r\n    const contractQuery = contractAddress ? `&contractaddress=${contractAddress}` : '';\r\n    const sort = 'desc';\r\n    const query = `api?module=account&action=tokentx&address=${address}&sort=${sort}&page=${page}&offset=${offset}${contractQuery}`;\r\n\r\n    let resp;\r\n    if (isMainnetNetwork(networkConfig)) {\r\n        resp = await fetchSnowtraceAPI<SnowtraceResponse<SnowtraceErc20Tx>>(query);\r\n    } else if (isFujiNetwork(networkConfig)) {\r\n        resp = await fetchSnowtraceAPI<SnowtraceResponse<SnowtraceErc20Tx>>(query, false);\r\n    } else {\r\n        throw new Error('Snow trace is only available for Avalanche Mainnet and Testnet');\r\n    }\r\n\r\n    return filterDuplicateTransactions<SnowtraceErc20Tx>(resp.result);\r\n}\r\n\r\nexport async function getNormalHistory(address: string, networkConfig: NetworkConfig, page = 0, offset = 0) {\r\n    const sort = 'desc';\r\n    const query = `api?module=account&action=txlist&address=${address}&sort=${sort}&page=${page}&offset=${offset}`;\r\n\r\n    let resp;\r\n    if (isMainnetNetwork(networkConfig)) {\r\n        resp = await fetchSnowtraceAPI<SnowtraceResponse<SnowtraceNormalTx>>(query);\r\n    } else if (isFujiNetwork(networkConfig)) {\r\n        resp = await fetchSnowtraceAPI<SnowtraceResponse<SnowtraceNormalTx>>(query, false);\r\n    } else {\r\n        throw new Error('Snow trace is only available for Avalanche Mainnet and Testnet');\r\n    }\r\n    return filterDuplicateTransactions<SnowtraceNormalTx>(resp.result);\r\n}\r\n\r\n/**\r\n * https://docs.etherscan.io/api-endpoints/contracts#get-contract-abi-for-verified-contract-source-codes\r\n *\r\n * @param address\r\n * @param networkConfig\r\n * @returns string array, the first index is the ABI\r\n */\r\nexport async function getABIForContract(\r\n    address: string,\r\n    networkConfig: NetworkConfig\r\n): Promise<SnowtraceResponse<string>> {\r\n    const isMainnet = isMainnetNetwork(networkConfig);\r\n    const isFuji = isFujiNetwork(networkConfig);\r\n\r\n    if (!isMainnet && !isFuji) {\r\n        throw new Error('Snow trace is only available for Avalanche Mainnet and Testnet');\r\n    }\r\n\r\n    const params = new window.URLSearchParams({ module: 'contract', action: 'getabi', address });\r\n    return await fetchSnowtraceAPI<SnowtraceResponse<string>>(`api?${params.toString()}`, isMainnet);\r\n}\r\n","export type SnowtraceTx = SnowtraceNormalTx | SnowtraceErc20Tx;\r\n\r\nexport interface SnowtraceErc20Tx {\r\n    blockNumber: string;\r\n    timeStamp: string;\r\n    hash: string;\r\n    nonce: string;\r\n    blockHash: string;\r\n    from: string;\r\n    contractAddress: string;\r\n    to: string;\r\n    value: string;\r\n    tokenName: string;\r\n    tokenSymbol: string;\r\n    tokenDecimal: string;\r\n    transactionIndex: string;\r\n    gas: string;\r\n    gasPrice: string;\r\n    gasUsed: string;\r\n    cumulativeGasUsed: string;\r\n    input: string;\r\n    confirmations: string;\r\n}\r\n\r\nexport interface SnowtraceNormalTx {\r\n    blockNumber: string;\r\n    timeStamp: string;\r\n    hash: string;\r\n    nonce: string;\r\n    blockHash: string;\r\n    transactionIndex: string;\r\n    from: string;\r\n    to: string;\r\n    value: string;\r\n    gas: string;\r\n    gasPrice: string;\r\n    isError: string;\r\n    txreceipt_status: string;\r\n    input: string;\r\n    contractAddress: string;\r\n    cumulativeGasUsed: string;\r\n    gasUsed: string;\r\n    confirmations: string;\r\n}\r\n\r\n/**\r\n * Type guard for SnowtraceErc20Tx\r\n * @param tx\r\n */\r\nexport function isSnowtraceErc20Tx(tx: SnowtraceNormalTx | SnowtraceErc20Tx): tx is SnowtraceErc20Tx {\r\n    return tx.hasOwnProperty('tokenName');\r\n}\r\n\r\n/**\r\n * Type guard for SnowtraceNormalTx\r\n * @param tx\r\n */\r\nexport function isSnowtraceNormalTx(tx: SnowtraceNormalTx | SnowtraceErc20Tx): tx is SnowtraceNormalTx {\r\n    return !tx.hasOwnProperty('tokenName');\r\n}\r\n\r\nexport interface SnowtraceResponse<ResponseType> {\r\n    status: string;\r\n    message: string;\r\n    result: ResponseType[];\r\n}\r\n","import { explorer_api } from '@/Network/network';\r\nimport { NO_EXPLORER_API } from '@/errors';\r\nimport { OrteliusAvalancheTx, OrteliusEvmTx } from '@/Explorer';\r\n\r\n/**\r\n * Returns transactions FROM and TO the address given\r\n * @param addr The address to get historic transactions for.\r\n */\r\nexport async function getAddressHistoryEVM(addr: string): Promise<OrteliusEvmTx[]> {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n\r\n    let endpoint = `/v2/ctransactions?address=${addr}`;\r\n    let data = (await explorer_api.get<{ Transactions: OrteliusEvmTx[] }>(endpoint)).Transactions;\r\n\r\n    data.sort((a, b) => {\r\n        let dateA = new Date(a.createdAt);\r\n        let dateB = new Date(b.createdAt);\r\n\r\n        return dateB.getTime() - dateA.getTime();\r\n    });\r\n\r\n    return data;\r\n}\r\n\r\n/**\r\n * Returns the ortelius data from the given tx id.\r\n * @param txID\r\n */\r\nexport async function getTx(txID: string): Promise<OrteliusAvalancheTx> {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n\r\n    let url = `/v2/transactions/${txID}`;\r\n    return await explorer_api.get<OrteliusAvalancheTx>(url);\r\n}\r\n\r\n/**\r\n * Returns ortelius data for a transaction hash on C chain EVM,\r\n * @param txHash\r\n */\r\nexport async function getTxEvm(txHash: string): Promise<OrteliusEvmTx> {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n\r\n    let endpoint = `/v2/ctransactions?hash=${txHash}`;\r\n    let data = (await explorer_api.get<{ Transactions: OrteliusEvmTx[] }>(endpoint)).Transactions[0];\r\n\r\n    return data;\r\n}\r\n\r\n/**\r\n * Returns, X or P chain transactions belonging to the given address array.\r\n * @param addresses Addresses to check for. Max number of addresses is 1024\r\n * @param limit\r\n * @param chainID The blockchain ID of X or P chain\r\n * @param endTime\r\n */\r\nasync function getTransactionsAvalanche(\r\n    addresses: string[],\r\n    limit = 20,\r\n    chainID: string,\r\n    endTime?: string\r\n): Promise<OrteliusAvalancheTx[]> {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n\r\n    if (addresses.length > 1024) throw new Error('Number of addresses can not exceed 1024.');\r\n\r\n    // Remove the prefix (X- P-) from given addresses\r\n    const addrsRaw = addresses.map((addr) => {\r\n        return addr.split('-')[1];\r\n    });\r\n\r\n    const rootUrl = '/v2/transactions';\r\n\r\n    const req = {\r\n        address: addrsRaw,\r\n        sort: ['timestamp-desc'],\r\n        disableCount: ['1'],\r\n        chainID: [chainID],\r\n        disableGenesis: ['false'],\r\n    };\r\n\r\n    // Add limit if given\r\n    if (limit > 0) {\r\n        //@ts-ignore\r\n        req.limit = [limit.toString()];\r\n    }\r\n\r\n    // Add end time if given\r\n    if (endTime) {\r\n        //@ts-ignore\r\n        req.endTime = [endTime];\r\n    }\r\n\r\n    const res = await explorer_api.post<{ transactions: OrteliusAvalancheTx[]; next?: string }>(rootUrl, req);\r\n    const resTxs = res.transactions;\r\n    const next: string | undefined = res.next;\r\n\r\n    let allTxs = resTxs === null ? [] : resTxs;\r\n\r\n    // If we need to fetch more for this address\r\n    if (next && !limit) {\r\n        let endTime = next.split('&')[0].split('=')[1];\r\n        let nextRes = await getAddressHistory(addresses, limit, chainID, endTime);\r\n        allTxs.push(...nextRes);\r\n    }\r\n\r\n    return allTxs;\r\n}\r\n\r\n/**\r\n * Returns, X or P chain transactions belonging to the given address array.\r\n * @param addrs Addresses to check for.\r\n * @param limit\r\n * @param chainID The blockchain ID of X or P chain\r\n * @param endTime\r\n */\r\nexport async function getAddressHistory(\r\n    addrs: string[],\r\n    limit = 20,\r\n    chainID: string,\r\n    endTime?: string\r\n): Promise<OrteliusAvalancheTx[]> {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n    const ADDR_SIZE = 1024;\r\n\r\n    const addrsChunks = [];\r\n\r\n    for (let i = 0; i < addrs.length; i += ADDR_SIZE) {\r\n        const chunk = addrs.slice(i, i + ADDR_SIZE);\r\n        addrsChunks.push(chunk);\r\n    }\r\n\r\n    // Get histories in parallel\r\n    const promises = addrsChunks.map((chunk) => {\r\n        return getTransactionsAvalanche(chunk, limit, chainID, endTime);\r\n    });\r\n\r\n    const results = await Promise.all(promises);\r\n    return results.reduce((acc, txs) => {\r\n        return [...acc, ...txs];\r\n    }, []);\r\n}\r\n\r\n/**\r\n * Given an array of addresses, checks which chain each address was already used on\r\n * @param addrs\r\n */\r\nexport async function getAddressChains(addrs: string[]) {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n\r\n    // Strip the prefix\r\n    let rawAddrs = addrs.map((addr) => {\r\n        return addr.split('-')[1];\r\n    });\r\n\r\n    let urlRoot = `/v2/addressChains`;\r\n\r\n    let res = await explorer_api.post<any>(urlRoot, {\r\n        address: rawAddrs,\r\n        disableCount: ['1'],\r\n    });\r\n\r\n    return res.addressChains;\r\n}\r\n\r\nexport async function getAddressDetailX(addr: string) {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n\r\n    let addrRaw = addr.split('-')[1];\r\n    let url = `/x/addresses/${addrRaw}`;\r\n\r\n    return await explorer_api.get<any>(url);\r\n}\r\n","import { OrteliusAvalancheTx } from '@/Explorer';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport { getOutputTotals } from '@/Explorer/ortelius/utxoUtils';\r\n\r\n/**\r\n * Given an array of transactions from the explorer, filter out duplicate transactions\r\n * @param txs\r\n */\r\nexport function filterDuplicateOrtelius(txs: OrteliusAvalancheTx[]) {\r\n    let txsIds: string[] = [];\r\n    let filtered: OrteliusAvalancheTx[] = [];\r\n\r\n    for (let i = 0; i < txs.length; i++) {\r\n        let tx = txs[i];\r\n        let txId = tx.id;\r\n\r\n        if (txsIds.includes(txId)) {\r\n            continue;\r\n        } else {\r\n            txsIds.push(txId);\r\n            filtered.push(tx);\r\n        }\r\n    }\r\n    return filtered;\r\n}\r\n\r\n// If any of the inputs has a different chain ID, thats the source chain\r\n// else return current chain\r\n/**\r\n * Returns the source chain id.\r\n * @param tx Tx data from the explorer.\r\n */\r\nexport function findSourceChain(tx: OrteliusAvalancheTx): string {\r\n    let baseChain = tx.chainID;\r\n    let ins = tx.inputs || [];\r\n\r\n    for (let i = 0; i < ins.length; i++) {\r\n        let inChainId = ins[i].output.inChainID;\r\n        if (!inChainId) continue;\r\n        if (inChainId !== baseChain) return inChainId;\r\n    }\r\n    return baseChain;\r\n}\r\n\r\n// If any of the outputs has a different chain ID, that's the destination chain\r\n// else return current chain\r\n/**\r\n * Returns the destination chain id.\r\n * @param tx Tx data from the explorer.\r\n */\r\nexport function findDestinationChain(tx: OrteliusAvalancheTx): string {\r\n    let baseChain = tx.chainID;\r\n    let outs = tx.outputs || [];\r\n\r\n    for (let i = 0; i < outs.length; i++) {\r\n        let outChainId = outs[i].outChainID;\r\n        if (!outChainId) continue;\r\n        if (outChainId !== baseChain) return outChainId;\r\n    }\r\n    return baseChain;\r\n}\r\n\r\n// To get the stake amount, sum the non-reward output utxos.\r\nexport function getStakeAmount(tx: OrteliusAvalancheTx): BN {\r\n    let outs = tx.outputs || [];\r\n    let nonRewardUtxos = outs.filter((utxo) => !utxo.rewardUtxo && utxo.stake);\r\n\r\n    let tot = getOutputTotals(nonRewardUtxos);\r\n    return tot;\r\n}\r\n","import { CoinGeckoPriceHistoryResponse } from '@/Explorer/coingecko/types';\r\n\r\nconst COINGECKO_BASE_URL = 'https://api.coingecko.com/api/v3';\r\nconst AVAX_COIN_ID = 'avalanche-2';\r\n\r\n/**\r\n * Fetches the current AVAX price using Coin Gecko.\r\n * @remarks\r\n * You might get rate limited if you use this function frequently.\r\n *\r\n * @return\r\n * Current price of 1 AVAX vs a currency (default USD)\r\n */\r\nexport async function getAvaxPrice(currentCurrency = 'USD'): Promise<number> {\r\n    const res = await fetch(`${COINGECKO_BASE_URL}/simple/price?ids=${AVAX_COIN_ID}&vs_currencies=${currentCurrency}`);\r\n    const data = await res.json();\r\n    return data[AVAX_COIN_ID][currentCurrency.toLowerCase()];\r\n}\r\n\r\n/**\r\n * Gets daily price history using Coin Gecko.\r\n * @param currency\r\n */\r\nexport async function getAvaxPriceHistory(currency = 'USD') {\r\n    const params = new URLSearchParams({\r\n        vs_currency: currency.toLowerCase(),\r\n        days: 'max',\r\n        interval: 'daily',\r\n    });\r\n    const res = await fetch(`${COINGECKO_BASE_URL}/coins/${AVAX_COIN_ID}/market_chart?${params.toString()}`);\r\n    const data: CoinGeckoPriceHistoryResponse = await res.json();\r\n\r\n    return data.prices;\r\n}\r\n","import { iHistoryImportExport } from '@/History/types';\r\nimport { parseMemo } from '@/History/history_helpers';\r\nimport { idToChainAlias } from '@/Network/helpers/aliasFromNetworkID';\r\nimport { avalanche } from '@/Network/network';\r\nimport { bnToAvaxX } from '@/utils';\r\nimport { getOutputsOfChain, getOutputTotals, getOwnedOutputs } from '@/Explorer/ortelius/utxoUtils';\r\nimport { findDestinationChain, findSourceChain, OrteliusAvalancheTx } from '@/Explorer';\r\n\r\nexport function getImportSummary(tx: OrteliusAvalancheTx, addresses: string[]): iHistoryImportExport {\r\n    let sourceChain = findSourceChain(tx);\r\n    let chainAliasFrom = idToChainAlias(sourceChain);\r\n    let chainAliasTo = idToChainAlias(tx.chainID);\r\n\r\n    let outs = tx.outputs || [];\r\n    let myOuts = getOwnedOutputs(outs, addresses);\r\n    let amtOut = getOutputTotals(myOuts);\r\n\r\n    let time = new Date(tx.timestamp);\r\n    let fee = avalanche().XChain().getTxFee();\r\n\r\n    let res: iHistoryImportExport = {\r\n        id: tx.id,\r\n        memo: parseMemo(tx.memo),\r\n        source: chainAliasFrom,\r\n        destination: chainAliasTo,\r\n        amount: amtOut,\r\n        amountDisplayValue: bnToAvaxX(amtOut),\r\n        timestamp: time,\r\n        type: 'import',\r\n        fee: fee,\r\n    };\r\n\r\n    return res;\r\n}\r\n\r\nexport function getExportSummary(tx: OrteliusAvalancheTx, addresses: string[]): iHistoryImportExport {\r\n    let sourceChain = findSourceChain(tx);\r\n    let chainAliasFrom = idToChainAlias(sourceChain);\r\n\r\n    let destinationChain = findDestinationChain(tx);\r\n    let chainAliasTo = idToChainAlias(destinationChain);\r\n\r\n    let outs = tx.outputs || [];\r\n    let myOuts = getOwnedOutputs(outs, addresses);\r\n    let chainOuts = getOutputsOfChain(myOuts, destinationChain);\r\n    let amtOut = getOutputTotals(chainOuts);\r\n\r\n    let time = new Date(tx.timestamp);\r\n    let fee = avalanche().XChain().getTxFee();\r\n\r\n    let res: iHistoryImportExport = {\r\n        id: tx.id,\r\n        memo: parseMemo(tx.memo),\r\n        source: chainAliasFrom,\r\n        destination: chainAliasTo,\r\n        amount: amtOut,\r\n        amountDisplayValue: bnToAvaxX(amtOut),\r\n        timestamp: time,\r\n        type: 'export',\r\n        fee: fee,\r\n    };\r\n\r\n    return res;\r\n}\r\n","import { HistoryItemType, HistoryItemTypeName, iHistoryImportExport, iHistoryItem, iHistoryStaking } from '@/History';\r\nimport { parseMemo } from '@/History/history_helpers';\r\nimport { activeNetwork, avalanche } from '@/Network/network';\r\nimport { bnToAvaxP, bnToAvaxX } from '@/utils';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport { getBaseTxSummary } from '@/History/base_tx_parser';\r\nimport { idToChainAlias } from '@/Network/helpers/aliasFromNetworkID';\r\nimport { getExportSummary, getImportSummary } from '@/History/importExportParser';\r\nimport { findSourceChain, getStakeAmount, OrteliusAvalancheTx } from '@/Explorer';\r\nimport {\r\n    getEvmAssetBalanceFromUTXOs,\r\n    getOutputTotals,\r\n    getOwnedOutputs,\r\n    getRewardOuts,\r\n} from '@/Explorer/ortelius/utxoUtils';\r\n\r\nexport async function getTransactionSummary(\r\n    tx: OrteliusAvalancheTx,\r\n    walletAddrs: string[],\r\n    evmAddress: string\r\n): Promise<HistoryItemType> {\r\n    let cleanAddressesXP = walletAddrs.map((addr) => addr.split('-')[1]);\r\n\r\n    switch (tx.type) {\r\n        case 'import':\r\n        case 'pvm_import':\r\n            return getImportSummary(tx, cleanAddressesXP);\r\n        case 'export':\r\n        case 'pvm_export':\r\n        case 'atomic_export_tx':\r\n            return getExportSummary(tx, cleanAddressesXP);\r\n        case 'add_validator':\r\n        case 'add_delegator':\r\n            return getStakingSummary(tx, cleanAddressesXP);\r\n        case 'atomic_import_tx':\r\n            return getImportSummaryC(tx, evmAddress);\r\n        case 'operation':\r\n        case 'base':\r\n            return await getBaseTxSummary(tx, cleanAddressesXP);\r\n        default:\r\n            return getUnsupportedSummary(tx);\r\n    }\r\n}\r\n\r\nfunction getUnsupportedSummary(tx: OrteliusAvalancheTx): iHistoryItem {\r\n    return {\r\n        id: tx.id,\r\n        type: 'not_supported',\r\n        timestamp: new Date(tx.timestamp),\r\n        fee: new BN(0),\r\n    };\r\n}\r\n\r\nfunction getStakingSummary(tx: OrteliusAvalancheTx, ownerAddrs: string[]): iHistoryStaking {\r\n    let time = new Date(tx.timestamp);\r\n\r\n    // let pChainID = activeNetwork.pChainID;\r\n    // let avaxID = activeNetwork.avaxID;\r\n    let ins = tx.inputs?.map((tx) => tx.output) || [];\r\n    let myIns = getOwnedOutputs(ins, ownerAddrs);\r\n\r\n    let outs = tx.outputs || [];\r\n    let myOuts = getOwnedOutputs(outs, ownerAddrs);\r\n\r\n    let stakeAmount = getStakeAmount(tx);\r\n\r\n    // Assign the type\r\n    let type: HistoryItemTypeName = tx.type === 'add_validator' ? 'add_validator' : 'add_delegator';\r\n    // If this wallet only received the fee\r\n    if (myIns.length === 0 && type === 'add_delegator') {\r\n        type = 'delegation_fee';\r\n    } else if (myIns.length === 0 && type === 'add_validator') {\r\n        type = 'validation_fee';\r\n    }\r\n\r\n    let rewardAmount;\r\n    let rewardAmountClean;\r\n    if (tx.rewarded) {\r\n        let rewardOuts = getRewardOuts(myOuts);\r\n        rewardAmount = getOutputTotals(rewardOuts);\r\n        rewardAmountClean = bnToAvaxP(rewardAmount);\r\n    }\r\n\r\n    return {\r\n        id: tx.id,\r\n        nodeID: tx.validatorNodeID,\r\n        stakeStart: new Date(tx.validatorStart * 1000),\r\n        stakeEnd: new Date(tx.validatorEnd * 1000),\r\n        timestamp: time,\r\n        type: type,\r\n        fee: new BN(0),\r\n        amount: stakeAmount,\r\n        amountDisplayValue: bnToAvaxP(stakeAmount),\r\n        memo: parseMemo(tx.memo),\r\n        isRewarded: tx.rewarded,\r\n        rewardAmount: rewardAmount,\r\n        rewardAmountDisplayValue: rewardAmountClean,\r\n    };\r\n}\r\n\r\n// Returns the summary for a C chain import TX\r\nfunction getImportSummaryC(tx: OrteliusAvalancheTx, ownerAddr: string) {\r\n    let sourceChain = findSourceChain(tx);\r\n    let chainAliasFrom = idToChainAlias(sourceChain);\r\n    let chainAliasTo = idToChainAlias(tx.chainID);\r\n\r\n    let avaxID = activeNetwork.avaxID;\r\n\r\n    let outs = tx.outputs || [];\r\n    let amtOut = getEvmAssetBalanceFromUTXOs(outs, ownerAddr, avaxID, tx.chainID);\r\n\r\n    let time = new Date(tx.timestamp);\r\n    let fee = avalanche().XChain().getTxFee();\r\n\r\n    let res: iHistoryImportExport = {\r\n        id: tx.id,\r\n        source: chainAliasFrom,\r\n        destination: chainAliasTo,\r\n        amount: amtOut,\r\n        amountDisplayValue: bnToAvaxX(amtOut),\r\n        timestamp: time,\r\n        type: 'import',\r\n        fee: fee,\r\n        memo: parseMemo(tx.memo),\r\n    };\r\n\r\n    return res;\r\n}\r\n","import { iHistoryEVMTx } from '@/History/types';\r\nimport { bnToAvaxC } from '@/utils';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport { OrteliusEvmTx } from '@/Explorer';\r\n\r\nexport function getTransactionSummaryEVM(tx: OrteliusEvmTx, walletAddress: string): iHistoryEVMTx {\r\n    let isSender = tx.fromAddr.toUpperCase() === walletAddress.toUpperCase();\r\n\r\n    let amt = new BN(tx.value);\r\n    let amtClean = bnToAvaxC(amt);\r\n    let date = new Date(tx.createdAt);\r\n\r\n    let gasLimit = new BN(tx.gasLimit);\r\n    let gasPrice = new BN(tx.gasPrice);\r\n    let feeBN = gasLimit.mul(gasPrice); // in gwei\r\n\r\n    return {\r\n        id: tx.hash,\r\n        fee: feeBN,\r\n        memo: '',\r\n        block: tx.block,\r\n        isSender,\r\n        type: 'transaction_evm',\r\n        amount: amt,\r\n        amountDisplayValue: amtClean,\r\n        gasLimit: tx.gasLimit,\r\n        gasPrice: tx.gasPrice,\r\n        from: tx.fromAddr,\r\n        to: tx.toAddr,\r\n        timestamp: date,\r\n        input: tx.input,\r\n    };\r\n}\r\n","import { BN } from '@c4tplatform/caminojs/dist';\r\nimport { ChainIdType } from '@/common';\r\nimport { iAssetDescriptionClean } from '@/Asset/types';\r\n\r\nexport type HistoryItemType = AVMHistoryItemType | PVMHistoryItemType | EVMHistoryITemType | iHistoryItem;\r\n\r\nexport type AVMHistoryItemType = iHistoryBaseTx | iHistoryImportExport;\r\nexport type PVMHistoryItemType = iHistoryStaking;\r\nexport type EVMHistoryITemType = iHistoryEVMTx;\r\n\r\nexport type HistoryImportExportTypeName = 'import' | 'export';\r\nexport type HistoryItemTypeName =\r\n    | HistoryImportExportTypeName\r\n    | 'transaction'\r\n    | 'transaction_evm'\r\n    | 'add_delegator'\r\n    | 'add_validator'\r\n    | 'delegation_fee'\r\n    | 'validation_fee'\r\n    | 'not_supported';\r\n\r\nexport interface iHistoryItem {\r\n    id: string;\r\n    type: HistoryItemTypeName;\r\n    timestamp: Date;\r\n    fee: BN;\r\n    memo?: string;\r\n}\r\n\r\n/**\r\n * Parsed interface for Import and Export transactions.\r\n */\r\nexport interface iHistoryImportExport extends iHistoryItem {\r\n    amount: BN;\r\n    type: HistoryImportExportTypeName;\r\n    amountDisplayValue: string;\r\n    destination: ChainIdType;\r\n    source: ChainIdType;\r\n}\r\n\r\n/**\r\n * Typeguard for `iHistoryImportExport` interface\r\n * @param tx The parsed history object\r\n */\r\nexport function isHistoryImportExportTx(tx: HistoryItemType): tx is iHistoryImportExport {\r\n    return tx.type === 'export' || tx.type === 'import';\r\n}\r\n\r\n/**\r\n * Parsed interface for Validation, Validation Fee, Delegation and Delegation Fee transactions.\r\n */\r\nexport interface iHistoryStaking extends iHistoryItem {\r\n    nodeID: string;\r\n    stakeStart: Date;\r\n    stakeEnd: Date;\r\n    amount: BN;\r\n    amountDisplayValue: string;\r\n    isRewarded: boolean;\r\n    rewardAmount?: BN;\r\n    rewardAmountDisplayValue?: string;\r\n}\r\n\r\n/**\r\n * Typeguard for `iHistoryStaking` interface\r\n * @param tx The parsed history object\r\n */\r\nexport function isHistoryStakingTx(tx: HistoryItemType): tx is iHistoryStaking {\r\n    let types: HistoryItemTypeName[] = ['add_validator', 'add_delegator', 'validation_fee', 'delegation_fee'];\r\n    return types.includes(tx.type);\r\n}\r\n\r\n/**\r\n * Interface for parsed X chain base transactions.\r\n */\r\nexport interface iHistoryBaseTx extends iHistoryItem {\r\n    tokens: iHistoryBaseTxToken[];\r\n    // nfts: iHistoryBaseTxNFTs;\r\n}\r\n\r\n/**\r\n * Typeguard for `iHistoryBaseTx` interface\r\n * @param tx The parsed history object\r\n */\r\nexport function isHistoryBaseTx(tx: HistoryItemType): tx is iHistoryBaseTx {\r\n    return tx.type === 'transaction';\r\n}\r\n\r\n/**\r\n * Interface for parsed EVM transactions.\r\n */\r\nexport interface iHistoryEVMTx extends iHistoryItem {\r\n    block: string;\r\n    gasLimit: number;\r\n    gasPrice: string;\r\n    from: string;\r\n    to: string;\r\n    amount: BN;\r\n    amountDisplayValue: string;\r\n    isSender: boolean;\r\n    input?: string;\r\n}\r\n\r\nexport function isHistoryEVMTx(tx: HistoryItemType): tx is iHistoryEVMTx {\r\n    return tx.type === 'transaction_evm';\r\n}\r\n\r\nexport interface iHistoryBaseTxToken {\r\n    amount: BN;\r\n    amountDisplayValue: string;\r\n    addresses: string[];\r\n    asset: iAssetDescriptionClean;\r\n}\r\n\r\nexport interface iHistoryBaseTxNFTs {\r\n    sent: iHistoryBaseTxNFTsSent;\r\n    received: iHistoryBaseTxNFTsReceived;\r\n}\r\n\r\nexport interface iHistoryBaseTxTokenLossGain {\r\n    [assetId: string]: BN;\r\n}\r\n\r\nexport interface iHistoryBaseTxTokenOwners {\r\n    [assetId: string]: string[];\r\n}\r\n\r\nexport interface iHistoryNftFamilyBalance {\r\n    [groupNum: number]: {\r\n        payload: string;\r\n        amount: number;\r\n    };\r\n}\r\n\r\nexport interface iHistoryBaseTxNFTsReceivedRaw {\r\n    [assetID: string]: iHistoryNftFamilyBalance;\r\n}\r\nexport interface iHistoryBaseTxNFTsSentRaw {\r\n    [assetID: string]: iHistoryNftFamilyBalance;\r\n}\r\n\r\nexport interface iHistoryBaseTxNFTsSent {\r\n    [assetID: string]: {\r\n        groups: iHistoryNftFamilyBalance;\r\n        to: string[];\r\n        asset: iAssetDescriptionClean;\r\n    };\r\n}\r\n\r\nexport interface iHistoryBaseTxNFTsReceived {\r\n    [assetID: string]: {\r\n        groups: iHistoryNftFamilyBalance;\r\n        from: string[];\r\n        asset: iAssetDescriptionClean;\r\n    };\r\n}\r\n","import { BN } from '@c4tplatform/caminojs/dist';\r\nimport { ChainIdType } from '@/common';\r\nimport {\r\n    UniversalTx,\r\n    UniversalTxActionExport,\r\n    UniversalTxActionImport,\r\n    UniversalTxExport,\r\n    UniversalTxImport,\r\n} from './types';\r\n\r\nexport abstract class UniversalNodeAbstract {\r\n    parents: UniversalNodeAbstract[];\r\n    child: UniversalNodeAbstract | null; // can only have 1 child\r\n    balance: BN;\r\n    chain: ChainIdType;\r\n    feeExport: BN;\r\n    feeImport: BN;\r\n\r\n    protected constructor(balance: BN, chain: ChainIdType, feeExport: BN, feeImport: BN) {\r\n        this.parents = [];\r\n        this.child = null;\r\n        this.balance = balance;\r\n        this.chain = chain;\r\n        this.feeExport = feeExport;\r\n        this.feeImport = feeImport;\r\n    }\r\n\r\n    // Sum of the node's balance + all balance of parents minus the transfer fees\r\n    reduceTotalBalanceFromParents(): BN {\r\n        // If there are no balance return balance of self\r\n        if (this.parents.length === 0) {\r\n            return this.balance;\r\n        }\r\n\r\n        let parentBals = this.parents.map((node) => {\r\n            // Subtract transfer fees from parent balance\r\n            // import + export\r\n            let parentBalance = node.reduceTotalBalanceFromParents();\r\n            parentBalance = parentBalance.sub(this.feeImport).sub(node.feeExport);\r\n            let zero = new BN(0);\r\n            return BN.max(parentBalance, zero);\r\n        });\r\n\r\n        let tot = parentBals.reduce((prev, current) => {\r\n            return prev.add(current);\r\n        }, new BN(0));\r\n\r\n        return tot.add(this.balance);\r\n    }\r\n\r\n    /**\r\n     * Returns the export action type from this node to its child\r\n     * @param to\r\n     */\r\n    abstract getExportMethod(to: ChainIdType): UniversalTxActionExport;\r\n\r\n    /**\r\n     * Returns the import action type from this node to its child\r\n     * @param from Which chain are we importing from\r\n     */\r\n    abstract getImportMethod(from: ChainIdType): UniversalTxActionImport;\r\n\r\n    buildExportTx(destChain: ChainIdType, amount: BN): UniversalTxExport {\r\n        return {\r\n            action: this.getExportMethod(destChain),\r\n            amount: amount,\r\n            fee: this.feeExport,\r\n        };\r\n    }\r\n\r\n    buildImportTx(sourceChain: ChainIdType): UniversalTxImport {\r\n        return {\r\n            action: this.getImportMethod(sourceChain),\r\n            fee: this.feeImport,\r\n        };\r\n    }\r\n\r\n    /***\r\n     * Assumes there is enough balance on node tree\r\n     * Returns empty array even if transaction not possible!\r\n     * What steps to take to have the target balance on this node.\r\n     * @param target Amount of nAVAX needed on this node.\r\n     */\r\n    getStepsForTargetBalance(target: BN): UniversalTx[] {\r\n        // If the node has enough balance no transaction needed\r\n        // If target is negative or zero no transaction needed\r\n        if (this.balance.gte(target) || target.lte(new BN(0))) {\r\n            return [];\r\n        }\r\n\r\n        // If not enough balance and no parents\r\n        // return all the balance\r\n        if (this.balance.lt(target) && this.parents.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        // If not enough balance on this node, try to collect it from parents\r\n        // Amount needed to collect from parents\r\n        let remaining = target.sub(this.balance);\r\n\r\n        let transactions = [];\r\n        for (let i = 0; i < this.parents.length; i++) {\r\n            let p = this.parents[i];\r\n\r\n            if (remaining.lte(new BN(0))) break;\r\n\r\n            // Parent's balance\r\n            let pBal = p.reduceTotalBalanceFromParents();\r\n            const exportFee = p.feeExport;\r\n            const importFee = this.feeImport;\r\n            const feeImportExport = exportFee.add(importFee);\r\n            // Maximum balance we can import from parent\r\n            let pBalMax = pBal.sub(feeImportExport);\r\n            // The parent needs to have this balance to satisfy the needed amount\r\n\r\n            // Try to export the remaining amount, if the parent balance is lower than that export the maximum amount\r\n            // Import amount is the usable amount imported\r\n            const importAmt = BN.min(pBalMax, remaining); // The amount that will cross to the target chain\r\n            // Exported amount should include the import fees\r\n            const exportAmt = importAmt.add(importFee);\r\n\r\n            if (exportAmt.lte(new BN(0))) continue;\r\n\r\n            let pTx = p.buildExportTx(this.chain, exportAmt);\r\n            let importTx = this.buildImportTx(p.chain);\r\n\r\n            transactions.push(pTx);\r\n            transactions.push(importTx);\r\n\r\n            remaining = remaining.sub(importAmt);\r\n        }\r\n\r\n        // If we still have remaining balance, we can not complete this transfer\r\n        if (remaining.gt(new BN(0))) {\r\n            throw new Error('Insufficient AVAX balances.');\r\n        }\r\n\r\n        return transactions;\r\n    }\r\n\r\n    addParent(node: UniversalNodeAbstract) {\r\n        this.parents.push(node);\r\n    }\r\n\r\n    setChild(node: UniversalNodeAbstract) {\r\n        this.child = node;\r\n    }\r\n}\r\n","import { UniversalNodeAbstract } from '@/UniversalTx/UniversalNode';\r\nimport { ExportChainsX } from '@/Wallet/types';\r\nimport {\r\n    UniversalTxActionExportX,\r\n    UniversalTxActionImportX,\r\n    UniversalTxExportX,\r\n    UniversalTxImportX,\r\n} from '@/UniversalTx/types';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\n\r\nexport default class UniversalNodeX extends UniversalNodeAbstract {\r\n    constructor(balance: BN, feeExport: BN, feeImport: BN) {\r\n        super(balance, 'X', feeExport, feeImport);\r\n    }\r\n\r\n    buildExportTx(destChain: ExportChainsX, amount: BN): UniversalTxExportX {\r\n        return super.buildExportTx(destChain, amount) as UniversalTxExportX;\r\n    }\r\n\r\n    buildImportTx(sourceChain: ExportChainsX): UniversalTxImportX {\r\n        return super.buildImportTx(sourceChain) as UniversalTxImportX;\r\n    }\r\n\r\n    getExportMethod(to: ExportChainsX): UniversalTxActionExportX {\r\n        if (to === 'P') {\r\n            return 'export_x_p';\r\n        } else {\r\n            return 'export_x_c';\r\n        }\r\n    }\r\n\r\n    getImportMethod(from: ExportChainsX): UniversalTxActionImportX {\r\n        if (from === 'P') {\r\n            return 'import_p_x';\r\n        } else {\r\n            return 'import_c_x';\r\n        }\r\n    }\r\n}\r\n","import { UniversalNodeAbstract } from '@/UniversalTx/UniversalNode';\r\nimport { ExportChainsP } from '@/Wallet/types';\r\nimport {\r\n    UniversalTxActionExportP,\r\n    UniversalTxActionImportP,\r\n    UniversalTxExportP,\r\n    UniversalTxImportP,\r\n} from '@/UniversalTx/types';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\n\r\nexport default class UniversalNodeP extends UniversalNodeAbstract {\r\n    constructor(balance: BN, feeExport: BN, feeImport: BN) {\r\n        super(balance, 'P', feeExport, feeImport);\r\n    }\r\n\r\n    buildExportTx(destChain: ExportChainsP, amount: BN): UniversalTxExportP {\r\n        return super.buildExportTx(destChain, amount) as UniversalTxExportP;\r\n    }\r\n\r\n    buildImportTx(sourceChain: ExportChainsP): UniversalTxImportP {\r\n        return super.buildImportTx(sourceChain) as UniversalTxImportP;\r\n    }\r\n\r\n    getExportMethod(to: ExportChainsP): UniversalTxActionExportP {\r\n        if (to === 'X') {\r\n            return 'export_p_x';\r\n        } else {\r\n            return 'export_p_c';\r\n        }\r\n    }\r\n\r\n    getImportMethod(from: ExportChainsP): UniversalTxActionImportP {\r\n        if (from === 'X') {\r\n            return 'import_x_p';\r\n        } else {\r\n            return 'import_c_p';\r\n        }\r\n    }\r\n}\r\n","import { UniversalNodeAbstract } from '@/UniversalTx/UniversalNode';\r\nimport { ExportChainsC } from '@/Wallet/types';\r\nimport {\r\n    UniversalTxActionExportC,\r\n    UniversalTxActionImportC,\r\n    UniversalTxExportC,\r\n    UniversalTxImportC,\r\n} from '@/UniversalTx/types';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\n\r\nexport default class UniversalNodeC extends UniversalNodeAbstract {\r\n    constructor(balance: BN, feeExport: BN, feeImport: BN) {\r\n        super(balance, 'C', feeExport, feeImport);\r\n    }\r\n\r\n    buildExportTx(destChain: ExportChainsC, amount: BN): UniversalTxExportC {\r\n        return super.buildExportTx(destChain, amount) as UniversalTxExportC;\r\n    }\r\n\r\n    buildImportTx(sourceChain: ExportChainsC): UniversalTxImportC {\r\n        return super.buildImportTx(sourceChain) as UniversalTxImportC;\r\n    }\r\n\r\n    getExportMethod(to: ExportChainsC): UniversalTxActionExportC {\r\n        if (to === 'X') {\r\n            return 'export_c_x';\r\n        } else {\r\n            return 'export_c_p';\r\n        }\r\n    }\r\n\r\n    getImportMethod(from: ExportChainsC): UniversalTxActionImportC {\r\n        if (from === 'X') {\r\n            return 'import_x_c';\r\n        } else {\r\n            return 'import_p_c';\r\n        }\r\n    }\r\n}\r\n","import { BN } from '@c4tplatform/caminojs/dist';\r\nimport { UniversalTx } from '@/UniversalTx/types';\r\nimport UniversalNodeX from '@/UniversalTx/UniversalNodeX';\r\nimport UniversalNodeP from '@/UniversalTx/UniversalNodeP';\r\nimport UniversalNodeC from '@/UniversalTx/UniversalNodeC';\r\n\r\nexport function createGraphForP(balX: BN, balP: BN, balC: BN, atomicFeeXP: BN, atomicFeeC: BN): UniversalNodeP {\r\n    let xNode = new UniversalNodeX(balX, atomicFeeXP, atomicFeeXP);\r\n    let pNode = new UniversalNodeP(balP, atomicFeeXP, atomicFeeXP);\r\n    let cNode = new UniversalNodeC(balC, atomicFeeC, atomicFeeC);\r\n\r\n    pNode.addParent(xNode);\r\n    pNode.addParent(cNode);\r\n\r\n    cNode.setChild(pNode);\r\n    xNode.setChild(pNode);\r\n    return pNode;\r\n}\r\n\r\nexport function createGraphForC(balX: BN, balP: BN, balC: BN, atomicFeeXP: BN, atomicFeeC: BN): UniversalNodeC {\r\n    let xNode = new UniversalNodeX(balX, atomicFeeXP, atomicFeeXP);\r\n    let pNode = new UniversalNodeP(balP, atomicFeeXP, atomicFeeXP);\r\n    let cNode = new UniversalNodeC(balC, atomicFeeC, atomicFeeC);\r\n\r\n    cNode.addParent(xNode);\r\n    cNode.addParent(pNode);\r\n\r\n    pNode.setChild(cNode);\r\n    xNode.setChild(cNode);\r\n\r\n    return cNode;\r\n}\r\n\r\nexport function createGraphForX(balX: BN, balP: BN, balC: BN, atomicFeeXP: BN, atomicFeeC: BN): UniversalNodeX {\r\n    let xNode = new UniversalNodeX(balX, atomicFeeXP, atomicFeeXP);\r\n    let pNode = new UniversalNodeP(balP, atomicFeeXP, atomicFeeXP);\r\n    let cNode = new UniversalNodeC(balC, atomicFeeC, atomicFeeC);\r\n\r\n    xNode.addParent(pNode);\r\n    xNode.addParent(cNode);\r\n\r\n    cNode.setChild(xNode);\r\n    pNode.setChild(xNode);\r\n\r\n    return xNode;\r\n}\r\n\r\nexport function canHaveBalanceOnX(\r\n    balX: BN,\r\n    balP: BN,\r\n    balC: BN,\r\n    targetAmount: BN,\r\n    atomicFeeXP: BN,\r\n    atomicFeeC: BN\r\n): boolean {\r\n    let startNode = createGraphForX(balX, balP, balC, atomicFeeXP, atomicFeeC);\r\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\r\n}\r\n\r\nexport function canHaveBalanceOnP(\r\n    balX: BN,\r\n    balP: BN,\r\n    balC: BN,\r\n    targetAmount: BN,\r\n    atomicFeeXP: BN,\r\n    atomicFeeC: BN\r\n): boolean {\r\n    let startNode = createGraphForP(balX, balP, balC, atomicFeeXP, atomicFeeC);\r\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\r\n}\r\n\r\n/**\r\n * Will return true if `targetAmount` can exist on C chain\r\n */\r\nexport function canHaveBalanceOnC(\r\n    balX: BN,\r\n    balP: BN,\r\n    balC: BN,\r\n    targetAmount: BN,\r\n    atomicFeeXP: BN,\r\n    atomicFeeC: BN\r\n): boolean {\r\n    let startNode = createGraphForC(balX, balP, balC, atomicFeeXP, atomicFeeC);\r\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\r\n}\r\n\r\nexport function getStepsForBalanceP(\r\n    balX: BN,\r\n    balP: BN,\r\n    balC: BN,\r\n    targetAmount: BN,\r\n    atomicFeeXP: BN,\r\n    atomicFeeC: BN\r\n): UniversalTx[] {\r\n    let startNode = createGraphForP(balX, balP, balC, atomicFeeXP, atomicFeeC);\r\n\r\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\r\n        throw new Error('Insufficient AVAX.');\r\n    }\r\n\r\n    return startNode.getStepsForTargetBalance(targetAmount);\r\n}\r\n\r\nexport function getStepsForBalanceC(\r\n    balX: BN,\r\n    balP: BN,\r\n    balC: BN,\r\n    targetAmount: BN,\r\n    atomicFeeXP: BN,\r\n    atomicFeeC: BN\r\n): UniversalTx[] {\r\n    let startNode = createGraphForC(balX, balP, balC, atomicFeeXP, atomicFeeC);\r\n\r\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\r\n        throw new Error('Insufficient AVAX.');\r\n    }\r\n\r\n    return startNode.getStepsForTargetBalance(targetAmount);\r\n}\r\n\r\nexport function getStepsForBalanceX(\r\n    balX: BN,\r\n    balP: BN,\r\n    balC: BN,\r\n    targetAmount: BN,\r\n    atomicFeeXP: BN,\r\n    atomicFeeC: BN\r\n): UniversalTx[] {\r\n    let startNode = createGraphForX(balX, balP, balC, atomicFeeXP, atomicFeeC);\r\n\r\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\r\n        throw new Error('Insufficient AVAX.');\r\n    }\r\n\r\n    return startNode.getStepsForTargetBalance(targetAmount);\r\n}\r\n","import { activeNetwork, avalanche, web3 } from '@/Network/network';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport {\r\n    EVMInput,\r\n    ExportTx,\r\n    SECPTransferOutput,\r\n    TransferableOutput,\r\n    UnsignedTx,\r\n} from '@c4tplatform/caminojs/dist/apis/evm';\r\nimport { ExportChainsC } from '@/Wallet/types';\r\nimport { bintools } from '@/common';\r\nimport { chainIdFromAlias } from '@/Network';\r\nimport { costExportTx, costImportTx } from '@c4tplatform/caminojs/dist/utils';\r\nimport { buildEvmExportTransaction } from '@/helpers/tx_helper';\r\n\r\nconst MAX_GAS = new BN(1000_000_000_000);\r\n\r\n/**\r\n * Returns the current gas price in WEI from the network\r\n */\r\nexport async function getGasPrice(): Promise<BN> {\r\n    return new BN(await web3.eth.getGasPrice());\r\n}\r\n\r\n/**\r\n * Returns the gas price + 25%, or max gas\r\n */\r\nexport async function getAdjustedGasPrice(): Promise<BN> {\r\n    let gasPrice = await getGasPrice();\r\n    let adjustedGas = adjustValue(gasPrice, 25);\r\n    return BN.min(adjustedGas, MAX_GAS);\r\n}\r\n\r\n/**\r\n *\r\n * @param val\r\n * @param perc What percentage to adjust with\r\n */\r\nexport function adjustValue(val: BN, perc: number) {\r\n    let padAmt = val.div(new BN(100)).mul(new BN(perc));\r\n    return val.add(padAmt);\r\n}\r\n\r\n/**\r\n * Returns the base fee from the network.\r\n */\r\nexport async function getBaseFee(): Promise<BN> {\r\n    const rawHex = (await avalanche().CChain().getBaseFee()).substring(2);\r\n    return new BN(rawHex, 'hex');\r\n}\r\n\r\n/**\r\n * Returns the current base fee + 25%\r\n */\r\nexport async function getBaseFeeRecommended() {\r\n    const baseFee = await getBaseFee();\r\n    return adjustValue(baseFee, 25);\r\n}\r\n\r\n/**\r\n * Returns the base max priority fee from the network.\r\n */\r\nexport async function getMaxPriorityFee(): Promise<BN> {\r\n    const rawHex = (await avalanche().CChain().getMaxPriorityFeePerGas()).substring(2);\r\n    return new BN(rawHex, 'hex');\r\n}\r\n\r\n/**\r\n * Calculate max fee for EIP 1559 transactions given baseFee and maxPriorityFee.\r\n * According to https://www.blocknative.com/blog/eip-1559-fees\r\n * @param baseFee in WEI\r\n * @param maxPriorityFee in WEI\r\n */\r\nexport function calculateMaxFee(baseFee: BN, maxPriorityFee: BN): BN {\r\n    return baseFee.mul(new BN(2)).add(maxPriorityFee);\r\n}\r\n\r\n/**\r\n * Creates a mock import transaction and estimates the gas required for it. Returns fee in units of gas.\r\n * @param numIns Number of inputs for the import transaction.\r\n * @param numSigs Number of signatures used in the import transactions. This value is the sum of owner addresses in every UTXO.\r\n */\r\nexport function estimateImportGasFeeFromMockTx(\r\n    numIns = 1,\r\n    numSigs: number // number of signatures (sum of owner addresses in each utxo)\r\n): number {\r\n    const ATOMIC_TX_COST = 10000; // in gas\r\n    const SIG_COST = 1000; // in gas\r\n    const BASE_TX_SIZE = 78;\r\n    const SINGLE_OWNER_INPUT_SIZE = 90; // in bytes\r\n    const OUTPUT_SIZE = 60; // in bytes\r\n\r\n    // C chain imports consolidate inputs to one output\r\n    const numOutputs = 1;\r\n    // Assuming each input has 1 owner\r\n    const baseSize = BASE_TX_SIZE + numIns * SINGLE_OWNER_INPUT_SIZE + numOutputs * OUTPUT_SIZE;\r\n    const importGas = baseSize + numSigs * SIG_COST + ATOMIC_TX_COST;\r\n\r\n    return importGas;\r\n}\r\n\r\n/**\r\n * Estimates the gas fee using a mock ExportTx built from the passed values.\r\n * @param destinationChain `X` or `P`\r\n * @param amount in nAVAX\r\n * @param from The C chain hex address exported from\r\n * @param to The destination X or P address\r\n */\r\nexport function estimateExportGasFeeFromMockTx(\r\n    destinationChain: ExportChainsC,\r\n    amount: BN,\r\n    from: string,\r\n    to: string\r\n): number {\r\n    const destChainId = chainIdFromAlias(destinationChain);\r\n    const destChainIdBuff = bintools.cb58Decode(destChainId);\r\n    const toBuff = bintools.stringToAddress(to);\r\n    const netID = activeNetwork.networkID;\r\n    const chainID = activeNetwork.cChainID;\r\n    const AVAX_ID = activeNetwork.avaxID;\r\n    const avaxIDBuff = bintools.cb58Decode(AVAX_ID);\r\n\r\n    const txIn = new EVMInput(from, amount, avaxIDBuff);\r\n    const secpOut = new SECPTransferOutput(amount, [toBuff]);\r\n    const txOut = new TransferableOutput(avaxIDBuff, secpOut);\r\n\r\n    // Create fake export Tx\r\n    const chainIdBuff = bintools.cb58Decode(chainID);\r\n    const exportTx = new ExportTx(netID, chainIdBuff, destChainIdBuff, [txIn], [txOut]);\r\n\r\n    const unisgnedTx = new UnsignedTx(exportTx);\r\n\r\n    return costExportTx(avalanche().getNetwork().C, unisgnedTx);\r\n}\r\n\r\n/**\r\n * Returns the estimated gas for the export transaction.\r\n * @param destinationChain Either `X` or `P`\r\n * @param amount The amount to export. In nAVAX.\r\n * @param from The C chain hex address exporting the asset\r\n * @param fromBech The C chain bech32 address exporting the asset\r\n * @param to The destination address on the destination chain\r\n */\r\nexport async function estimateExportGasFee(\r\n    destinationChain: ExportChainsC,\r\n    from: string,\r\n    fromBech: string,\r\n    to: string,\r\n    amount: BN\r\n): Promise<number> {\r\n    let exportTx = await buildEvmExportTransaction([from], to, amount, fromBech, destinationChain, new BN(0));\r\n\r\n    return costExportTx(avalanche().getNetwork().C, exportTx);\r\n}\r\n","import {\r\n    AssetBalanceP,\r\n    AssetBalanceRawX,\r\n    AssetBalanceX,\r\n    BTCNetworkType,\r\n    ERC20Balance,\r\n    ExportChainsC,\r\n    ExportChainsP,\r\n    ExportChainsX,\r\n    iAvaxBalance,\r\n    WalletBalanceX,\r\n    WalletEventArgsType,\r\n    WalletEventType,\r\n    WalletNameType,\r\n} from './types';\r\nimport {\r\n    buildAvmExportTransaction,\r\n    buildCreateNftFamilyTx,\r\n    buildCustomEvmTx,\r\n    buildEvmExportTransaction,\r\n    buildEvmTransferErc20Tx,\r\n    buildEvmTransferErc721Tx,\r\n    buildEvmTransferNativeTx,\r\n    buildMintNftTx,\r\n    buildPlatformExportTransaction,\r\n    estimateAvaxGas,\r\n    estimateErc20Gas,\r\n} from '@/helpers/tx_helper';\r\nimport { BN, Buffer } from '@c4tplatform/caminojs/dist';\r\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\r\nimport { activeNetwork, avalanche, web3 } from '@/Network/network';\r\nimport { EvmWallet } from '@/Wallet/EVM/EvmWallet';\r\n\r\nimport {\r\n    avmGetAllUTXOs,\r\n    avmGetAtomicUTXOs,\r\n    evmGetAtomicUTXOs,\r\n    getStakeForAddresses,\r\n    platformGetAllUTXOs,\r\n    platformGetAtomicUTXOs,\r\n} from '@/helpers/utxo_helper';\r\n\r\nimport {\r\n    UTXOSet as AVMUTXOSet,\r\n    UnsignedTx as AVMUnsignedTx,\r\n    UTXO as AVMUTXO,\r\n    Tx as AvmTx,\r\n    AVMConstants,\r\n    AmountOutput,\r\n} from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport {\r\n    UTXOSet as PlatformUTXOSet,\r\n    UTXO as PlatformUTXO,\r\n    UnsignedTx as PlatformUnsignedTx,\r\n    Tx as PlatformTx,\r\n    PlatformVMConstants,\r\n    StakeableLockOut,\r\n} from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { UnsignedTx as EVMUnsignedTx, Tx as EVMTx, UTXOSet as EVMUTXOSet } from '@c4tplatform/caminojs/dist/apis/evm';\r\n\r\nimport { PayloadBase, UnixNow } from '@c4tplatform/caminojs/dist/utils';\r\nimport { getAssetDescription } from '@/Asset/Assets';\r\nimport { getErc20Token } from '@/Asset/Erc20';\r\nimport { NO_NETWORK } from '@/errors';\r\nimport { avaxCtoX, bnToLocaleString, waitTxC, waitTxEvm, waitTxP, waitTxX } from '@/utils';\r\nimport { EvmWalletReadonly } from '@/Wallet/EVM/EvmWalletReadonly';\r\nimport EventEmitter from 'events';\r\nimport { getTransactionSummary, getTransactionSummaryEVM, HistoryItemType } from '@/History';\r\nimport { bintools } from '@/common';\r\nimport { ChainIdType } from '@/common';\r\nimport {\r\n    createGraphForC,\r\n    createGraphForP,\r\n    createGraphForX,\r\n    getStepsForBalanceC,\r\n    getStepsForBalanceP,\r\n    getStepsForBalanceX,\r\n    UniversalTx,\r\n} from '@/UniversalTx';\r\nimport { UniversalNodeAbstract } from '@/UniversalTx/UniversalNode';\r\nimport { GetStakeResponse } from '@c4tplatform/caminojs/dist/apis/platformvm/interfaces';\r\nimport { networkEvents } from '@/Network/eventEmitter';\r\nimport { NetworkConfig } from '@/Network';\r\nimport { chainIdFromAlias } from '@/Network/helpers/idFromAlias';\r\nimport {\r\n    estimateExportGasFeeFromMockTx,\r\n    estimateImportGasFeeFromMockTx,\r\n    getBaseFeeRecommended,\r\n} from '@/helpers/gas_helper';\r\nimport { getErc20History, getNormalHistory } from '@/Explorer/snowtrace';\r\nimport {\r\n    filterDuplicateOrtelius,\r\n    getAddressHistory,\r\n    getAddressHistoryEVM,\r\n    getTx,\r\n    getTxEvm,\r\n    OrteliusAvalancheTx,\r\n} from '@/Explorer';\r\nimport { TypedDataV1, TypedMessage } from '@metamask/eth-sig-util';\r\n\r\nexport abstract class WalletProvider {\r\n    abstract type: WalletNameType;\r\n    abstract evmWallet: EvmWallet | EvmWalletReadonly;\r\n\r\n    /**\r\n     * The X chain UTXOs of the wallet's current state\r\n     */\r\n    public utxosX: AVMUTXOSet = new AVMUTXOSet();\r\n\r\n    /**\r\n     * The P chain UTXOs of the wallet's current state\r\n     */\r\n    public utxosP: PlatformUTXOSet = new PlatformUTXOSet();\r\n\r\n    public balanceX: WalletBalanceX = {};\r\n\r\n    abstract signEvm(tx: Transaction | FeeMarketEIP1559Transaction): Promise<Transaction | FeeMarketEIP1559Transaction>;\r\n    abstract signX(tx: AVMUnsignedTx): Promise<AvmTx>;\r\n    abstract signP(tx: PlatformUnsignedTx): Promise<PlatformTx>;\r\n    abstract signC(tx: EVMUnsignedTx): Promise<EVMTx>;\r\n\r\n    abstract getAddressX(): string;\r\n    abstract getChangeAddressX(): string;\r\n    abstract getAddressP(): string;\r\n\r\n    abstract getExternalAddressesX(): Promise<string[]>;\r\n    abstract getExternalAddressesXSync(): string[];\r\n    abstract getInternalAddressesX(): Promise<string[]>;\r\n    abstract getInternalAddressesXSync(): string[];\r\n    abstract getExternalAddressesP(): Promise<string[]>;\r\n    abstract getExternalAddressesPSync(): string[];\r\n\r\n    abstract getAllAddressesX(): Promise<string[]>;\r\n    abstract getAllAddressesXSync(): string[];\r\n    abstract getAllAddressesP(): Promise<string[]>;\r\n    abstract getAllAddressesPSync(): string[];\r\n\r\n    abstract personalSign(data: string): Promise<string>;\r\n    abstract signTypedData_V1(data: TypedDataV1): Promise<string>;\r\n    abstract signTypedData_V3(data: TypedMessage<any>): Promise<string>;\r\n    abstract signTypedData_V4(data: TypedMessage<any>): Promise<string>;\r\n\r\n    protected constructor() {\r\n        networkEvents.on('network_change', this.onNetworkChange.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Call after getting done with the wallet to avoi memory leaks and remove event listeners\r\n     */\r\n    public destroy() {\r\n        networkEvents.off('network_change', this.onNetworkChange);\r\n    }\r\n\r\n    /**\r\n     * Fired when the network changes\r\n     * @param config\r\n     * @protected\r\n     */\r\n    //@ts-ignore\r\n    protected onNetworkChange(config: NetworkConfig) {}\r\n\r\n    /***\r\n     * Used to get an identifier string that is consistent across different network connections.\r\n     * Currently returns the C address of this wallet.\r\n     */\r\n    public getBaseAddress(): string {\r\n        return this.getAddressC();\r\n    }\r\n\r\n    protected emitter: EventEmitter = new EventEmitter();\r\n\r\n    public on(event: WalletEventType, listener: (...args: any[]) => void): void {\r\n        this.emitter.on(event, listener);\r\n    }\r\n\r\n    public off(event: WalletEventType, listener: (...args: any[]) => void): void {\r\n        this.emitter.off(event, listener);\r\n    }\r\n\r\n    protected emit(event: WalletEventType, args?: WalletEventArgsType): void {\r\n        this.emitter.emit(event, args);\r\n    }\r\n\r\n    protected emitAddressChange(): void {\r\n        this.emit('addressChanged', {\r\n            X: this.getAddressX(),\r\n            changeX: this.getChangeAddressX(),\r\n            P: this.getAddressP(),\r\n        });\r\n    }\r\n\r\n    protected emitBalanceChangeX(): void {\r\n        this.emit('balanceChangedX', this.balanceX);\r\n    }\r\n\r\n    protected emitBalanceChangeP(): void {\r\n        this.emit('balanceChangedP', this.getAvaxBalanceP());\r\n    }\r\n\r\n    protected emitBalanceChangeC(): void {\r\n        this.emit('balanceChangedC', this.getAvaxBalanceC());\r\n    }\r\n\r\n    /**\r\n     * Gets the active address on the C chain\r\n     * @return Hex representation of the EVM address.\r\n     */\r\n    public getAddressC() {\r\n        return this.evmWallet.getAddress();\r\n    }\r\n\r\n    public getEvmAddressBech() {\r\n        return this.evmWallet.getAddressBech32();\r\n    }\r\n\r\n    /**\r\n     * Returns the BTC address of the C-Chain public key.\r\n     */\r\n    public getAddressBTC(type: BTCNetworkType): string {\r\n        return this.evmWallet.getAddressBTC(type);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param to - the address funds are being send to.\r\n     * @param amount - amount of AVAX to send in nAVAX\r\n     * @param memo - A MEMO for the transaction\r\n     */\r\n    async sendAvaxX(to: string, amount: BN, memo?: string): Promise<string> {\r\n        if (!activeNetwork) throw NO_NETWORK;\r\n\r\n        let memoBuff = memo ? Buffer.from(memo) : undefined;\r\n\r\n        let froms = await this.getAllAddressesX();\r\n        let changeAddress = this.getChangeAddressX();\r\n        let utxoSet = this.utxosX;\r\n\r\n        let tx = await avalanche()\r\n            .XChain()\r\n            .buildBaseTx(utxoSet, amount, activeNetwork.avaxID, [to], froms, [changeAddress], memoBuff);\r\n        let signedTx = await this.signX(tx);\r\n        let txId = await avalanche().XChain().issueTx(signedTx);\r\n        await waitTxX(txId);\r\n\r\n        // Update UTXOs\r\n        this.updateUtxosX();\r\n\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     * Sends AVAX to another address on the C chain using legacy transaction format.\r\n     * @param to Hex address to send AVAX to.\r\n     * @param amount Amount of AVAX to send, represented in WEI format.\r\n     * @param gasPrice Gas price in WEI format\r\n     * @param gasLimit Gas limit\r\n     *\r\n     * @return Returns the transaction hash\r\n     */\r\n    async sendAvaxC(to: string, amount: BN, gasPrice: BN, gasLimit: number): Promise<string> {\r\n        let fromAddr = this.getAddressC();\r\n        let tx = await buildEvmTransferNativeTx(fromAddr, to, amount, gasPrice, gasLimit);\r\n        let txId = await this.issueEvmTx(tx);\r\n        await this.updateAvaxBalanceC();\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     * Send Avalanche Native Tokens on X chain\r\n     * @param assetID ID of the token to send\r\n     * @param amount How many units of the token to send. Based on smallest divisible unit.\r\n     * @param to X chain address to send tokens to\r\n     */\r\n    async sendANT(assetID: string, amount: BN, to: string): Promise<string> {\r\n        let utxoSet = this.getUtxosX();\r\n        let fromAddrs = await this.getAllAddressesX();\r\n        let changeAddr = this.getChangeAddressX();\r\n\r\n        let tx = await avalanche().XChain().buildBaseTx(utxoSet, amount, assetID, [to], fromAddrs, [changeAddr]);\r\n        let signed = await this.signX(tx);\r\n        let txId = await avalanche().XChain().issueTx(signed);\r\n        await waitTxX(txId);\r\n\r\n        this.updateUtxosX();\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     * Makes a transfer call on a ERC20 contract.\r\n     * @param to Hex address to transfer tokens to.\r\n     * @param amount Amount of the ERC20 token to send, donated in the token's correct denomination.\r\n     * @param gasPrice Gas price in WEI format\r\n     * @param gasLimit Gas limit\r\n     * @param contractAddress Contract address of the ERC20 token\r\n     */\r\n    async sendErc20(to: string, amount: BN, gasPrice: BN, gasLimit: number, contractAddress: string): Promise<string> {\r\n        let fromAddr = this.getAddressC();\r\n        let token = await getErc20Token(contractAddress);\r\n        let balOld = await token.balanceOf(fromAddr);\r\n        let tx = await buildEvmTransferErc20Tx(fromAddr, to, amount, gasPrice, gasLimit, contractAddress);\r\n        let txHash = await this.issueEvmTx(tx);\r\n\r\n        // TODO: We should not be using setTimeout, wait until tx is confirmed on chain\r\n        // TODO: Can it be an issue with sticky sessions? Nodes behind a LB?\r\n        // If new balance doesnt match old, emit balance change\r\n        setTimeout(async () => {\r\n            let balNew = await token.balanceOf(fromAddr);\r\n            if (!balOld.eq(balNew)) {\r\n                this.emitBalanceChangeC();\r\n            }\r\n        }, 2000);\r\n\r\n        return txHash;\r\n    }\r\n\r\n    /**\r\n     * Makes a `safeTransferFrom` call on a ERC721 contract.\r\n     * @param to Hex address to transfer the NFT to.\r\n     * @param tokenID ID of the token to transfer inside the ERC71 family.\r\n     * @param gasPrice Gas price in WEI format\r\n     * @param gasLimit Gas limit\r\n     * @param contractAddress Contract address of the ERC721 token\r\n     */\r\n    async sendErc721(contractAddress: string, to: string, tokenID: number, gasPrice: BN, gasLimit: number) {\r\n        const tx = await buildEvmTransferErc721Tx(this.getAddressC(), to, gasPrice, gasLimit, contractAddress, tokenID);\r\n        return await this.issueEvmTx(tx);\r\n    }\r\n\r\n    /**\r\n     * Estimate the gas needed for an ERC20 Transfer transaction\r\n     * @param contractAddress The ERC20 contract address\r\n     * @param to Address receiving the tokens\r\n     * @param amount Amount to send. Given in the smallest divisible unit.\r\n     */\r\n    async estimateErc20Gas(contractAddress: string, to: string, amount: BN): Promise<number> {\r\n        let from = this.getAddressC();\r\n        return await estimateErc20Gas(contractAddress, from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * Estimate the gas needed for an ERC721 `safeTransferFrom` transaction\r\n     * @param contractAddress The ERC20 contract address\r\n     * @param to Address receiving the tokens\r\n     * @param tokenID ID of the token to transfer inside the ERC71 family.\r\n     */\r\n    async estimateErc721TransferGasLimit(contractAddress: string, to: string, tokenID: number) {\r\n        return this.evmWallet.estimateErc721TransferGasLimit(contractAddress, to, tokenID);\r\n    }\r\n\r\n    /**\r\n     * Estimate gas limit for the given inputs.\r\n     * @param to\r\n     * @param data\r\n     */\r\n    async estimateGas(to: string, data: string) {\r\n        const from = this.getAddressC();\r\n        const nonce = await web3.eth.getTransactionCount(from);\r\n        return await web3.eth.estimateGas({\r\n            from: from,\r\n            nonce: nonce,\r\n            to: to,\r\n            data: data,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Estimate the gas needed for a AVAX send transaction on the C chain.\r\n     * @param to Destination address.\r\n     * @param amount Amount of AVAX to send, in WEI.\r\n     */\r\n    async estimateAvaxGasLimit(to: string, amount: BN, gasPrice: BN): Promise<number> {\r\n        let from = this.getAddressC();\r\n        return await estimateAvaxGas(from, to, amount, gasPrice);\r\n    }\r\n\r\n    /**\r\n     * A method to create custom EVM transactions.\r\n     * @param gasPrice\r\n     * @param gasLimit\r\n     * @param data `data` field of the transaction, in hex format\r\n     * @param to `to` field of the transaction, in hex format\r\n     * @param value `value` field of the transaction, in hex format\r\n     * @param nonce Nonce of the transaction, in number. If not provided, SDK will get the latest nonce from the network\r\n     */\r\n    async sendCustomEvmTx(gasPrice: BN, gasLimit: number, data?: string, to?: string, value?: string, nonce?: number) {\r\n        let from = this.getAddressC();\r\n        let tx = await buildCustomEvmTx(from, gasPrice, gasLimit, data, to, value, nonce);\r\n        return await this.issueEvmTx(tx);\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum spendable AVAX balance for the given chain.\r\n     * Scans all chains and take cross over fees into account\r\n     * @param chainType X, P or C\r\n     */\r\n    public getUsableAvaxBalanceForChain(chainType: ChainIdType, atomicFeeXP: BN, atomicFeeC: BN): BN {\r\n        return this.createUniversalNode(chainType, atomicFeeXP, atomicFeeC).reduceTotalBalanceFromParents();\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of a UniversalNode for the given chain using current balance state\r\n     * @param chain Chain of the universal node.\r\n     * @private\r\n     */\r\n    private createUniversalNode(chain: ChainIdType, atomicFeeXP: BN, atomicFeeC: BN): UniversalNodeAbstract {\r\n        let xBal = this.getAvaxBalanceX().unlocked;\r\n        let pBal = this.getAvaxBalanceP().unlocked;\r\n        let cBal = avaxCtoX(this.getAvaxBalanceC()); // need to use 9 decimal places\r\n\r\n        switch (chain) {\r\n            case 'X':\r\n                return createGraphForX(xBal, pBal, cBal, atomicFeeXP, atomicFeeC);\r\n            case 'P':\r\n                return createGraphForP(xBal, pBal, cBal, atomicFeeXP, atomicFeeC);\r\n            case 'C':\r\n                return createGraphForC(xBal, pBal, cBal, atomicFeeXP, atomicFeeC);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Can this wallet have the given amount on the given chain after a series of internal transactions (if required).\r\n     * @param chain X/P/C\r\n     * @param amount The amount to check against\r\n     */\r\n    public canHaveBalanceOnChain(chain: ChainIdType, amount: BN, atomicFeeXP: BN, atomicFeeC: BN): boolean {\r\n        // The maximum amount of AVAX we can have on this chain\r\n        let maxAmt = this.createUniversalNode(chain, atomicFeeXP, atomicFeeC).reduceTotalBalanceFromParents();\r\n        return maxAmt.gte(amount);\r\n    }\r\n\r\n    /**\r\n     * Returns an array of transaction to do in order to have the target amount on the given chain\r\n     * @param chain The chain (X/P/C) to have the desired amount on\r\n     * @param amount The desired amount\r\n     */\r\n    public getTransactionsForBalance(chain: ChainIdType, amount: BN, atomicFeeXP: BN, atomicFeeC: BN): UniversalTx[] {\r\n        let xBal = this.getAvaxBalanceX().unlocked;\r\n        let pBal = this.getAvaxBalanceP().unlocked;\r\n        let cBal = avaxCtoX(this.getAvaxBalanceC()); // need to use 9 decimal places\r\n\r\n        switch (chain) {\r\n            case 'P':\r\n                return getStepsForBalanceP(xBal, pBal, cBal, amount, atomicFeeXP, atomicFeeC);\r\n            case 'C':\r\n                return getStepsForBalanceC(xBal, pBal, cBal, amount, atomicFeeXP, atomicFeeC);\r\n            case 'X':\r\n                return getStepsForBalanceX(xBal, pBal, cBal, amount, atomicFeeXP, atomicFeeC);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a `Transaction`, it will sign and issue it to the network.\r\n     * @param tx The unsigned transaction to issue.\r\n     */\r\n    async issueEvmTx(tx: Transaction | FeeMarketEIP1559Transaction): Promise<string> {\r\n        let signedTx = await this.signEvm(tx);\r\n        let txHex = signedTx.serialize().toString('hex');\r\n        let hash = await web3.eth.sendSignedTransaction('0x' + txHex);\r\n        const txHash = hash.transactionHash;\r\n        return await waitTxEvm(txHash);\r\n    }\r\n\r\n    /**\r\n     * Returns the C chain AVAX balance of the wallet in WEI format.\r\n     */\r\n    async updateAvaxBalanceC(): Promise<BN> {\r\n        let balOld = this.evmWallet.getBalance();\r\n        let balNew = await this.evmWallet.updateBalance();\r\n\r\n        if (!balOld.eq(balNew)) {\r\n            this.emitBalanceChangeC();\r\n        }\r\n\r\n        return balNew;\r\n    }\r\n\r\n    /**\r\n     *  Returns UTXOs on the X chain that belong to this wallet.\r\n     *  - Makes network request.\r\n     *  - Updates `this.utxosX` with new UTXOs\r\n     *  - Calls `this.updateBalanceX()` after success.\r\n     *  */\r\n    public async updateUtxosX(): Promise<AVMUTXOSet> {\r\n        const addresses = await this.getAllAddressesX();\r\n        this.utxosX = await avmGetAllUTXOs(addresses);\r\n\r\n        await this.updateUnknownAssetsX();\r\n        this.updateBalanceX();\r\n\r\n        return this.utxosX;\r\n    }\r\n\r\n    /**\r\n     *  Returns the fetched UTXOs on the X chain that belong to this wallet.\r\n     */\r\n    public getUtxosX(): AVMUTXOSet {\r\n        return this.utxosX;\r\n    }\r\n\r\n    /**\r\n     *  Returns UTXOs on the P chain that belong to this wallet.\r\n     *  - Makes network request.\r\n     *  - Updates `this.utxosP` with the new UTXOs\r\n     */\r\n    public async updateUtxosP(): Promise<PlatformUTXOSet> {\r\n        let addresses = await this.getAllAddressesP();\r\n        this.utxosP = await platformGetAllUTXOs(addresses);\r\n\r\n        this.emitBalanceChangeP();\r\n\r\n        return this.utxosP;\r\n    }\r\n\r\n    /**\r\n     * Returns the fetched UTXOs on the P chain that belong to this wallet.\r\n     */\r\n    public getUtxosP(): PlatformUTXOSet {\r\n        return this.utxosP;\r\n    }\r\n\r\n    /**\r\n     * Returns the number AVAX staked by this wallet.\r\n     */\r\n    public async getStake(): Promise<GetStakeResponse> {\r\n        let addrs = await this.getAllAddressesP();\r\n        return await getStakeForAddresses(addrs);\r\n    }\r\n\r\n    /**\r\n     * Returns the wallet's balance of the given ERC20 contracts\r\n     * @param addresses ERC20 Contract addresses\r\n     */\r\n    public async getBalanceERC20(addresses: string[]): Promise<ERC20Balance[]> {\r\n        let walletAddr = this.getAddressC();\r\n        let tokenCalls = addresses.map((addr) => getErc20Token(addr));\r\n        let tokens = await Promise.all(tokenCalls);\r\n\r\n        let balanceCalls = tokens.map((token) => token.balanceOf(walletAddr));\r\n        let balances = await Promise.all(balanceCalls);\r\n\r\n        return balances.map((bal, i) => {\r\n            let token = tokens[i];\r\n            let balance: ERC20Balance = {\r\n                address: token.address,\r\n                denomination: token.decimals,\r\n                balanceParsed: bnToLocaleString(bal, token.decimals),\r\n                balance: bal,\r\n                name: token.name,\r\n                symbol: token.symbol,\r\n            };\r\n            return balance;\r\n        });\r\n    }\r\n\r\n    private async updateUnknownAssetsX() {\r\n        let utxos = this.utxosX.getAllUTXOs();\r\n\r\n        let assetIds = utxos.map((utxo) => {\r\n            let idBuff = utxo.getAssetID();\r\n            return bintools.cb58Encode(idBuff);\r\n        });\r\n        let uniqueIds = assetIds.filter((id, index) => {\r\n            return assetIds.indexOf(id) === index;\r\n        });\r\n\r\n        let promises = uniqueIds.map((id) => getAssetDescription(id));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Uses the X chain UTXOs owned by this wallet, gets asset description for unknown assets,\r\n     * and returns a dictionary of Asset IDs to balance amounts.\r\n     * - Updates `this.balanceX`\r\n     * - Expensive operation if there are unknown assets\r\n     * - Uses existing UTXOs\r\n     * @private\r\n     */\r\n    private async updateBalanceX(): Promise<WalletBalanceX> {\r\n        if (!activeNetwork) throw NO_NETWORK;\r\n        let utxos = this.utxosX.getAllUTXOs();\r\n\r\n        let unixNow = UnixNow();\r\n\r\n        let res: WalletBalanceX = {};\r\n\r\n        for (let i = 0; i < utxos.length; i++) {\r\n            let utxo = utxos[i];\r\n            let out = utxo.getOutput();\r\n            let type = out.getOutputID();\r\n\r\n            if (type != AVMConstants.SECPXFEROUTPUTID) continue;\r\n\r\n            let locktime = out.getLocktime();\r\n            let amount = (out as AmountOutput).getAmount();\r\n            let assetIdBuff = utxo.getAssetID();\r\n            let assetId = bintools.cb58Encode(assetIdBuff);\r\n\r\n            let asset: AssetBalanceX = res[assetId];\r\n\r\n            if (!asset) {\r\n                let assetInfo = await getAssetDescription(assetId);\r\n                asset = { locked: new BN(0), unlocked: new BN(0), meta: assetInfo };\r\n            }\r\n\r\n            if (locktime.lte(unixNow)) {\r\n                // not locked\r\n                asset.unlocked = asset.unlocked.add(amount);\r\n            } else {\r\n                // locked\r\n                asset.locked = asset.locked.add(amount);\r\n            }\r\n\r\n            res[assetId] = asset;\r\n        }\r\n\r\n        // If there are no AVAX UTXOs create a dummy empty balance object\r\n        let avaxID = activeNetwork.avaxID;\r\n        if (!res[avaxID]) {\r\n            let assetInfo = await getAssetDescription(avaxID);\r\n            res[avaxID] = {\r\n                locked: new BN(0),\r\n                unlocked: new BN(0),\r\n                meta: assetInfo,\r\n            };\r\n        }\r\n\r\n        this.balanceX = res;\r\n\r\n        // TODO: Check previous value\r\n        this.emitBalanceChangeX();\r\n        return res;\r\n    }\r\n\r\n    public getBalanceX(): WalletBalanceX {\r\n        return this.balanceX;\r\n    }\r\n\r\n    /**\r\n     * A helpful method that returns the AVAX balance on X, P, C chains.\r\n     * Internally calls chain specific getAvaxBalance methods.\r\n     */\r\n    public getAvaxBalance(): iAvaxBalance {\r\n        let X = this.getAvaxBalanceX();\r\n        let P = this.getAvaxBalanceP();\r\n        let C = this.getAvaxBalanceC();\r\n\r\n        return {\r\n            X,\r\n            P,\r\n            C,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the X chain AVAX balance of the current wallet state.\r\n     * - Does not make a network request.\r\n     * - Does not refresh wallet balance.\r\n     */\r\n    public getAvaxBalanceX(): AssetBalanceRawX {\r\n        if (!activeNetwork) {\r\n            throw new Error('Network not selected.');\r\n        }\r\n        return (\r\n            this.balanceX[activeNetwork.avaxID] || {\r\n                unlocked: new BN(0),\r\n                locked: new BN(0),\r\n            }\r\n        );\r\n    }\r\n\r\n    public getAvaxBalanceC(): BN {\r\n        return this.evmWallet.getBalance();\r\n    }\r\n\r\n    /**\r\n     * Returns the P chain AVAX balance of the current wallet state.\r\n     * - Does not make a network request.\r\n     * - Does not refresh wallet balance.\r\n     */\r\n    public getAvaxBalanceP(): AssetBalanceP {\r\n        let unlocked = new BN(0);\r\n        let locked = new BN(0);\r\n        let lockedStakeable = new BN(0);\r\n\r\n        let utxos = this.utxosP.getAllUTXOs();\r\n        let unixNow = UnixNow();\r\n\r\n        for (let i = 0; i < utxos.length; i++) {\r\n            let utxo = utxos[i];\r\n            let out = utxo.getOutput();\r\n            let type = out.getOutputID();\r\n\r\n            let amount = (out as AmountOutput).getAmount();\r\n\r\n            if (type === PlatformVMConstants.STAKEABLELOCKOUTID) {\r\n                let locktime = (out as StakeableLockOut).getStakeableLocktime();\r\n                if (locktime.lte(unixNow)) {\r\n                    unlocked.iadd(amount);\r\n                } else {\r\n                    lockedStakeable = lockedStakeable.add(amount);\r\n                }\r\n            } else {\r\n                let locktime = (out as AmountOutput).getLocktime();\r\n                if (locktime.lte(unixNow)) {\r\n                    unlocked.iadd(amount);\r\n                } else {\r\n                    locked.iadd(amount);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            unlocked,\r\n            locked,\r\n            lockedStakeable: lockedStakeable,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Exports AVAX from P chain to X chain\r\n     * @remarks\r\n     * The export fee is added automatically to the amount. Make sure the exported amount includes the import fee for the destination chain.\r\n     *\r\n     * @param amt amount of nAVAX to transfer. Fees excluded.\r\n     * @param destinationChain Either `X` or `C`\r\n     * @return returns the transaction id.\r\n     */\r\n    async exportPChain(amt: BN, destinationChain: ExportChainsP) {\r\n        let pChangeAddr = this.getAddressP();\r\n        let fromAddrs = await this.getAllAddressesP();\r\n\r\n        const destinationAddr = destinationChain === 'X' ? this.getAddressX() : this.getEvmAddressBech();\r\n\r\n        let utxoSet = this.utxosP;\r\n\r\n        const exportTx = await buildPlatformExportTransaction(\r\n            utxoSet,\r\n            fromAddrs,\r\n            destinationAddr,\r\n            amt,\r\n            pChangeAddr,\r\n            destinationChain\r\n        );\r\n\r\n        let tx = await this.signP(exportTx);\r\n        let txId = await avalanche().PChain().issueTx(tx);\r\n        await waitTxP(txId);\r\n\r\n        await this.updateUtxosP();\r\n\r\n        return txId;\r\n    }\r\n\r\n    /***\r\n     * Estimates the required fee for a C chain export transaction\r\n     * @param destinationChain Either `X` or `P`\r\n     * @param baseFee Current base fee of the network, use a padded amount.\r\n     * @return BN C chain atomic export transaction fee in nAVAX.\r\n     */\r\n    estimateAtomicFeeExportC(destinationChain: ExportChainsC, baseFee: BN): BN {\r\n        let destinationAddr = destinationChain === 'X' ? this.getAddressX() : this.getAddressP();\r\n        const hexAddr = this.getAddressC();\r\n        // The amount does not effect the fee that much\r\n        const amt = new BN(0);\r\n        const gas = estimateExportGasFeeFromMockTx(destinationChain, amt, hexAddr, destinationAddr);\r\n        return avaxCtoX(baseFee.mul(new BN(gas)));\r\n    }\r\n\r\n    /**\r\n     * Exports AVAX from C chain to X chain\r\n     * @remarks\r\n     * Make sure the exported `amt` includes the import fee for the destination chain.\r\n     *\r\n     * @param amt amount of nAVAX to transfer\r\n     * @param destinationChain either `X` or `P`\r\n     * @param exportFee Export fee in nAVAX\r\n     * @return returns the transaction id.\r\n     */\r\n    async exportCChain(amt: BN, destinationChain: ExportChainsC, exportFee?: BN): Promise<string> {\r\n        let hexAddr = this.getAddressC();\r\n        let bechAddr = this.getEvmAddressBech();\r\n\r\n        let fromAddresses = [hexAddr];\r\n        let destinationAddr = destinationChain === 'X' ? this.getAddressX() : this.getAddressP();\r\n\r\n        // Calculate export fee if it's not given.\r\n        if (!exportFee) {\r\n            const gas = estimateExportGasFeeFromMockTx(destinationChain, amt, hexAddr, destinationAddr);\r\n            const baseFee = await getBaseFeeRecommended();\r\n            exportFee = avaxCtoX(baseFee.mul(new BN(gas)));\r\n        }\r\n\r\n        let exportTx = await buildEvmExportTransaction(\r\n            fromAddresses,\r\n            destinationAddr,\r\n            amt,\r\n            bechAddr,\r\n            destinationChain,\r\n            exportFee\r\n        );\r\n\r\n        let tx = await this.signC(exportTx);\r\n\r\n        let txId = await avalanche().CChain().issueTx(tx);\r\n\r\n        await waitTxC(txId);\r\n\r\n        await this.updateAvaxBalanceC();\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     * Exports AVAX from X chain to either P or C chain\r\n     * @remarks\r\n     * The export fee will be added to the amount automatically. Make sure the exported amount has the import fee for the destination chain.\r\n     *\r\n     * @param amt amount of nAVAX to transfer\r\n     * @param destinationChain Which chain to export to.\r\n     * @return returns the transaction id.\r\n     */\r\n    async exportXChain(amt: BN, destinationChain: ExportChainsX) {\r\n        let destinationAddr = destinationChain === 'P' ? this.getAddressP() : this.getEvmAddressBech();\r\n\r\n        let fromAddresses = await this.getAllAddressesX();\r\n        let changeAddress = this.getChangeAddressX();\r\n        let utxos = this.utxosX;\r\n        let exportTx = await buildAvmExportTransaction(\r\n            destinationChain,\r\n            utxos,\r\n            fromAddresses,\r\n            destinationAddr,\r\n            amt,\r\n            changeAddress\r\n        );\r\n\r\n        let tx = await this.signX(exportTx);\r\n\r\n        let txId = await avalanche().XChain().issueTx(tx);\r\n        await waitTxX(txId);\r\n\r\n        // Update UTXOs\r\n        await this.updateUtxosX();\r\n\r\n        return txId;\r\n    }\r\n\r\n    async getAtomicUTXOsX(sourceChain: ExportChainsX) {\r\n        let addrs = await this.getAllAddressesX();\r\n        let result = await avmGetAtomicUTXOs(addrs, sourceChain);\r\n        return result;\r\n    }\r\n\r\n    async getAtomicUTXOsP(sourceChain: ExportChainsP): Promise<PlatformUTXOSet> {\r\n        let addrs = await this.getAllAddressesP();\r\n        return await platformGetAtomicUTXOs(addrs, sourceChain);\r\n    }\r\n\r\n    async getAtomicUTXOsC(sourceChain: ExportChainsC) {\r\n        const bechAddr = this.getEvmAddressBech();\r\n        return await evmGetAtomicUTXOs([bechAddr], sourceChain);\r\n    }\r\n\r\n    /**\r\n     * Imports atomic X chain UTXOs to the current active X chain address\r\n     * @param sourceChain The chain to import from, either `P` or `C`\r\n     */\r\n    async importX(sourceChain: ExportChainsX) {\r\n        const utxoSet = await this.getAtomicUTXOsX(sourceChain);\r\n\r\n        if (utxoSet.getAllUTXOs().length === 0) {\r\n            throw new Error('Nothing to import.');\r\n        }\r\n\r\n        let xToAddr = this.getAddressX();\r\n\r\n        let hrp = avalanche().getHRP();\r\n        let utxoAddrs = utxoSet.getAddresses().map((addr) => bintools.addressToString(hrp, 'X', addr));\r\n\r\n        let fromAddrs = utxoAddrs;\r\n        let ownerAddrs = utxoAddrs;\r\n\r\n        const sourceChainId = chainIdFromAlias(sourceChain);\r\n\r\n        // Owner addresses, the addresses we exported to\r\n        const unsignedTx = await avalanche()\r\n            .XChain()\r\n            .buildImportTx(utxoSet, ownerAddrs, sourceChainId, [xToAddr], fromAddrs, [xToAddr]);\r\n\r\n        const tx = await this.signX(unsignedTx);\r\n        const txId = await avalanche().XChain().issueTx(tx);\r\n\r\n        await waitTxX(txId);\r\n\r\n        // Update UTXOs\r\n        await this.updateUtxosX();\r\n\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     * Import utxos in atomic memory to the P chain.\r\n     * @param sourceChain Either `X` or `C`\r\n     * @param [toAddress] The destination P chain address assets will get imported to. Defaults to the P chain address of the wallet.\r\n     */\r\n    async importP(sourceChain: ExportChainsP, toAddress?: string): Promise<string> {\r\n        const utxoSet = await this.getAtomicUTXOsP(sourceChain);\r\n\r\n        if (utxoSet.getAllUTXOs().length === 0) {\r\n            throw new Error('Nothing to import.');\r\n        }\r\n\r\n        // Owner addresses, the addresses we exported to\r\n        let walletAddrP = this.getAddressP();\r\n\r\n        let hrp = avalanche().getHRP();\r\n        let utxoAddrs = utxoSet.getAddresses().map((addr) => bintools.addressToString(hrp, 'P', addr));\r\n\r\n        let ownerAddrs = utxoAddrs;\r\n\r\n        if (!toAddress) {\r\n            toAddress = walletAddrP;\r\n        }\r\n\r\n        const sourceChainId = chainIdFromAlias(sourceChain);\r\n\r\n        const unsignedTx = await avalanche()\r\n            .PChain()\r\n            .buildImportTx(\r\n                utxoSet,\r\n                ownerAddrs,\r\n                sourceChainId,\r\n                [toAddress],\r\n                ownerAddrs,\r\n                [walletAddrP],\r\n                undefined,\r\n                undefined\r\n            );\r\n        const tx = await this.signP(unsignedTx);\r\n        const txId = await avalanche().PChain().issueTx(tx);\r\n\r\n        await waitTxP(txId);\r\n\r\n        await this.updateUtxosP();\r\n\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param sourceChain Which chain to import from. `X` or `P`\r\n     * @param [fee] The import fee to use in the transactions. If omitted the SDK will try to calculate the fee. For deterministic transactions you should always pre calculate and provide this value.\r\n     * @param [utxoSet] If omitted imports all atomic UTXOs.\r\n     */\r\n    async importC(sourceChain: ExportChainsC, fee?: BN, utxoSet?: EVMUTXOSet) {\r\n        let bechAddr = this.getEvmAddressBech();\r\n\r\n        if (!utxoSet) {\r\n            utxoSet = await this.getAtomicUTXOsC(sourceChain);\r\n        }\r\n\r\n        const utxos = utxoSet.getAllUTXOs();\r\n        if (utxos.length === 0) {\r\n            throw new Error('Nothing to import.');\r\n        }\r\n\r\n        let toAddress = this.getAddressC();\r\n        let ownerAddresses = [bechAddr];\r\n        const sourceChainId = chainIdFromAlias(sourceChain);\r\n\r\n        // Calculate fee if not provided\r\n        if (!fee) {\r\n            // Calculate number of signatures\r\n            const numSigs = utxos.reduce((acc, utxo) => {\r\n                return acc + utxo.getOutput().getAddresses().length;\r\n            }, 0);\r\n            const numIns = utxos.length;\r\n\r\n            const importGas = estimateImportGasFeeFromMockTx(numIns, numSigs);\r\n            const baseFee = await getBaseFeeRecommended();\r\n            fee = avaxCtoX(baseFee.mul(new BN(importGas)));\r\n        }\r\n\r\n        const unsignedTx = await avalanche()\r\n            .CChain()\r\n            .buildImportTx(utxoSet, toAddress, ownerAddresses, sourceChainId, fee);\r\n        let tx = await this.signC(unsignedTx);\r\n        let id = await avalanche().CChain().issueTx(tx);\r\n\r\n        await waitTxC(id);\r\n\r\n        await this.updateAvaxBalanceC();\r\n\r\n        return id;\r\n    }\r\n\r\n    async createNftFamily(name: string, symbol: string, groupNum: number) {\r\n        let fromAddresses = await this.getAllAddressesX();\r\n        let changeAddress = this.getChangeAddressX();\r\n\r\n        let minterAddress = this.getAddressX();\r\n\r\n        let utxoSet = this.utxosX;\r\n\r\n        let unsignedTx = await buildCreateNftFamilyTx(\r\n            name,\r\n            symbol,\r\n            groupNum,\r\n            fromAddresses,\r\n            minterAddress,\r\n            changeAddress,\r\n            utxoSet\r\n        );\r\n\r\n        let signed = await this.signX(unsignedTx);\r\n        const txId = await avalanche().XChain().issueTx(signed);\r\n        return await waitTxX(txId);\r\n    }\r\n\r\n    async mintNft(mintUtxo: AVMUTXO, payload: PayloadBase, quantity: number) {\r\n        let ownerAddress = this.getAddressX();\r\n        let changeAddress = this.getChangeAddressX();\r\n\r\n        let sourceAddresses = await this.getAllAddressesX();\r\n\r\n        let utxoSet = this.utxosX;\r\n        let tx = await buildMintNftTx(\r\n            mintUtxo,\r\n            payload,\r\n            quantity,\r\n            ownerAddress,\r\n            changeAddress,\r\n            sourceAddresses,\r\n            utxoSet\r\n        );\r\n        let signed = await this.signX(tx);\r\n        const txId = await avalanche().XChain().issueTx(signed);\r\n        return await waitTxX(txId);\r\n    }\r\n\r\n    /**\r\n     * Adds a validator to the network using the given node id.\r\n     *\r\n     * @param nodeID The node id you are adding as a validator\r\n     * @param amt Amount of AVAX to stake in nAVAX\r\n     * @param start Validation period start date\r\n     * @param end Validation period end date\r\n     * @param delegationFee Minimum 2%\r\n     * @param rewardAddress P chain address to send staking rewards\r\n     * @param utxos\r\n     *\r\n     * @return Transaction id\r\n     */\r\n    async validate(\r\n        nodeID: string,\r\n        amt: BN,\r\n        start: Date,\r\n        end: Date,\r\n        delegationFee: number,\r\n        rewardAddress?: string,\r\n        utxos?: PlatformUTXO[]\r\n    ): Promise<string> {\r\n        let utxoSet = this.utxosP;\r\n\r\n        // If given custom UTXO set use that\r\n        if (utxos) {\r\n            utxoSet = new PlatformUTXOSet();\r\n            utxoSet.addArray(utxos);\r\n        }\r\n\r\n        let pAddressStrings = await this.getAllAddressesP();\r\n\r\n        let stakeAmount = amt;\r\n\r\n        // If reward address isn't given use index 0 address\r\n        if (!rewardAddress) {\r\n            rewardAddress = this.getAddressP();\r\n        }\r\n\r\n        // For change address use first available on the platform chain\r\n        let changeAddress = this.getAddressP();\r\n\r\n        let stakeReturnAddr = this.getAddressP();\r\n\r\n        // Convert dates to unix time\r\n        let startTime = new BN(Math.round(start.getTime() / 1000));\r\n        let endTime = new BN(Math.round(end.getTime() / 1000));\r\n\r\n        const unsignedTx = await avalanche().PChain().buildAddValidatorTx(\r\n            utxoSet,\r\n            [stakeReturnAddr],\r\n            pAddressStrings, // from\r\n            [changeAddress], // change\r\n            nodeID,\r\n            startTime,\r\n            endTime,\r\n            stakeAmount,\r\n            [rewardAddress],\r\n            delegationFee\r\n        );\r\n\r\n        let tx = await this.signP(unsignedTx);\r\n        const txId = await avalanche().PChain().issueTx(tx);\r\n        await waitTxP(txId);\r\n\r\n        this.updateUtxosP();\r\n\r\n        return txId;\r\n    }\r\n\r\n    async delegate(\r\n        nodeID: string,\r\n        amt: BN,\r\n        start: Date,\r\n        end: Date,\r\n        rewardAddress?: string,\r\n        utxos?: PlatformUTXO[]\r\n    ): Promise<string> {\r\n        let utxoSet = this.utxosP;\r\n        let pAddressStrings = await this.getAllAddressesP();\r\n\r\n        let stakeAmount = amt;\r\n\r\n        // If given custom UTXO set use that\r\n        if (utxos) {\r\n            utxoSet = new PlatformUTXOSet();\r\n            utxoSet.addArray(utxos);\r\n        }\r\n\r\n        // If reward address isn't given use current P address\r\n        if (!rewardAddress) {\r\n            rewardAddress = this.getAddressP();\r\n        }\r\n\r\n        let stakeReturnAddr = this.getAddressP();\r\n\r\n        // For change address use the current platform chain\r\n        let changeAddress = this.getAddressP();\r\n\r\n        // Convert dates to unix time\r\n        let startTime = new BN(Math.round(start.getTime() / 1000));\r\n        let endTime = new BN(Math.round(end.getTime() / 1000));\r\n\r\n        const unsignedTx = await avalanche().PChain().buildAddDelegatorTx(\r\n            utxoSet,\r\n            [stakeReturnAddr],\r\n            pAddressStrings,\r\n            [changeAddress],\r\n            nodeID,\r\n            startTime,\r\n            endTime,\r\n            stakeAmount,\r\n            [rewardAddress] // reward address\r\n        );\r\n\r\n        const tx = await this.signP(unsignedTx);\r\n        const txId = await avalanche().PChain().issueTx(tx);\r\n        await waitTxP(txId);\r\n\r\n        this.updateUtxosP();\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     * Issues the given transaction.\r\n     * @param tx A universal transaction json object.\r\n     */\r\n    public async issueUniversalTx(tx: UniversalTx): Promise<string> {\r\n        switch (tx.action) {\r\n            case 'export_x_c':\r\n                return await this.exportXChain(tx.amount, 'C');\r\n            case 'import_x_c':\r\n                return await this.importC('X', tx.fee);\r\n            case 'export_x_p':\r\n                return await this.exportXChain(tx.amount, 'P');\r\n            case 'import_x_p':\r\n                return await this.importP('X');\r\n            case 'export_c_x':\r\n                return await this.exportCChain(tx.amount, 'X', tx.fee);\r\n            case 'import_c_x':\r\n                return await this.importX('C');\r\n            case 'export_c_p':\r\n                return await this.exportCChain(tx.amount, 'P', tx.fee);\r\n            case 'import_c_p':\r\n                return await this.importP('C');\r\n            case 'export_p_x':\r\n                return await this.exportPChain(tx.amount, 'X');\r\n            case 'import_p_x':\r\n                return await this.importX('P');\r\n            case 'export_p_c':\r\n                return await this.exportPChain(tx.amount, 'C');\r\n            case 'import_p_c':\r\n                return await this.importC('P', tx.fee);\r\n            default:\r\n                throw new Error('Method not supported.');\r\n        }\r\n    }\r\n\r\n    async getHistoryX(limit = 0): Promise<OrteliusAvalancheTx[]> {\r\n        let addrs = await this.getAllAddressesX();\r\n        return await getAddressHistory(addrs, limit, avalanche().XChain().getBlockchainID());\r\n    }\r\n\r\n    async getHistoryP(limit = 0): Promise<OrteliusAvalancheTx[]> {\r\n        let addrs = await this.getAllAddressesP();\r\n        return await getAddressHistory(addrs, limit, avalanche().PChain().getBlockchainID());\r\n    }\r\n\r\n    /**\r\n     * Returns atomic history for this wallet on the C chain.\r\n     * @remarks Excludes EVM transactions.\r\n     * @param limit\r\n     */\r\n    async getHistoryC(limit = 0): Promise<OrteliusAvalancheTx[]> {\r\n        let addrs = [this.getEvmAddressBech(), ...(await this.getAllAddressesX())];\r\n        return await getAddressHistory(addrs, limit, avalanche().CChain().getBlockchainID());\r\n    }\r\n\r\n    /**\r\n     * Returns history for this wallet on the C chain.\r\n     * @remarks Excludes atomic C chain import/export transactions.\r\n     */\r\n    async getHistoryEVM() {\r\n        let addr = this.getAddressC();\r\n        return await getAddressHistoryEVM(addr);\r\n    }\r\n\r\n    /**\r\n     * Returns the erc 20 activity for this wallet's C chain address. Uses Snowtrace APIs.\r\n     * @param offset Number of items per page. Optional.\r\n     * @param page If provided will paginate the results. Optional.\r\n     * @param contractAddress Filter activity by the ERC20 contract address. Optional.\r\n     */\r\n    async getHistoryERC20(page?: number, offset?: number, contractAddress?: string) {\r\n        const erc20Hist = await getErc20History(this.getAddressC(), activeNetwork, page, offset, contractAddress);\r\n        return erc20Hist;\r\n    }\r\n\r\n    /**\r\n     * Get a list of 'Normal' Transactions for wallet's C chain address. Uses Snowtrace APIs.\r\n     * @param offset Number of items per page. Optional.\r\n     * @param page If provided will paginate the results. Optional.\r\n     */\r\n    async getHistoryNormalTx(page?: number, offset?: number) {\r\n        const normalHist = await getNormalHistory(this.getAddressC(), activeNetwork, page, offset);\r\n        return normalHist;\r\n    }\r\n\r\n    async getHistory(limit: number = 0): Promise<HistoryItemType[]> {\r\n        let [txsX, txsP, txsC] = await Promise.all([\r\n            this.getHistoryX(limit),\r\n            this.getHistoryP(limit),\r\n            this.getHistoryC(limit),\r\n        ]);\r\n\r\n        let txsXPC = filterDuplicateOrtelius(txsX.concat(txsP, txsC));\r\n\r\n        let txsEVM = await this.getHistoryEVM();\r\n\r\n        let addrsX = await this.getAllAddressesX();\r\n        let addrBechC = this.getEvmAddressBech();\r\n        let addrs = [...addrsX, addrBechC];\r\n\r\n        let addrC = this.getAddressC();\r\n\r\n        // Parse X,P,C transactions\r\n        // Have to loop because of the asynchronous call\r\n        let parsedXPC = [];\r\n        for (let i = 0; i < txsXPC.length; i++) {\r\n            let tx = txsXPC[i];\r\n            try {\r\n                let summary = await getTransactionSummary(tx, addrs, addrC);\r\n                parsedXPC.push(summary);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n\r\n        // Parse EVM Transactions\r\n        let parsedEVM = txsEVM.map((tx) => getTransactionSummaryEVM(tx, addrC));\r\n\r\n        // Sort and join X,P,C transactions\r\n        let parsedAll = [...parsedXPC, ...parsedEVM];\r\n        let txsSorted = parsedAll.sort((x, y) => (x.timestamp.getTime() < y.timestamp.getTime() ? 1 : -1));\r\n\r\n        // If there is a limit only return that much\r\n        if (limit > 0) {\r\n            return txsSorted.slice(0, limit);\r\n        }\r\n        return txsSorted;\r\n    }\r\n\r\n    /**\r\n     * Fetches information about the given txId and parses it from the wallet's perspective\r\n     * @param txId\r\n     */\r\n    async getHistoryTx(txId: string): Promise<HistoryItemType> {\r\n        let addrs = await this.getAllAddressesX();\r\n        let addrC = this.getAddressC();\r\n\r\n        let rawData = await getTx(txId);\r\n        return await getTransactionSummary(rawData, addrs, addrC);\r\n    }\r\n\r\n    /**\r\n     * Fetches information about the given txId and parses it from the wallet's perspective\r\n     * @param txHash\r\n     */\r\n    async getHistoryTxEvm(txHash: string): Promise<HistoryItemType> {\r\n        let addrC = this.getAddressC();\r\n\r\n        let rawData = await getTxEvm(txHash);\r\n        return getTransactionSummaryEVM(rawData, addrC);\r\n    }\r\n\r\n    async parseOrteliusTx(tx: OrteliusAvalancheTx): Promise<HistoryItemType> {\r\n        let addrsX = await this.getAllAddressesX();\r\n        let addrBechC = this.getEvmAddressBech();\r\n        let addrs = [...addrsX, addrBechC];\r\n        let addrC = this.getAddressC();\r\n        return await getTransactionSummary(tx, addrs, addrC);\r\n    }\r\n}\r\n","import * as bip32 from 'bip32';\r\nimport { activeNetwork, avalanche } from '@/Network/network';\r\nimport { KeyPair as AVMKeyPair, KeyChain as AVMKeyChain } from '@c4tplatform/caminojs/dist/apis/avm/keychain';\r\nimport { KeyChain as PlatformKeyChain, KeyPair as PlatformKeyPair } from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { HdChainType } from './types';\r\nimport { Buffer } from '@c4tplatform/caminojs/dist';\r\nimport {\r\n    DERIVATION_SLEEP_INTERVAL,\r\n    HD_SCAN_GAP_SIZE,\r\n    HD_SCAN_LOOK_UP_WINDOW,\r\n    SCAN_RANGE,\r\n    SCAN_SIZE,\r\n} from './constants';\r\nimport { getAddressChains } from '@/Explorer';\r\nimport { NO_NETWORK } from '@/errors';\r\nimport { bintools } from '@/common';\r\nimport { sleep } from '@/utils';\r\n\r\ntype AddressCache = {\r\n    [index: string]: bip32.BIP32Interface;\r\n};\r\n\r\ntype KeyCacheX = {\r\n    [index: string]: AVMKeyPair;\r\n};\r\n\r\ntype KeyCacheP = {\r\n    [index: string]: PlatformKeyPair;\r\n};\r\n\r\n// Each HD wallet has 2 HdScaners, one for internal chain, one for external\r\nexport class HdScanner {\r\n    protected index = 0;\r\n    protected addressCache: AddressCache = {};\r\n    protected keyCacheX: KeyCacheX = {};\r\n    protected keyCacheP: KeyCacheP = {};\r\n    readonly changePath: string;\r\n    private avmAddrFactory: AVMKeyPair;\r\n    readonly accountKey: bip32.BIP32Interface;\r\n\r\n    constructor(accountKey: bip32.BIP32Interface, isInternal = true) {\r\n        this.changePath = isInternal ? '1' : '0';\r\n        this.accountKey = accountKey;\r\n        // We need an instance of an AVM key to generate adddresses from public keys\r\n        let hrp = avalanche().getHRP();\r\n        this.avmAddrFactory = new AVMKeyPair(hrp, 'X');\r\n    }\r\n\r\n    getIndex() {\r\n        return this.index;\r\n    }\r\n\r\n    setIndex(index: number) {\r\n        let round = Math.floor(index);\r\n        if (round < 0) throw new Error('A derivation index can not be less than 0.');\r\n        this.index = round;\r\n    }\r\n\r\n    public increment(): number {\r\n        return this.index++;\r\n    }\r\n\r\n    public getAddressX() {\r\n        return this.getAddressForIndex(this.index, 'X');\r\n    }\r\n\r\n    public getAddressP() {\r\n        return this.getAddressForIndex(this.index, 'P');\r\n    }\r\n\r\n    /**\r\n     * Returns every address up to and including the current index.\r\n     * @param chainId Either X or P\r\n     */\r\n    public async getAllAddresses(chainId: HdChainType = 'X'): Promise<string[]> {\r\n        let upTo = this.index;\r\n        return await this.getAddressesInRange(0, upTo + 1, chainId);\r\n    }\r\n\r\n    /**\r\n     * Returns every address up to and including the current index synchronously.\r\n     * @param chainId Either X or P\r\n     */\r\n    public getAllAddressesSync(chainId: HdChainType = 'X'): string[] {\r\n        let upTo = this.index;\r\n        return this.getAddressesInRangeSync(0, upTo + 1, chainId);\r\n    }\r\n\r\n    /**\r\n     * Returns addresses in the given range\r\n     * @param start Start index\r\n     * @param end End index, exclusive\r\n     * @param chainId  `X` or `P` optional, returns X by default\r\n     */\r\n    public async getAddressesInRange(start: number, end: number, chainId: HdChainType = 'X'): Promise<string[]> {\r\n        let res = [];\r\n        for (let i = start; i < end; i++) {\r\n            res.push(this.getAddressForIndex(i, chainId));\r\n\r\n            // Sleep every Nth address to open up the thread\r\n            if ((i - start) % DERIVATION_SLEEP_INTERVAL === 0) {\r\n                await sleep(0);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Returns addresses in the given range\r\n     * @param start Start index\r\n     * @param end End index, exclusive\r\n     * @param chainId  `X` or `P` optional, returns X by default\r\n     */\r\n    public getAddressesInRangeSync(start: number, end: number, chainId: HdChainType = 'X'): string[] {\r\n        let res = [];\r\n        for (let i = start; i < end; i++) {\r\n            res.push(this.getAddressForIndex(i, chainId));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    getKeyChainX(): AVMKeyChain {\r\n        let keychain = avalanche().XChain().newKeyChain();\r\n        for (let i = 0; i <= this.index; i++) {\r\n            let key = this.getKeyForIndexX(i);\r\n            keychain.addKey(key);\r\n        }\r\n        return keychain;\r\n    }\r\n\r\n    getKeyChainP(): PlatformKeyChain {\r\n        let keychain = avalanche().PChain().newKeyChain();\r\n        for (let i = 0; i <= this.index; i++) {\r\n            let key = this.getKeyForIndexP(i);\r\n            keychain.addKey(key);\r\n        }\r\n        return keychain;\r\n    }\r\n\r\n    getKeyForIndexX(index: number): AVMKeyPair {\r\n        let cache = this.keyCacheX[index];\r\n        if (cache) return cache;\r\n\r\n        let hdKey = this.getHdKeyForIndex(index);\r\n        let pkHex = hdKey.privateKey!.toString('hex');\r\n\r\n        let pkBuf: Buffer = new Buffer(pkHex, 'hex');\r\n\r\n        let keychain = avalanche().XChain().newKeyChain();\r\n        let keypair = keychain.importKey(pkBuf);\r\n\r\n        this.keyCacheX[index] = keypair;\r\n        return keypair;\r\n    }\r\n\r\n    getKeyForIndexP(index: number): PlatformKeyPair {\r\n        let cache = this.keyCacheP[index];\r\n        if (cache) return cache;\r\n\r\n        let hdKey = this.getHdKeyForIndex(index);\r\n        let pkHex = hdKey.privateKey!.toString('hex');\r\n\r\n        let pkBuf: Buffer = new Buffer(pkHex, 'hex');\r\n\r\n        let keychain = avalanche().PChain().newKeyChain();\r\n        let keypair = keychain.importKey(pkBuf);\r\n\r\n        this.keyCacheP[index] = keypair;\r\n\r\n        return keypair;\r\n    }\r\n\r\n    private getHdKeyForIndex(index: number): bip32.BIP32Interface {\r\n        let key: bip32.BIP32Interface;\r\n        if (this.addressCache[index]) {\r\n            key = this.addressCache[index];\r\n        } else {\r\n            key = this.accountKey.derivePath(`${this.changePath}/${index}`);\r\n            this.addressCache[index] = key;\r\n        }\r\n        return key;\r\n    }\r\n\r\n    public getAddressForIndex(index: number, chainId: HdChainType = 'X'): string {\r\n        let key = this.getHdKeyForIndex(index);\r\n\r\n        let publicKey = key.publicKey.toString('hex');\r\n        let publicKeyBuff = Buffer.from(publicKey, 'hex');\r\n\r\n        let hrp = avalanche().getHRP();\r\n\r\n        let addrBuf = AVMKeyPair.addressFromPublicKey(publicKeyBuff);\r\n        let addr = bintools.addressToString(hrp, chainId, addrBuf);\r\n\r\n        return addr;\r\n    }\r\n\r\n    // Uses the explorer to scan used addresses and find its starting index\r\n    public async resetIndex(startIndex = 0): Promise<number> {\r\n        if (!activeNetwork) throw NO_NETWORK;\r\n\r\n        let index;\r\n        if (activeNetwork.explorerURL) {\r\n            index = await this.findAvailableIndexExplorer(startIndex);\r\n        } else {\r\n            index = await this.findAvailableIndexNode(startIndex);\r\n        }\r\n        this.index = index;\r\n        return index;\r\n    }\r\n\r\n    // Scans the address space of this hd path and finds the last used index using the\r\n    // explorer API.\r\n    private async findAvailableIndexExplorer(startIndex = 0): Promise<number> {\r\n        let addrs = await this.getAddressesInRange(startIndex, startIndex + HD_SCAN_LOOK_UP_WINDOW);\r\n        let addrChains = await getAddressChains(addrs);\r\n\r\n        for (let i = 0; i < addrs.length - HD_SCAN_GAP_SIZE; i++) {\r\n            let gapSize: number = 0;\r\n\r\n            for (let n = 0; n < HD_SCAN_GAP_SIZE; n++) {\r\n                let scanIndex = i + n;\r\n                let scanAddr = addrs[scanIndex];\r\n\r\n                let rawAddr = scanAddr.split('-')[1];\r\n                let chains: string[] = addrChains[rawAddr];\r\n\r\n                if (!chains) {\r\n                    // If doesnt exist on any chain\r\n                    gapSize++;\r\n                } else {\r\n                    i = i + n;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // If the gap is reached return the index\r\n            if (gapSize === HD_SCAN_GAP_SIZE) {\r\n                return startIndex + i;\r\n            }\r\n        }\r\n\r\n        return await this.findAvailableIndexExplorer(startIndex + (HD_SCAN_LOOK_UP_WINDOW - HD_SCAN_GAP_SIZE));\r\n    }\r\n\r\n    // Uses the node to find last used HD index\r\n    // Only used when there is no explorer API available\r\n    private async findAvailableIndexNode(start = 0): Promise<number> {\r\n        let addrsX: string[] = [];\r\n        let addrsP: string[] = [];\r\n\r\n        // Get keys for indexes start to start+scan_size\r\n        for (let i: number = start; i < start + SCAN_SIZE; i++) {\r\n            let addressX = this.getAddressForIndex(i, 'X');\r\n            let addressP = this.getAddressForIndex(i, 'P');\r\n            addrsX.push(addressX);\r\n            addrsP.push(addressP);\r\n        }\r\n\r\n        let utxoSetX = (await avalanche().XChain().getUTXOs(addrsX)).utxos;\r\n        let utxoSetP = (await avalanche().PChain().getUTXOs(addrsP)).utxos;\r\n\r\n        // Scan UTXOs of these indexes and try to find a gap of HD_SCAN_GAP_SIZE\r\n        for (let i: number = 0; i < addrsX.length - HD_SCAN_GAP_SIZE; i++) {\r\n            let gapSize: number = 0;\r\n            for (let n: number = 0; n < HD_SCAN_GAP_SIZE; n++) {\r\n                let scanIndex: number = i + n;\r\n                let addr: string = addrsX[scanIndex];\r\n                let addrBuf = bintools.parseAddress(addr, 'X');\r\n                let addrUTXOsX: string[] = utxoSetX.getUTXOIDs([addrBuf]);\r\n                let addrUTXOsP: string[] = utxoSetP.getUTXOIDs([addrBuf]);\r\n                if (addrUTXOsX.length === 0 && addrUTXOsP.length === 0) {\r\n                    gapSize++;\r\n                } else {\r\n                    // Potential improvement\r\n                    i = i + n;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // If we found a gap of 20, we can return the last fullIndex+1\r\n            if (gapSize === HD_SCAN_GAP_SIZE) {\r\n                let targetIndex = start + i;\r\n                return targetIndex;\r\n            }\r\n        }\r\n        return await this.findAvailableIndexNode(start + SCAN_RANGE);\r\n    }\r\n}\r\n","import { WalletProvider } from '@/Wallet/Wallet';\r\nimport { HdScanner } from '@/Wallet/HdScanner';\r\nimport { UTXOSet as AVMUTXOSet } from '@c4tplatform/caminojs/dist/apis/avm/utxos';\r\nimport { avalanche } from '@/Network/network';\r\nimport { UTXOSet as PlatformUTXOSet } from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { iHDWalletIndex } from '@/Wallet/types';\r\nimport { bintools } from '@/common';\r\nimport * as bip32 from 'bip32';\r\nimport { NetworkConfig } from '@/Network';\r\n\r\nexport abstract class HDWalletAbstract extends WalletProvider {\r\n    protected internalScan: HdScanner;\r\n    protected externalScan: HdScanner;\r\n    protected accountKey: bip32.BIP32Interface;\r\n    public isHdReady = false;\r\n\r\n    /**\r\n     *\r\n     * @param accountKey The bip32 HD node for path `m/44'/9000'/n'` where n is the desired account index.\r\n     * @protected\r\n     */\r\n    protected constructor(accountKey: bip32.BIP32Interface) {\r\n        super();\r\n\r\n        this.internalScan = new HdScanner(accountKey, true);\r\n        this.externalScan = new HdScanner(accountKey, false);\r\n        this.accountKey = accountKey;\r\n    }\r\n\r\n    protected onNetworkChange(config: NetworkConfig) {\r\n        super.onNetworkChange(config);\r\n\r\n        this.isHdReady = false;\r\n    }\r\n\r\n    /**\r\n     * Returns current index used for external address derivation.\r\n     */\r\n    public getExternalIndex(): number {\r\n        return this.externalScan.getIndex();\r\n    }\r\n\r\n    /**\r\n     * Returns current index used for internal address derivation.\r\n     */\r\n    public getInternalIndex(): number {\r\n        return this.internalScan.getIndex();\r\n    }\r\n\r\n    /**\r\n     * Gets the active external address on the X chain\r\n     * - The X address will change after every deposit.\r\n     */\r\n    public getAddressX(): string {\r\n        return this.externalScan.getAddressX();\r\n    }\r\n\r\n    /**\r\n     * Gets the active change address on the X chain\r\n     * - The change address will change after every transaction on the X chain.\r\n     */\r\n    public getChangeAddressX() {\r\n        return this.internalScan.getAddressX();\r\n    }\r\n\r\n    /**\r\n     * Gets the active address on the P chain\r\n     */\r\n    public getAddressP(): string {\r\n        return this.externalScan.getAddressP();\r\n    }\r\n\r\n    /**\r\n     * Returns every external X chain address used by the wallet up to now.\r\n     */\r\n    public async getExternalAddressesX(): Promise<string[]> {\r\n        return await this.externalScan.getAllAddresses('X');\r\n    }\r\n\r\n    /**\r\n     * Returns every external X chain address used by the wallet up to now.\r\n     */\r\n    public getExternalAddressesXSync(): string[] {\r\n        return this.externalScan.getAllAddressesSync('X');\r\n    }\r\n\r\n    /**\r\n     * Returns every internal X chain address used by the wallet up to now.\r\n     */\r\n    public async getInternalAddressesX(): Promise<string[]> {\r\n        return await this.internalScan.getAllAddresses('X');\r\n    }\r\n\r\n    /**\r\n     * Returns every internal X chain address used by the wallet up to now.\r\n     */\r\n    public getInternalAddressesXSync(): string[] {\r\n        return this.internalScan.getAllAddressesSync('X');\r\n    }\r\n\r\n    /**\r\n     * Returns every X chain address used by the wallet up to now (internal + external).\r\n     */\r\n    public async getAllAddressesX(): Promise<string[]> {\r\n        return [...(await this.getExternalAddressesX()), ...(await this.getInternalAddressesX())];\r\n    }\r\n\r\n    /**\r\n     * Returns every X chain address used by the wallet up to now (internal + external).\r\n     */\r\n    public getAllAddressesXSync(): string[] {\r\n        return [...this.getExternalAddressesXSync(), ...this.getInternalAddressesXSync()];\r\n    }\r\n\r\n    public async getExternalAddressesP(): Promise<string[]> {\r\n        return this.externalScan.getAllAddresses('P');\r\n    }\r\n\r\n    public getExternalAddressesPSync(): string[] {\r\n        return this.externalScan.getAllAddressesSync('P');\r\n    }\r\n\r\n    /**\r\n     * Returns every P chain address used by the wallet up to now.\r\n     */\r\n    public getAllAddressesP(): Promise<string[]> {\r\n        return this.getExternalAddressesP();\r\n    }\r\n\r\n    /**\r\n     * Returns every P chain address used by the wallet up to now.\r\n     */\r\n    public getAllAddressesPSync(): string[] {\r\n        return this.getExternalAddressesPSync();\r\n    }\r\n\r\n    /**\r\n     * Scans the network and initializes internal and external addresses on P and X chains.\r\n     * - Heavy operation\r\n     * - MUST use the explorer api to find the last used address\r\n     * - If explorer is not available it will use the connected node. This may result in invalid balances.\r\n     */\r\n    public async resetHdIndices(externalStart = 0, internalStart = 0): Promise<iHDWalletIndex> {\r\n        let promiseExt = this.externalScan.resetIndex(externalStart);\r\n        let promiseInt = this.internalScan.resetIndex(internalStart);\r\n\r\n        const [indexExt, indexInt] = await Promise.all([promiseExt, promiseInt]);\r\n\r\n        this.emitAddressChange();\r\n        this.isHdReady = true;\r\n        this.emitHdReady();\r\n\r\n        return {\r\n            internal: indexInt,\r\n            external: indexExt,\r\n        };\r\n    }\r\n\r\n    public setHdIndices(external: number, internal: number) {\r\n        this.externalScan.setIndex(external);\r\n        this.internalScan.setIndex(internal);\r\n\r\n        this.emitAddressChange();\r\n        this.isHdReady = true;\r\n        this.emitHdReady();\r\n    }\r\n\r\n    /**\r\n     * Emits an event to indicate the wallet has finishing calculating its last use address\r\n     * @protected\r\n     */\r\n    protected emitHdReady(): void {\r\n        this.emit('hd_ready', {\r\n            external: this.getExternalIndex(),\r\n            internal: this.getInternalIndex(),\r\n        });\r\n    }\r\n\r\n    public async updateUtxosX(): Promise<AVMUTXOSet> {\r\n        let utxosX = await super.updateUtxosX();\r\n\r\n        // If the current internal or external X address is in the utxo set, increment hd index\r\n        let utxoAddrs = utxosX.getAddresses();\r\n        let utxoAddrsStr = utxoAddrs.map((addr) => {\r\n            return bintools.addressToString(avalanche().getHRP(), 'X', addr);\r\n        });\r\n\r\n        let addrExternalX = this.getAddressX();\r\n        let addrInternalX = this.getChangeAddressX();\r\n\r\n        let isAddrChange = false;\r\n        // Increment external index if the current address is in the utxo set\r\n        if (utxoAddrsStr.includes(addrExternalX)) {\r\n            this.incrementExternal();\r\n            isAddrChange = true;\r\n        }\r\n\r\n        // Increment internal index if the current address is in the utxo set\r\n        if (utxoAddrsStr.includes(addrInternalX)) {\r\n            this.incrementInternal();\r\n            isAddrChange = true;\r\n        }\r\n\r\n        if (isAddrChange) this.emitAddressChange();\r\n\r\n        return utxosX;\r\n    }\r\n\r\n    private incrementExternal() {\r\n        this.externalScan.increment();\r\n    }\r\n\r\n    private incrementInternal() {\r\n        this.internalScan.increment();\r\n    }\r\n\r\n    public async updateUtxosP(): Promise<PlatformUTXOSet> {\r\n        let utxosP = await super.updateUtxosP();\r\n\r\n        // If the current P address is in the utxo set, increment hd index\r\n        let utxoAddrs = utxosP.getAddresses();\r\n        let utxoAddrsStr = utxoAddrs.map((addr) => {\r\n            return bintools.addressToString(avalanche().getHRP(), 'P', addr);\r\n        });\r\n\r\n        let addrExternalP = this.getAddressP();\r\n\r\n        // Increment external index if the current address is in the utxo set\r\n        if (utxoAddrsStr.includes(addrExternalP)) {\r\n            this.incrementExternal();\r\n            this.emitAddressChange();\r\n        }\r\n\r\n        return utxosP;\r\n    }\r\n\r\n    public getAddressAtIndexExternalX(index: number): string {\r\n        if (index < 0) throw new Error('Index must be >= 0');\r\n        return this.externalScan.getKeyForIndexX(index).getAddressString();\r\n    }\r\n\r\n    public getAddressAtIndexInternalX(index: number): string {\r\n        if (index < 0) throw new Error('Index must be >= 0');\r\n        return this.internalScan.getKeyForIndexX(index).getAddressString();\r\n    }\r\n\r\n    public getAddressAtIndexExternalP(index: number): string {\r\n        if (index < 0) throw new Error('Index must be >= 0');\r\n        return this.externalScan.getKeyForIndexP(index).getAddressString();\r\n    }\r\n}\r\n","import { BN, Buffer as BufferAvalanche } from '@c4tplatform/caminojs/dist';\r\nimport { avalanche, web3 } from '@/Network/network';\r\nimport { ethers } from 'ethers';\r\nimport { KeyPair as EVMKeyPair } from '@c4tplatform/caminojs/dist/apis/evm/keychain';\r\nimport { bintools } from '@/common';\r\nimport { computePublicKey, computeAddress } from 'ethers/lib/utils';\r\nimport { payments, ECPair, networks } from 'bitcoinjs-lib';\r\nimport { BTCNetworkType } from '@/Wallet';\r\nimport { buildEvmTransferErc721Tx, estimateErc721TransferGas } from '@/helpers/tx_helper';\r\n\r\nexport class EvmWalletReadonly {\r\n    balance = new BN(0);\r\n    address: string;\r\n    publicKey: string;\r\n    publicKeyBuff: Buffer;\r\n\r\n    /**\r\n     *\r\n     * @param publicKey 64 byte uncompressed public key. Starts with `0x`.\r\n     */\r\n    constructor(publicKey: string) {\r\n        this.publicKey = publicKey;\r\n        this.publicKeyBuff = Buffer.from(publicKey.substr(2), 'hex');\r\n        this.address = computeAddress(publicKey);\r\n    }\r\n\r\n    getBalance(): BN {\r\n        return this.balance;\r\n    }\r\n\r\n    getAddress(): string {\r\n        return ethers.utils.getAddress(this.address);\r\n    }\r\n\r\n    getCompressedPublicKey() {\r\n        return computePublicKey(this.publicKey, true);\r\n    }\r\n\r\n    getAddressBech32(): string {\r\n        const compressedKey = this.getCompressedPublicKey();\r\n        let addr = EVMKeyPair.addressFromPublicKey(BufferAvalanche.from(compressedKey.substring(2), 'hex'));\r\n        return bintools.addressToString(avalanche().getHRP(), 'C', addr);\r\n    }\r\n\r\n    /**\r\n     * Returns a native P2WPKH address with the prefix `bc1q`. This bitcoin address is\r\n     * derived from the same public key of the C chain address.\r\n     */\r\n    getAddressBTC(networkType: BTCNetworkType = 'bitcoin'): string {\r\n        let network;\r\n        if (networkType === 'bitcoin') {\r\n            network = networks.bitcoin;\r\n        } else if (networkType === 'testnet') {\r\n            network = networks.testnet;\r\n        } else {\r\n            network = networks.regtest;\r\n        }\r\n\r\n        const compressedBuff = Buffer.from(this.getCompressedPublicKey().substring(2), 'hex');\r\n        let ecPair = ECPair.fromPublicKey(compressedBuff);\r\n        let { address } = payments.p2wpkh({ pubkey: ecPair.publicKey, network });\r\n        if (!address) throw new Error('Unable to get BTC address.');\r\n        return address;\r\n    }\r\n\r\n    async updateBalance() {\r\n        let bal = await web3.eth.getBalance(this.address);\r\n        this.balance = new BN(bal);\r\n        return this.balance;\r\n    }\r\n\r\n    /**\r\n     * Builds an unsigned ERC721 transfer transaction from this wallet.\r\n     * @param contract The ERC721 Contract address\r\n     * @param tokenID Token ID\r\n     * @param to Recipient hex address.\r\n     * @param gasPrice Gas price in `BN`\r\n     * @param gasLimit Gas limit\r\n     */\r\n    buildErc721TransferTx(contract: string, tokenID: number, to: string, gasPrice: BN, gasLimit: number) {\r\n        return buildEvmTransferErc721Tx(this.getAddress(), to, gasPrice, gasLimit, contract, tokenID);\r\n    }\r\n\r\n    async estimateErc721TransferGasLimit(contract: string, to: string, tokenID: number) {\r\n        return estimateErc721TransferGas(contract, this.getAddress(), to, tokenID);\r\n    }\r\n}\r\n","import { HDWalletAbstract } from '@/Wallet/HDWalletAbstract';\r\nimport { UnsignedTx as EVMUnsignedTx, Tx as EVMTx } from '@c4tplatform/caminojs/dist/apis/evm';\r\nimport { UnsignedTx as PlatformUnsignedTx, Tx as PlatformTx } from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { UnsignedTx as AVMUnsignedTx, Tx as AVMTx } from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport { Transaction } from '@ethereumjs/tx';\r\nimport { WalletNameType } from '@/Wallet/types';\r\nimport { EvmWallet } from '@/Wallet/EVM/EvmWallet';\r\nimport { EvmWalletReadonly } from '@/Wallet/EVM/EvmWalletReadonly';\r\nimport * as bip32 from 'bip32';\r\nimport { computePublicKey } from 'ethers/lib/utils';\r\nimport { TypedDataV1, TypedMessage } from '@metamask/eth-sig-util';\r\n\r\nexport class PublicMnemonicWallet extends HDWalletAbstract {\r\n    /**\r\n     *\r\n     * @param xpubAVM of derivation path m/44'/9000'/n' where `n` is the account index\r\n     * @param xpubEVM of derivation path m/44'/60'/0'/0/n where `n` is the account index\r\n     */\r\n    constructor(xpubAVM: string, xpubEVM: string) {\r\n        let avmAcct = bip32.fromBase58(xpubAVM);\r\n        let evmAcct = bip32.fromBase58(xpubEVM);\r\n        super(avmAcct);\r\n        this.type = 'xpub';\r\n        const uncompressedKey = computePublicKey(evmAcct.publicKey);\r\n        this.evmWallet = new EvmWalletReadonly(uncompressedKey);\r\n    }\r\n\r\n    evmWallet: EvmWallet | EvmWalletReadonly;\r\n    type: WalletNameType;\r\n\r\n    //@ts-ignore\r\n    signC(tx: EVMUnsignedTx): Promise<EVMTx> {\r\n        throw new Error('Not supported.');\r\n    }\r\n\r\n    //@ts-ignore\r\n    signEvm(tx: Transaction): Promise<Transaction> {\r\n        throw new Error('Not supported.');\r\n    }\r\n    //@ts-ignore\r\n    signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\r\n        throw new Error('Not supported.');\r\n    }\r\n\r\n    //@ts-ignore\r\n    signX(tx: AVMUnsignedTx): Promise<AVMTx> {\r\n        throw new Error('Not supported.');\r\n    }\r\n\r\n    //@ts-ignore\r\n    async personalSign(data: string): Promise<string> {\r\n        throw new Error('Not supported.');\r\n    }\r\n\r\n    /**\r\n     * V1 is based upon an early version of EIP-712 that lacked some later security improvements, and should generally be neglected in favor of later versions.\r\n     * @param data The typed data to sign.\r\n     * */\r\n    //@ts-ignore\r\n    signTypedData_V1(data: TypedDataV1): Promise<string> {\r\n        throw new Error('Not supported.');\r\n    }\r\n\r\n    /**\r\n     * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\r\n     * @param data The typed data to sign.\r\n     */\r\n    //@ts-ignore\r\n    signTypedData_V3(data: TypedMessage<any>): Promise<string> {\r\n        throw new Error('Not supported.');\r\n    }\r\n\r\n    /**\r\n     * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\r\n     * @param data The typed data to sign.\r\n     */\r\n    //@ts-ignore\r\n    signTypedData_V4(data: TypedMessage<any>): Promise<string> {\r\n        throw new Error('Not supported.');\r\n    }\r\n}\r\n","import * as bip32 from 'bip32';\r\nimport Eth from '@ledgerhq/hw-app-eth';\r\n// @ts-ignore\r\nimport AppAvax from '@obsidiansystems/hw-app-avalanche';\r\nimport { MIN_EVM_SUPPORT_V } from '@/Wallet/constants';\r\nimport { ILedgerAppConfig } from '@/Wallet/types';\r\n\r\n/**\r\n *\r\n * @param xpub Extended public key for m/44'/60'/0'\r\n * @param index Index of the Eth address\r\n * @returns Extended public key for m/44'/60'/0'/0/n where `n` is the address index\r\n */\r\nexport function getEthAddressKeyFromAccountKey(xpub: string, index: number) {\r\n    const node = bip32.fromBase58(xpub).derivePath(`0/${index}`);\r\n    return node.toBase58();\r\n}\r\n\r\nexport function getAppAvax(transport: any): AppAvax {\r\n    return new AppAvax(transport, 'w0w');\r\n}\r\n\r\nexport function getAppEth(transport: any): Eth {\r\n    return new Eth(transport, 'w0w');\r\n}\r\n\r\nexport async function getLedgerConfigAvax(transport: any): Promise<ILedgerAppConfig> {\r\n    const app = getAppAvax(transport);\r\n    let config = await app.getAppConfiguration();\r\n\r\n    if (!config) {\r\n        throw new Error(`Unable to connect ledger. You must use ledger version ${MIN_EVM_SUPPORT_V} or above.`);\r\n    }\r\n\r\n    return config;\r\n}\r\n","export const ERR_TransportNotSet = new Error('Transport is not set.');\r\nexport const ERR_ConfigNotSet = new Error('Ledger configuration is not set.');\r\n","//@ts-ignore\r\nimport Eth from '@ledgerhq/hw-app-eth';\r\n// @ts-ignore\r\nimport { Chain, Common, Hardfork } from '@ethereumjs/common';\r\nimport { RLP } from '@ethereumjs/rlp';\r\nimport { AVAX_ACCOUNT_PATH, ETH_ACCOUNT_PATH, LEDGER_EXCHANGE_TIMEOUT, MIN_EVM_SUPPORT_V } from '@/Wallet/constants';\r\nimport HDKey from 'hdkey';\r\nimport { ChainAlias, ILedgerAppConfig, WalletNameType } from '@/Wallet/types';\r\nimport { Transaction, TxOptions } from '@ethereumjs/tx';\r\nimport {\r\n    UnsignedTx as AVMUnsignedTx,\r\n    Tx as AVMTx,\r\n    TransferableOperation,\r\n    OperationTx,\r\n    AVMConstants,\r\n    ImportTx as AVMImportTx,\r\n    SelectCredentialClass as AVMSelectCredentialClass,\r\n} from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport { Credential, SigIdx, Signature } from '@c4tplatform/caminojs/dist/common';\r\nimport {\r\n    UnsignedTx as EVMUnsignedTx,\r\n    Tx as EVMTx,\r\n    ImportTx as EVMImportTx,\r\n    ExportTx as EVMExportTx,\r\n    EVMInput,\r\n    SelectCredentialClass as EVMSelectCredentialClass,\r\n    EVMConstants,\r\n} from '@c4tplatform/caminojs/dist/apis/evm';\r\nimport {\r\n    UnsignedTx as PlatformUnsignedTx,\r\n    Tx as PlatformTx,\r\n    PlatformVMConstants,\r\n    ExportTx as PlatformExportTx,\r\n    ImportTx as PlatformImportTx,\r\n    SelectCredentialClass as PlatformSelectCredentialClass,\r\n} from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { activeNetwork, avalanche, web3 } from '@/Network/network';\r\nimport { Buffer } from '@c4tplatform/caminojs/dist';\r\nimport { ChainIdType } from '@/common';\r\nimport { Buffer as BufferNative } from 'buffer';\r\nimport { ParseableAvmTxEnum, ParseablePlatformEnum, ParseableEvmTxEnum } from '@/helpers/tx_helper';\r\nimport createHash from 'create-hash';\r\n//@ts-ignore\r\nimport bippath from 'bip32-path';\r\nimport { bintools } from '@/common';\r\nimport { idToChainAlias } from '@/Network';\r\nimport { getAccountPathAvalanche, getAccountPathEVM } from '@/Wallet/helpers/derivationHelper';\r\nimport { PublicMnemonicWallet } from '@/Wallet/PublicMnemonicWallet';\r\nimport { getAppAvax, getAppEth, getEthAddressKeyFromAccountKey, getLedgerConfigAvax } from '@/Wallet/Ledger/utils';\r\nimport Transport from '@ledgerhq/hw-transport';\r\nimport { ERR_ConfigNotSet, ERR_TransportNotSet } from '@/Wallet/Ledger/errors';\r\n\r\nexport class LedgerWallet extends PublicMnemonicWallet {\r\n    type: WalletNameType;\r\n    static transport: Transport | undefined;\r\n    static config: ILedgerAppConfig | undefined;\r\n    accountIndex: number;\r\n\r\n    /**\r\n     *\r\n     * @param xpubAVM of derivation path m/44'/9000'/n' where `n` is the account index\r\n     * @param xpubEVM of derivation path m/44'/60'/0'/0/n where `n` is the account index\r\n     * @param accountIndex The given xpubs must match this index\r\n     * @param config\r\n     */\r\n    constructor(xpubAVM: string, xpubEVM: string, accountIndex: number) {\r\n        super(xpubAVM, xpubEVM);\r\n\r\n        this.type = 'ledger';\r\n        this.accountIndex = accountIndex;\r\n    }\r\n\r\n    static async setTransport(transport: Transport) {\r\n        LedgerWallet.transport = transport;\r\n\r\n        transport.on('disconnect', () => {\r\n            console.log('transport disconnect');\r\n            LedgerWallet.transport = undefined;\r\n        });\r\n\r\n        // Update the config\r\n        const config = await getLedgerConfigAvax(transport);\r\n        LedgerWallet.config = config;\r\n    }\r\n    /**\r\n     * Create a new ledger wallet instance from the given transport\r\n     * @param transport\r\n     * @param accountIndex\r\n     */\r\n    static async fromTransport(transport: Transport, accountIndex = 0) {\r\n        transport.setExchangeTimeout(LEDGER_EXCHANGE_TIMEOUT);\r\n\r\n        const pubAvax = await LedgerWallet.getExtendedPublicKeyAvaxAccount(transport, accountIndex);\r\n        const pubEth = await LedgerWallet.getExtendedPublicKeyEthAddress(transport, accountIndex);\r\n\r\n        let config = await getLedgerConfigAvax(transport);\r\n\r\n        if (config.version < MIN_EVM_SUPPORT_V) {\r\n            throw new Error(`Unable to connect ledger. You must use ledger version ${MIN_EVM_SUPPORT_V} or above.`);\r\n        }\r\n        // Use this transport for all ledger instances\r\n        await LedgerWallet.setTransport(transport);\r\n        const wallet = new LedgerWallet(pubAvax, pubEth, accountIndex);\r\n        return wallet;\r\n    }\r\n\r\n    /**\r\n     * Returns the extended public key used by C chain for address derivation.\r\n     * @remarks Returns the extended public key for path `m/44'/60'/0'`. This key can be used to derive C chain addresses.\r\n     * @param transport\r\n     */\r\n    static async getExtendedPublicKeyEthAccount(transport: Transport): Promise<string> {\r\n        const ethApp = getAppEth(transport);\r\n        let ethRes = await ethApp.getAddress(ETH_ACCOUNT_PATH, true, true);\r\n        let hdEth = new HDKey();\r\n\r\n        hdEth.publicKey = BufferNative.from(ethRes.publicKey, 'hex');\r\n        hdEth.chainCode = BufferNative.from(ethRes.chainCode!, 'hex');\r\n        return hdEth.publicExtendedKey;\r\n    }\r\n\r\n    /**\r\n     * Get the extended public key for a specific C chain address.\r\n     * @returns The xpub of HD node m/44'/60'/0'/0/n where `n` is `accountIndex`\r\n     * @param transport\r\n     * @param accountIndex\r\n     */\r\n    static async getExtendedPublicKeyEthAddress(transport: Transport, accountIndex: number): Promise<string> {\r\n        const accountKey = await LedgerWallet.getExtendedPublicKeyEthAccount(transport);\r\n        return getEthAddressKeyFromAccountKey(accountKey, accountIndex);\r\n    }\r\n\r\n    /**\r\n     * Returns the extended public key used by X and P chains for address derivation.\r\n     * @remarks Returns the extended public key for path `m/44'/90000'/n'` where `n` is the account index.\r\n     * @param transport\r\n     * @param accountIndex Which account's public key to derive\r\n     */\r\n    static async getExtendedPublicKeyAvaxAccount(transport: Transport, accountIndex = 0): Promise<string> {\r\n        const app = getAppAvax(transport);\r\n\r\n        let res = await app.getWalletExtendedPublicKey(getAccountPathAvalanche(accountIndex));\r\n\r\n        let pubKey = res.public_key;\r\n        let chainCode = res.chain_code;\r\n\r\n        // Get the base58 publick key from the HDKey instance\r\n        let hdKey = new HDKey();\r\n        // @ts-ignore\r\n        hdKey.publicKey = pubKey;\r\n        // @ts-ignore\r\n        hdKey.chainCode = chainCode;\r\n\r\n        return hdKey.publicExtendedKey;\r\n    }\r\n\r\n    /**\r\n     * Get information about the AVAX app on the ledger device.\r\n     * @param transport\r\n     */\r\n    static async getAvaxConfig(transport: Transport) {\r\n        return getLedgerConfigAvax(transport);\r\n    }\r\n\r\n    async signEvm(tx: Transaction): Promise<Transaction> {\r\n        if (!LedgerWallet.transport) throw ERR_TransportNotSet;\r\n\r\n        const rawUnsignedTx = RLP.encode([\r\n            tx.nonce,\r\n            tx.gasPrice,\r\n            tx.gasLimit,\r\n            tx.to !== undefined ? tx.to.buf : Buffer.from([]),\r\n            tx.value,\r\n            tx.data,\r\n            tx.common.chainId(),\r\n            Buffer.from([]),\r\n            Buffer.from([]),\r\n        ]);\r\n\r\n        const ethApp = getAppEth(LedgerWallet.transport);\r\n        const signature = await ethApp.signTransaction(\r\n            getAccountPathEVM(this.accountIndex),\r\n            Buffer.from(rawUnsignedTx).toString('hex')\r\n        );\r\n\r\n        const signatureBN = {\r\n            v: BigInt(signature.v),\r\n            r: BigInt(signature.r),\r\n            s: BigInt(signature.s),\r\n        };\r\n\r\n        const chainId = await web3.eth.getChainId();\r\n        const networkId = await web3.eth.net.getId();\r\n\r\n        let common = Common.custom(\r\n            {\r\n                networkId,\r\n                chainId,\r\n            },\r\n            {\r\n                baseChain: Chain.Mainnet,\r\n                hardfork: Hardfork.Istanbul,\r\n            }\r\n        );\r\n\r\n        const chainParams: TxOptions = {\r\n            common,\r\n        };\r\n\r\n        const signedTx = Transaction.fromTxData(\r\n            {\r\n                nonce: tx.nonce,\r\n                gasPrice: tx.gasPrice,\r\n                gasLimit: tx.gasLimit,\r\n                to: tx.to,\r\n                value: tx.value,\r\n                data: tx.data,\r\n                ...signatureBN,\r\n            },\r\n            chainParams\r\n        );\r\n        return signedTx;\r\n    }\r\n\r\n    // Returns an array of derivation paths that need to sign this transaction\r\n    // Used with signTransactionHash and signTransactionParsable\r\n    async getTransactionPaths<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx>(\r\n        unsignedTx: UnsignedTx,\r\n        chainId: ChainIdType\r\n    ): Promise<{ paths: string[]; isAvaxOnly: boolean }> {\r\n        let tx = unsignedTx.getTransaction();\r\n        let txType = tx.getTxType();\r\n\r\n        let ins = tx.getIns();\r\n        let operations: TransferableOperation[] = [];\r\n\r\n        // Try to get operations, it will fail if there are none, ignore and continue\r\n        try {\r\n            operations = (tx as OperationTx).getOperations();\r\n        } catch (e) {\r\n            console.log('Failed to get tx operations.');\r\n        }\r\n\r\n        let items = ins;\r\n        if (\r\n            (txType === AVMConstants.IMPORTTX && chainId === 'X') ||\r\n            (txType === PlatformVMConstants.IMPORTTX && chainId === 'P')\r\n        ) {\r\n            items = ((tx as AVMImportTx) || PlatformImportTx).getImportInputs();\r\n        }\r\n\r\n        let hrp = avalanche().getHRP();\r\n        let paths: string[] = [];\r\n\r\n        let isAvaxOnly = true;\r\n        // Collect paths derivation paths for source addresses\r\n        for (let i = 0; i < items.length; i++) {\r\n            let item = items[i];\r\n\r\n            let assetId = bintools.cb58Encode(item.getAssetID());\r\n            if (assetId !== activeNetwork.avaxID) {\r\n                isAvaxOnly = false;\r\n            }\r\n\r\n            let sigidxs: SigIdx[] = item.getInput().getSigIdxs();\r\n            let sources = sigidxs.map((sigidx) => sigidx.getSource());\r\n            let addrs: string[] = sources.map((source) => {\r\n                return bintools.addressToString(hrp, chainId, source);\r\n            });\r\n\r\n            for (let j = 0; j < addrs.length; j++) {\r\n                let srcAddr = addrs[j];\r\n                let pathStr = await this.getPathFromAddress(srcAddr); // returns change/index\r\n\r\n                paths.push(pathStr);\r\n            }\r\n        }\r\n\r\n        // Do the Same for operational inputs, if there are any...\r\n        for (let i = 0; i < operations.length; i++) {\r\n            let op = operations[i];\r\n            let sigidxs: SigIdx[] = op.getOperation().getSigIdxs();\r\n            let sources = sigidxs.map((sigidx) => sigidx.getSource());\r\n            let addrs: string[] = sources.map((source) => {\r\n                return bintools.addressToString(hrp, chainId, source);\r\n            });\r\n\r\n            for (let j = 0; j < addrs.length; j++) {\r\n                let srcAddr = addrs[j];\r\n                let pathStr = await this.getPathFromAddress(srcAddr); // returns change/index\r\n\r\n                paths.push(pathStr);\r\n            }\r\n        }\r\n\r\n        return { paths, isAvaxOnly };\r\n    }\r\n\r\n    async getPathFromAddress(address: string) {\r\n        let externalAddrs = await this.externalScan.getAllAddresses();\r\n        let internalAddrs = await this.internalScan.getAllAddresses();\r\n        let platformAddrs = await this.externalScan.getAllAddresses('P');\r\n\r\n        let extIndex = externalAddrs.indexOf(address);\r\n        let intIndex = internalAddrs.indexOf(address);\r\n        let platformIndex = platformAddrs.indexOf(address);\r\n\r\n        if (extIndex >= 0) {\r\n            return `0/${extIndex}`;\r\n        } else if (intIndex >= 0) {\r\n            return `1/${intIndex}`;\r\n        } else if (platformIndex >= 0) {\r\n            return `0/${platformIndex}`;\r\n        } else if (address[0] === 'C') {\r\n            return '0/0';\r\n        } else {\r\n            throw new Error('Unable to find source address.');\r\n        }\r\n    }\r\n\r\n    async signX(unsignedTx: AVMUnsignedTx): Promise<AVMTx> {\r\n        let tx = unsignedTx.getTransaction();\r\n        let txType = tx.getTxType();\r\n        let chainId: ChainIdType = 'X';\r\n\r\n        let parseableTxs = ParseableAvmTxEnum;\r\n        let { paths, isAvaxOnly } = await this.getTransactionPaths<AVMUnsignedTx>(unsignedTx, chainId);\r\n\r\n        if (!LedgerWallet.config) throw ERR_ConfigNotSet;\r\n\r\n        // If ledger doesnt support parsing, sign hash\r\n        let canLedgerParse = LedgerWallet.config.version >= '0.3.1';\r\n        let isParsableType = txType in parseableTxs && isAvaxOnly;\r\n\r\n        let signedTx;\r\n        if (canLedgerParse && isParsableType) {\r\n            signedTx = await this.signTransactionParsable<AVMUnsignedTx, AVMTx>(unsignedTx, paths, chainId);\r\n        } else {\r\n            signedTx = await this.signTransactionHash<AVMUnsignedTx, AVMTx>(unsignedTx, paths, chainId);\r\n        }\r\n\r\n        return signedTx;\r\n    }\r\n\r\n    getChangePath(chainId?: ChainAlias): string {\r\n        switch (chainId) {\r\n            case 'P':\r\n                return 'm/0';\r\n            case 'X':\r\n            default:\r\n                return 'm/1';\r\n        }\r\n    }\r\n\r\n    getChangeIndex(chainId?: ChainAlias): number {\r\n        switch (chainId) {\r\n            case 'P':\r\n                // return this.platformHelper.hdIndex\r\n                return this.externalScan.getIndex();\r\n            case 'X':\r\n            default:\r\n                // return this.internalHelper.hdIndex\r\n                return this.internalScan.getIndex();\r\n        }\r\n    }\r\n\r\n    getChangeBipPath<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx>(\r\n        unsignedTx: UnsignedTx,\r\n        chainId: ChainIdType\r\n    ) {\r\n        if (chainId === 'C') {\r\n            return null;\r\n        }\r\n\r\n        let tx = unsignedTx.getTransaction();\r\n        let txType = tx.getTxType();\r\n\r\n        const chainChangePath = this.getChangePath(chainId).split('m/')[1];\r\n        let changeIdx = this.getChangeIndex(chainId);\r\n        // If change and destination paths are the same\r\n        // it can cause ledger to not display the destination amt.\r\n        // Since platform helper does not have internal/external\r\n        // path for change (it uses the external index)\r\n        // there will be address collisions. So return null.\r\n        if (\r\n            txType === PlatformVMConstants.IMPORTTX ||\r\n            txType === PlatformVMConstants.EXPORTTX ||\r\n            txType === PlatformVMConstants.ADDVALIDATORTX ||\r\n            txType === PlatformVMConstants.ADDDELEGATORTX\r\n        ) {\r\n            return null;\r\n        }\r\n\r\n        return bippath.fromString(`${AVAX_ACCOUNT_PATH}/${chainChangePath}/${changeIdx}`);\r\n    }\r\n\r\n    // Used for signing transactions that are parsable\r\n    async signTransactionParsable<\r\n        UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx,\r\n        SignedTx extends AVMTx | PlatformTx | EVMTx\r\n    >(unsignedTx: UnsignedTx, paths: string[], chainId: ChainIdType): Promise<SignedTx> {\r\n        // There must be an active transport connection\r\n        if (!LedgerWallet.transport) throw ERR_TransportNotSet;\r\n        let tx = unsignedTx.getTransaction();\r\n        let txType = tx.getTxType();\r\n        let parseableTxs = {\r\n            X: ParseableAvmTxEnum,\r\n            P: ParseablePlatformEnum,\r\n            C: ParseableEvmTxEnum,\r\n        }[chainId];\r\n\r\n        let bip32Paths = this.pathsToUniqueBipPaths(paths);\r\n\r\n        const appAvax = getAppAvax(LedgerWallet.transport);\r\n        const accountPath =\r\n            chainId === 'C'\r\n                ? bippath.fromString(`${ETH_ACCOUNT_PATH}`)\r\n                : bippath.fromString(getAccountPathAvalanche(this.accountIndex));\r\n        let txbuff = unsignedTx.toBuffer();\r\n        let changePath = this.getChangeBipPath(unsignedTx, chainId);\r\n\r\n        let ledgerSignedTx = await appAvax.signTransaction(accountPath, bip32Paths, txbuff, changePath);\r\n\r\n        let sigMap = ledgerSignedTx.signatures;\r\n        let creds = this.getCredentials<UnsignedTx>(unsignedTx, paths, sigMap, chainId);\r\n\r\n        let signedTx;\r\n        switch (chainId) {\r\n            case 'X':\r\n                signedTx = new AVMTx(unsignedTx as AVMUnsignedTx, creds);\r\n                break;\r\n            case 'P':\r\n                signedTx = new PlatformTx(unsignedTx as PlatformUnsignedTx, creds);\r\n                break;\r\n            case 'C':\r\n                signedTx = new EVMTx(unsignedTx as EVMUnsignedTx, creds);\r\n                break;\r\n        }\r\n\r\n        return signedTx as SignedTx;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param accountPath `m/44'/9000'/0'` For X/P Chains, `m/44'/60'/0'` for C Chain\r\n     * @param bip32Paths an array of paths to sign with `['0/0','0/1'..]`\r\n     * @param hash A buffer of the hash to sign\r\n     * @remarks Never sign untrusted hashes. This can lead to loss of funds.\r\n     */\r\n    async signHash(accountPath: any, bip32Paths: any, hash: Buffer): Promise<Map<string, Buffer>> {\r\n        if (!LedgerWallet.transport) throw ERR_TransportNotSet;\r\n        const appAvax = getAppAvax(LedgerWallet.transport);\r\n        return await appAvax.signHash(accountPath, bip32Paths, hash);\r\n    }\r\n    // Used for non parsable transactions.\r\n    // Ideally we wont use this function at all, but ledger is not ready yet.\r\n    async signTransactionHash<\r\n        UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx,\r\n        SignedTx extends AVMTx | PlatformTx | EVMTx\r\n    >(unsignedTx: UnsignedTx, paths: string[], chainId: ChainIdType): Promise<SignedTx> {\r\n        if (!LedgerWallet.transport) throw ERR_TransportNotSet;\r\n        let txbuff = unsignedTx.toBuffer();\r\n        const msg: Buffer = Buffer.from(createHash('sha256').update(txbuff).digest());\r\n\r\n        let bip32Paths = this.pathsToUniqueBipPaths(paths);\r\n\r\n        const appAvax = getAppAvax(LedgerWallet.transport);\r\n        // Sign the msg with ledger\r\n        //TODO: Update when ledger supports Accounts\r\n        const accountPathSource = chainId === 'C' ? ETH_ACCOUNT_PATH : getAccountPathAvalanche(this.accountIndex);\r\n        const accountPath = bippath.fromString(accountPathSource);\r\n        let sigMap = await appAvax.signHash(accountPath, bip32Paths, msg);\r\n\r\n        let creds: Credential[] = this.getCredentials<UnsignedTx>(unsignedTx, paths, sigMap, chainId);\r\n\r\n        let signedTx;\r\n        switch (chainId) {\r\n            case 'X':\r\n                signedTx = new AVMTx(unsignedTx as AVMUnsignedTx, creds);\r\n                break;\r\n            case 'P':\r\n                signedTx = new PlatformTx(unsignedTx as PlatformUnsignedTx, creds);\r\n                break;\r\n            case 'C':\r\n                signedTx = new EVMTx(unsignedTx as EVMUnsignedTx, creds);\r\n                break;\r\n        }\r\n\r\n        return signedTx as SignedTx;\r\n    }\r\n\r\n    pathsToUniqueBipPaths(paths: string[]) {\r\n        let uniquePaths = paths.filter((val: any, i: number) => {\r\n            return paths.indexOf(val) === i;\r\n        });\r\n\r\n        let bip32Paths = uniquePaths.map((path) => {\r\n            return bippath.fromString(path, false);\r\n        });\r\n\r\n        return bip32Paths;\r\n    }\r\n\r\n    getCredentials<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx>(\r\n        unsignedTx: UnsignedTx,\r\n        paths: string[],\r\n        sigMap: any,\r\n        chainId: ChainIdType\r\n    ): Credential[] {\r\n        let creds: Credential[] = [];\r\n        let tx = unsignedTx.getTransaction();\r\n        let txType = tx.getTxType();\r\n\r\n        // @ts-ignore\r\n        let ins = tx.getIns ? tx.getIns() : [];\r\n        let operations: TransferableOperation[] = [];\r\n        let evmInputs: EVMInput[] = [];\r\n\r\n        let items = ins;\r\n        if (\r\n            (txType === AVMConstants.IMPORTTX && chainId === 'X') ||\r\n            (txType === PlatformVMConstants.IMPORTTX && chainId === 'P') ||\r\n            (txType === EVMConstants.IMPORTTX && chainId === 'C')\r\n        ) {\r\n            items = ((tx as AVMImportTx) || PlatformImportTx || EVMImportTx).getImportInputs();\r\n        }\r\n\r\n        // Try to get operations, it will fail if there are none, ignore and continue\r\n        try {\r\n            operations = (tx as OperationTx).getOperations();\r\n        } catch (e) {\r\n            console.log('Failed to get tx operations.');\r\n        }\r\n\r\n        let CredentialClass;\r\n        if (chainId === 'X') {\r\n            CredentialClass = AVMSelectCredentialClass;\r\n        } else if (chainId === 'P') {\r\n            CredentialClass = PlatformSelectCredentialClass;\r\n        } else {\r\n            CredentialClass = EVMSelectCredentialClass;\r\n        }\r\n\r\n        // Try to get evm inputs, it will fail if there are none, ignore and continue\r\n        try {\r\n            evmInputs = (tx as EVMExportTx).getInputs();\r\n        } catch (e) {\r\n            console.log('Failed to get EVM inputs.');\r\n        }\r\n\r\n        for (let i = 0; i < items.length; i++) {\r\n            const sigidxs: SigIdx[] = items[i].getInput().getSigIdxs();\r\n            const cred: Credential = CredentialClass(items[i].getInput().getCredentialID());\r\n\r\n            for (let j = 0; j < sigidxs.length; j++) {\r\n                let pathIndex = i + j;\r\n                let pathStr = paths[pathIndex];\r\n\r\n                let sigRaw = sigMap.get(pathStr);\r\n                let sigBuff = Buffer.from(sigRaw);\r\n                const sig: Signature = new Signature();\r\n                sig.fromBuffer(sigBuff);\r\n                cred.addSignature(sig);\r\n            }\r\n            creds.push(cred);\r\n        }\r\n\r\n        for (let i = 0; i < operations.length; i++) {\r\n            let op = operations[i].getOperation();\r\n            const sigidxs: SigIdx[] = op.getSigIdxs();\r\n            const cred: Credential = CredentialClass(op.getCredentialID());\r\n\r\n            for (let j = 0; j < sigidxs.length; j++) {\r\n                let pathIndex = items.length + i + j;\r\n                let pathStr = paths[pathIndex];\r\n\r\n                let sigRaw = sigMap.get(pathStr);\r\n                let sigBuff = Buffer.from(sigRaw);\r\n                const sig: Signature = new Signature();\r\n                sig.fromBuffer(sigBuff);\r\n                cred.addSignature(sig);\r\n            }\r\n            creds.push(cred);\r\n        }\r\n\r\n        for (let i = 0; i < evmInputs.length; i++) {\r\n            let evmInput = evmInputs[i];\r\n            const sigidxs: SigIdx[] = evmInput.getSigIdxs();\r\n            const cred: Credential = CredentialClass(evmInput.getCredentialID());\r\n\r\n            for (let j = 0; j < sigidxs.length; j++) {\r\n                let pathIndex = items.length + i + j;\r\n                let pathStr = paths[pathIndex];\r\n\r\n                let sigRaw = sigMap.get(pathStr);\r\n                let sigBuff = Buffer.from(sigRaw);\r\n                const sig: Signature = new Signature();\r\n                sig.fromBuffer(sigBuff);\r\n                cred.addSignature(sig);\r\n            }\r\n            creds.push(cred);\r\n        }\r\n\r\n        return creds;\r\n    }\r\n\r\n    async signP(unsignedTx: PlatformUnsignedTx): Promise<PlatformTx> {\r\n        if (!LedgerWallet.transport) throw ERR_TransportNotSet;\r\n\r\n        let tx = unsignedTx.getTransaction();\r\n        let txType = tx.getTxType();\r\n        let chainId: ChainIdType = 'P';\r\n        let parseableTxs = ParseablePlatformEnum;\r\n\r\n        let { paths, isAvaxOnly } = await this.getTransactionPaths<PlatformUnsignedTx>(unsignedTx, chainId);\r\n\r\n        if (!LedgerWallet.config) throw ERR_ConfigNotSet;\r\n\r\n        // If ledger doesnt support parsing, sign hash\r\n        let canLedgerParse = LedgerWallet.config.version >= '0.3.1';\r\n        let isParsableType = txType in parseableTxs && isAvaxOnly;\r\n\r\n        // TODO: Remove after ledger is fixed\r\n        // If UTXOS contain lockedStakeable funds always use sign hash\r\n        let txIns = unsignedTx.getTransaction().getIns();\r\n        for (let i = 0; i < txIns.length; i++) {\r\n            let typeID = txIns[i].getInput().getTypeID();\r\n            if (typeID === PlatformVMConstants.STAKEABLELOCKINID) {\r\n                canLedgerParse = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // TODO: Remove after ledger update\r\n        // Ledger is not able to parse P/C atomic transactions\r\n        if (txType === PlatformVMConstants.EXPORTTX) {\r\n            const destChainBuff = (tx as PlatformExportTx).getDestinationChain();\r\n            // If destination chain is C chain, sign hash\r\n            const destChain = idToChainAlias(bintools.cb58Encode(destChainBuff));\r\n            if (destChain === 'C') {\r\n                canLedgerParse = false;\r\n            }\r\n        }\r\n        // TODO: Remove after ledger update\r\n        // Ledger is not able to parse P/C atomic transactions\r\n        if (txType === PlatformVMConstants.IMPORTTX) {\r\n            const sourceChainBuff = (tx as PlatformImportTx).getSourceChain();\r\n            // If destination chain is C chain, sign hash\r\n            const sourceChain = idToChainAlias(bintools.cb58Encode(sourceChainBuff));\r\n            if (sourceChain === 'C') {\r\n                canLedgerParse = false;\r\n            }\r\n        }\r\n\r\n        let signedTx;\r\n        if (canLedgerParse && isParsableType) {\r\n            signedTx = await this.signTransactionParsable<PlatformUnsignedTx, PlatformTx>(unsignedTx, paths, chainId);\r\n        } else {\r\n            signedTx = await this.signTransactionHash<PlatformUnsignedTx, PlatformTx>(unsignedTx, paths, chainId);\r\n        }\r\n        return signedTx;\r\n    }\r\n\r\n    async signC(unsignedTx: EVMUnsignedTx): Promise<EVMTx> {\r\n        // TODO: Might need to upgrade paths array to:\r\n        //  paths = Array(utxoSet.getAllUTXOs().length).fill('0/0'),\r\n        let tx = unsignedTx.getTransaction();\r\n        let typeId = tx.getTxType();\r\n\r\n        let paths = [`0/${this.accountIndex}`];\r\n        if (typeId === EVMConstants.EXPORTTX) {\r\n            let ins = (tx as EVMExportTx).getInputs();\r\n            paths = ins.map(() => `0/${this.accountIndex}`);\r\n        } else if (typeId === EVMConstants.IMPORTTX) {\r\n            let ins = (tx as EVMImportTx).getImportInputs();\r\n            paths = ins.map(() => `0/${this.accountIndex}`);\r\n        }\r\n\r\n        let canLedgerParse = true;\r\n\r\n        // TODO: Remove after ledger update\r\n        // Ledger is not able to parse P/C atomic transactions\r\n        if (typeId === EVMConstants.EXPORTTX) {\r\n            const destChainBuff = (tx as EVMExportTx).getDestinationChain();\r\n            // If destination chain is C chain, sign hash\r\n            const destChain = idToChainAlias(bintools.cb58Encode(destChainBuff));\r\n            if (destChain === 'P') {\r\n                canLedgerParse = false;\r\n            }\r\n        }\r\n        // TODO: Remove after ledger update\r\n        if (typeId === EVMConstants.IMPORTTX) {\r\n            const sourceChainBuff = (tx as EVMImportTx).getSourceChain();\r\n            // If destination chain is C chain, sign hash\r\n            const sourceChain = idToChainAlias(bintools.cb58Encode(sourceChainBuff));\r\n            if (sourceChain === 'P') {\r\n                canLedgerParse = false;\r\n            }\r\n        }\r\n\r\n        let txSigned;\r\n        if (canLedgerParse) {\r\n            txSigned = (await this.signTransactionParsable(unsignedTx, paths, 'C')) as EVMTx;\r\n        } else {\r\n            txSigned = (await this.signTransactionHash(unsignedTx, paths, 'C')) as EVMTx;\r\n        }\r\n\r\n        return txSigned;\r\n    }\r\n\r\n    // /**\r\n    //  * This function is equivalent to the eth_sign Ethereum JSON-RPC method as specified in EIP-1417,\r\n    //  * as well as the MetaMask's personal_sign method.\r\n    //  * @param data The hex data to sign\r\n    //  */\r\n    // async personalSign(data: string): Promise<string> {\r\n    //     throw new Error('Not implemented.');\r\n    // const ethApp = getAppEth(LedgerWallet.transport);\r\n    // const path = getAccountPathEVM(this.accountIndex).substr(2);\r\n    // const result = await ethApp.signPersonalMessage(path, data.substr(2));\r\n    //\r\n    // let v = result['v'] - 27;\r\n    // let vStr = v.toString(16);\r\n    // if (vStr.length < 2) {\r\n    //     vStr = '0' + v;\r\n    // }\r\n    // const sig = `0x${result['r'] + result['s'] + vStr}`;\r\n    // return sig;\r\n    // }\r\n}\r\n","import { Buffer as BufferAvalanche } from '@c4tplatform/caminojs/dist';\r\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\r\nimport { avalanche } from '@/Network/network';\r\nimport {\r\n    KeyChain as EVMKeyChain,\r\n    KeyPair as EVMKeyPair,\r\n    Tx as EVMTx,\r\n    UnsignedTx as EVMUnsignedTx,\r\n} from '@c4tplatform/caminojs/dist/apis/evm';\r\nimport { EvmWalletReadonly } from '@/Wallet/EVM/EvmWalletReadonly';\r\nimport { bintools } from '@/common';\r\nimport { computePublicKey } from 'ethers/lib/utils';\r\nimport {\r\n    MessageTypes,\r\n    personalSign,\r\n    signTypedData,\r\n    SignTypedDataVersion,\r\n    TypedDataV1,\r\n    TypedMessage,\r\n} from '@metamask/eth-sig-util';\r\nimport * as bitcoin from 'bitcoinjs-lib';\r\nexport class EvmWallet extends EvmWalletReadonly {\r\n    private privateKey: Buffer;\r\n    private btcPair: bitcoin.ECPairInterface;\r\n\r\n    constructor(key: Buffer) {\r\n        // Compute the uncompressed public key from private key\r\n        let pubKey = computePublicKey(key);\r\n\r\n        super(pubKey);\r\n\r\n        this.btcPair = bitcoin.ECPair.fromPrivateKey(key);\r\n        this.privateKey = key;\r\n    }\r\n\r\n    static fromPrivateKey(key: string) {\r\n        return new EvmWallet(Buffer.from(key, 'hex'));\r\n    }\r\n\r\n    private getPrivateKeyBech(): string {\r\n        return `PrivateKey-` + bintools.cb58Encode(BufferAvalanche.from(this.privateKey));\r\n    }\r\n\r\n    getKeyChain(): EVMKeyChain {\r\n        let keychain = new EVMKeyChain(avalanche().getHRP(), 'C');\r\n        keychain.importKey(this.getPrivateKeyBech());\r\n        return keychain;\r\n    }\r\n\r\n    getKeyPair(): EVMKeyPair {\r\n        let keychain = new EVMKeyChain(avalanche().getHRP(), 'C');\r\n        return keychain.importKey(this.getPrivateKeyBech());\r\n    }\r\n\r\n    signEVM(tx: Transaction | FeeMarketEIP1559Transaction) {\r\n        return tx.sign(this.privateKey);\r\n    }\r\n\r\n    signBTCHash(hash: Buffer) {\r\n        return this.btcPair.sign(hash);\r\n    }\r\n\r\n    signC(tx: EVMUnsignedTx): EVMTx {\r\n        return tx.sign(this.getKeyChain());\r\n    }\r\n\r\n    getPrivateKeyHex(): string {\r\n        return this.privateKey.toString('hex');\r\n    }\r\n\r\n    /**\r\n     * This function is equivalent to the eth_sign Ethereum JSON-RPC method as specified in EIP-1417,\r\n     * as well as the MetaMask's personal_sign method.\r\n     * @param data The hex data to sign. Must start with `0x`.\r\n     */\r\n    personalSign(data: string) {\r\n        return personalSign({ privateKey: this.privateKey, data });\r\n    }\r\n\r\n    /**\r\n     * Sign typed data according to EIP-712. The signing differs based upon the version.\r\n     * V1 is based upon an early version of EIP-712 that lacked some later security improvements, and should generally be neglected in favor of later versions.\r\n     * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\r\n     * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\r\n     * @param data The typed data to sign.\r\n     * @param version The signing version to use.\r\n     */\r\n    signTypedData<V extends SignTypedDataVersion, T extends MessageTypes>(\r\n        data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>,\r\n        version: V\r\n    ) {\r\n        return signTypedData({\r\n            privateKey: this.privateKey,\r\n            data,\r\n            version,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * V1 is based upon an early version of EIP-712 that lacked some later security improvements, and should generally be neglected in favor of later versions.\r\n     * @param data The typed data to sign.\r\n     * */\r\n    signTypedData_V1(data: TypedDataV1) {\r\n        return this.signTypedData(data, SignTypedDataVersion.V1);\r\n    }\r\n\r\n    /**\r\n     * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\r\n     * @param data The typed data to sign.\r\n     */\r\n    signTypedData_V3(data: TypedMessage<any>) {\r\n        return this.signTypedData(data, SignTypedDataVersion.V3);\r\n    }\r\n\r\n    /**\r\n     * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\r\n     * @param data The typed data to sign.\r\n     */\r\n    signTypedData_V4(data: TypedMessage<any>) {\r\n        return this.signTypedData(data, SignTypedDataVersion.V4);\r\n    }\r\n}\r\n","import * as bip39 from 'bip39';\r\nimport * as bip32 from 'bip32';\r\nimport { EvmWallet } from './EVM/EvmWallet';\r\nimport { UnsafeWallet, WalletNameType } from './types';\r\nimport { Buffer } from '@c4tplatform/caminojs/dist';\r\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\r\nimport { Tx as AVMTx, UnsignedTx as AVMUnsignedTx } from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport { Tx as PlatformTx, UnsignedTx as PlatformUnsignedTx } from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { KeyPair as AVMKeyPair, KeyChain as AVMKeyChain } from '@c4tplatform/caminojs/dist/apis/avm/keychain';\r\nimport { KeyChain as PlatformKeyChain } from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { UnsignedTx as EVMUnsignedTx, Tx as EVMTx, KeyPair as EVMKeyPair } from '@c4tplatform/caminojs/dist/apis/evm';\r\nimport { CypherAES, digestMessage } from '@/utils';\r\nimport { HDWalletAbstract } from '@/Wallet/HDWalletAbstract';\r\nimport { bintools } from '@/common';\r\nimport { getAccountPathAvalanche, getAccountPathEVM } from '@/Wallet/helpers/derivationHelper';\r\nimport { TypedDataV1, TypedMessage } from '@metamask/eth-sig-util';\r\n\r\n//TODO: Should extend public mnemonic wallet\r\nexport class MnemonicWallet extends HDWalletAbstract implements UnsafeWallet {\r\n    evmWallet: EvmWallet;\r\n    type: WalletNameType;\r\n    private mnemonicCypher: CypherAES;\r\n    accountIndex: number;\r\n\r\n    private ethAccountKey: bip32.BIP32Interface;\r\n\r\n    constructor(mnemonic: string, account = 0) {\r\n        let seed: globalThis.Buffer = bip39.mnemonicToSeedSync(mnemonic);\r\n\r\n        let masterHdKey = bip32.fromSeed(seed);\r\n        let accountKey = masterHdKey.derivePath(getAccountPathAvalanche(account));\r\n\r\n        super(accountKey);\r\n\r\n        this.type = 'mnemonic';\r\n        if (!bip39.validateMnemonic(mnemonic)) {\r\n            throw new Error('Invalid mnemonic phrase.');\r\n        }\r\n\r\n        let ethAccountKey = masterHdKey.derivePath(getAccountPathEVM(account));\r\n        this.ethAccountKey = ethAccountKey;\r\n        let ethKey = ethAccountKey.privateKey;\r\n        let evmWallet = new EvmWallet(ethKey!);\r\n\r\n        this.accountIndex = account;\r\n        this.mnemonicCypher = new CypherAES(mnemonic);\r\n        this.evmWallet = evmWallet;\r\n    }\r\n\r\n    /**\r\n     * Returns the derived private key used by the EVM wallet.\r\n     */\r\n    public getEvmPrivateKeyHex(): string {\r\n        return this.evmWallet.getPrivateKeyHex();\r\n    }\r\n\r\n    /**\r\n     * Return the mnemonic phrase for this wallet.\r\n     */\r\n    public getMnemonic(): string {\r\n        return this.mnemonicCypher.getValue();\r\n    }\r\n\r\n    /**\r\n     * Generates a 24 word mnemonic phrase and initializes a wallet instance with it.\r\n     * @return Returns the initialized wallet.\r\n     */\r\n    static create(): MnemonicWallet {\r\n        const mnemonic = bip39.generateMnemonic(256);\r\n        return MnemonicWallet.fromMnemonic(mnemonic);\r\n    }\r\n\r\n    /**\r\n     * Returns a new 24 word mnemonic key phrase.\r\n     */\r\n    static generateMnemonicPhrase(): string {\r\n        return bip39.generateMnemonic(256);\r\n    }\r\n\r\n    /**\r\n     * Returns a new instance of a Mnemonic wallet from the given key phrase.\r\n     * @param mnemonic The 24 word mnemonic phrase of the wallet\r\n     */\r\n    static fromMnemonic(mnemonic: string): MnemonicWallet {\r\n        return new MnemonicWallet(mnemonic);\r\n    }\r\n\r\n    /**\r\n     * Validates the given string is a valid mnemonic.\r\n     * @param mnemonic\r\n     */\r\n    static validateMnemonic(mnemonic: string): boolean {\r\n        return bip39.validateMnemonic(mnemonic);\r\n    }\r\n\r\n    /**\r\n     * Signs an EVM transaction on the C chain.\r\n     * @param tx The unsigned transaction\r\n     */\r\n    async signEvm(tx: Transaction | FeeMarketEIP1559Transaction): Promise<Transaction | FeeMarketEIP1559Transaction> {\r\n        return this.evmWallet.signEVM(tx);\r\n    }\r\n\r\n    /**\r\n     * Signs an AVM transaction.\r\n     * @param tx The unsigned transaction\r\n     */\r\n    async signX(tx: AVMUnsignedTx): Promise<AVMTx> {\r\n        return tx.sign(this.getKeyChainX());\r\n    }\r\n\r\n    /**\r\n     * Signs a PlatformVM transaction.\r\n     * @param tx The unsigned transaction\r\n     */\r\n    async signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\r\n        return tx.sign(this.getKeyChainP());\r\n    }\r\n\r\n    /**\r\n     * Signs a C chain transaction\r\n     * @remarks\r\n     * Used for Import and Export transactions on the C chain. For everything else, use `this.signEvm()`\r\n     * @param tx The unsigned transaction\r\n     */\r\n    async signC(tx: EVMUnsignedTx): Promise<EVMTx> {\r\n        return this.evmWallet.signC(tx);\r\n    }\r\n\r\n    /**\r\n     * Returns a keychain with the keys of every derived X chain address.\r\n     * @private\r\n     */\r\n    private getKeyChainX(): AVMKeyChain {\r\n        let internal = this.internalScan.getKeyChainX();\r\n        let external = this.externalScan.getKeyChainX();\r\n        return internal.union(external);\r\n    }\r\n\r\n    /**\r\n     * Returns a keychain with the keys of every derived P chain address.\r\n     * @private\r\n     */\r\n    private getKeyChainP(): PlatformKeyChain {\r\n        return this.externalScan.getKeyChainP();\r\n    }\r\n\r\n    // TODO: Support internal address as well\r\n    signMessage(msgStr: string, index: number): string {\r\n        let key = this.externalScan.getKeyForIndexX(index) as AVMKeyPair;\r\n        let digest = digestMessage(msgStr);\r\n\r\n        // Convert to the other Buffer and sign\r\n        let digestHex = digest.toString('hex');\r\n        let digestBuff = Buffer.from(digestHex, 'hex');\r\n        let signed = key.sign(digestBuff);\r\n\r\n        return bintools.cb58Encode(signed);\r\n    }\r\n\r\n    /**\r\n     * This function is equivalent to the eth_sign Ethereum JSON-RPC method as specified in EIP-1417,\r\n     * as well as the MetaMask's personal_sign method.\r\n     * @remarks Signs using the C chain address.\r\n     * @param data The hex data to sign\r\n     */\r\n    async personalSign(data: string): Promise<string> {\r\n        return this.evmWallet.personalSign(data);\r\n    }\r\n\r\n    /**\r\n     * V1 is based upon an early version of EIP-712 that lacked some later security improvements, and should generally be neglected in favor of later versions.\r\n     * @param data The typed data to sign.\r\n     * */\r\n    async signTypedData_V1(data: TypedDataV1): Promise<string> {\r\n        return this.evmWallet.signTypedData_V1(data);\r\n    }\r\n\r\n    /**\r\n     * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\r\n     * @param data The typed data to sign.\r\n     */\r\n    async signTypedData_V3(data: TypedMessage<any>): Promise<string> {\r\n        return this.evmWallet.signTypedData_V3(data);\r\n    }\r\n\r\n    /**\r\n     * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\r\n     * @param data The typed data to sign.\r\n     */\r\n    async signTypedData_V4(data: TypedMessage<any>): Promise<string> {\r\n        return this.evmWallet.signTypedData_V4(data);\r\n    }\r\n}\r\n","import { WalletProvider } from '@/Wallet/Wallet';\r\nimport { UnsafeWallet, WalletNameType } from '@/Wallet/types';\r\n\r\nimport { KeyChain as AVMKeyChain, UnsignedTx as AVMUnsignedTx, Tx as AVMTx } from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport {\r\n    KeyChain as PlatformKeyChain,\r\n    UnsignedTx as PlatformUnsignedTx,\r\n    Tx as PlatformTx,\r\n} from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { avalanche } from '@/Network/network';\r\nimport { Buffer as BufferAvalanche } from '@c4tplatform/caminojs/dist';\r\nimport { EvmWallet } from '@/Wallet/EVM/EvmWallet';\r\nimport { UnsignedTx, Tx } from '@c4tplatform/caminojs/dist/apis/evm';\r\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\r\nimport { bintools } from '@/common';\r\nimport { TypedDataV1, TypedMessage } from '@metamask/eth-sig-util';\r\n\r\nexport class SingletonWallet extends WalletProvider implements UnsafeWallet {\r\n    type: WalletNameType = 'singleton';\r\n    key = '';\r\n    keyBuff: BufferAvalanche;\r\n    evmWallet: EvmWallet;\r\n\r\n    /**\r\n     *\r\n     * @param privateKey An avalanche private key, starts with `PrivateKey-`\r\n     */\r\n    constructor(privateKey: string) {\r\n        super();\r\n\r\n        this.key = privateKey;\r\n\r\n        // Derive EVM key and address\r\n        let pkBuf = bintools.cb58Decode(privateKey.split('-')[1]);\r\n        this.keyBuff = pkBuf;\r\n\r\n        let pkHex = pkBuf.toString('hex');\r\n        let pkBuffNative = Buffer.from(pkHex, 'hex');\r\n\r\n        this.evmWallet = new EvmWallet(pkBuffNative);\r\n    }\r\n\r\n    static fromPrivateKey(key: string): SingletonWallet {\r\n        return new SingletonWallet(key);\r\n    }\r\n\r\n    static fromEvmKey(key: string): SingletonWallet {\r\n        let keyBuff = bintools.cb58Encode(BufferAvalanche.from(key, 'hex'));\r\n        let avmKeyStr = `PrivateKey-${keyBuff}`;\r\n        return new SingletonWallet(avmKeyStr);\r\n    }\r\n\r\n    private getKeyChainX(): AVMKeyChain {\r\n        let keyChain = avalanche().XChain().newKeyChain();\r\n        keyChain.importKey(this.key);\r\n        return keyChain;\r\n    }\r\n\r\n    private getKeyChainP(): PlatformKeyChain {\r\n        let keyChain = avalanche().PChain().newKeyChain();\r\n        keyChain.importKey(this.key);\r\n        return keyChain;\r\n    }\r\n\r\n    /**\r\n     * Returns the derived private key used by the EVM wallet.\r\n     */\r\n    public getEvmPrivateKeyHex(): string {\r\n        return this.evmWallet.getPrivateKeyHex();\r\n    }\r\n\r\n    getAddressP(): string {\r\n        let keyChain = this.getKeyChainP();\r\n        return keyChain.getAddressStrings()[0];\r\n    }\r\n\r\n    getAddressX(): string {\r\n        let keyChain = this.getKeyChainX();\r\n        return keyChain.getAddressStrings()[0];\r\n    }\r\n\r\n    async getAllAddressesP(): Promise<string[]> {\r\n        return [this.getAddressP()];\r\n    }\r\n\r\n    getAllAddressesPSync(): string[] {\r\n        return [this.getAddressP()];\r\n    }\r\n\r\n    async getAllAddressesX(): Promise<string[]> {\r\n        return [this.getAddressX()];\r\n    }\r\n\r\n    getAllAddressesXSync(): string[] {\r\n        return [this.getAddressX()];\r\n    }\r\n\r\n    getChangeAddressX(): string {\r\n        return this.getAddressX();\r\n    }\r\n\r\n    async getExternalAddressesP(): Promise<string[]> {\r\n        return [this.getAddressP()];\r\n    }\r\n\r\n    getExternalAddressesPSync(): string[] {\r\n        return [this.getAddressP()];\r\n    }\r\n\r\n    async getExternalAddressesX(): Promise<string[]> {\r\n        return [this.getAddressX()];\r\n    }\r\n\r\n    getExternalAddressesXSync(): string[] {\r\n        return [this.getAddressX()];\r\n    }\r\n\r\n    async getInternalAddressesX(): Promise<string[]> {\r\n        return [this.getAddressX()];\r\n    }\r\n\r\n    getInternalAddressesXSync(): string[] {\r\n        return [this.getAddressX()];\r\n    }\r\n\r\n    async signC(tx: UnsignedTx): Promise<Tx> {\r\n        return this.evmWallet.signC(tx);\r\n    }\r\n\r\n    async signEvm(tx: Transaction | FeeMarketEIP1559Transaction): Promise<Transaction | FeeMarketEIP1559Transaction> {\r\n        return this.evmWallet.signEVM(tx);\r\n    }\r\n\r\n    async signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\r\n        return tx.sign(this.getKeyChainP());\r\n    }\r\n\r\n    async signX(tx: AVMUnsignedTx): Promise<AVMTx> {\r\n        return tx.sign(this.getKeyChainX());\r\n    }\r\n\r\n    /**\r\n     * This function is equivalent to the eth_sign Ethereum JSON-RPC method as specified in EIP-1417,\r\n     * as well as the MetaMask's personal_sign method.\r\n     * @param data The hex data to sign\r\n     */\r\n    async personalSign(data: string): Promise<string> {\r\n        return this.evmWallet.personalSign(data);\r\n    }\r\n\r\n    /**\r\n     * V1 is based upon an early version of EIP-712 that lacked some later security improvements, and should generally be neglected in favor of later versions.\r\n     * @param data The typed data to sign.\r\n     * */\r\n    async signTypedData_V1(data: TypedDataV1): Promise<string> {\r\n        return this.evmWallet.signTypedData_V1(data);\r\n    }\r\n\r\n    /**\r\n     * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\r\n     * @param data The typed data to sign.\r\n     */\r\n    async signTypedData_V3(data: TypedMessage<any>): Promise<string> {\r\n        return this.evmWallet.signTypedData_V3(data);\r\n    }\r\n\r\n    /**\r\n     * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\r\n     * @param data The typed data to sign.\r\n     */\r\n    async signTypedData_V4(data: TypedMessage<any>): Promise<string> {\r\n        return this.evmWallet.signTypedData_V4(data);\r\n    }\r\n}\r\n","export const stakingHeaders = [\r\n    'Tx ID',\r\n    'Tx Date',\r\n    'Type',\r\n    'Node ID',\r\n    'Stake Amount',\r\n    'Stake Start',\r\n    'Reward Date (Stake End)',\r\n    'Is Rewarded',\r\n    'Reward Amount',\r\n];\r\n\r\nexport const normalHeaders = ['Tx ID', 'Timestamp', 'Type', 'Token Symbol', 'Amount', 'Addresses', 'Chain'];\r\n","export function createCSVContent(rows: string[][]) {\r\n    let csvContent = '';\r\n    rows.forEach(function (arr) {\r\n        let row = arr.join(',');\r\n        csvContent += row + '\\r\\n';\r\n    });\r\n    return csvContent;\r\n}\r\n","import { HistoryItemType, iHistoryStaking, isHistoryStakingTx } from '@/History';\r\nimport { bnToBigAvaxP } from '@/utils';\r\nimport moment from 'moment';\r\nimport { createCSVContent } from '@/Csv/createCsvContent';\r\nimport { stakingHeaders } from '@/Csv/constants';\r\n\r\n/**\r\n * Given an array of history transactions, filter the staking txs and returns the body of a csv file.\r\n * @remarks You can download the returned string as a CSV file.\r\n * @param txs An array of transactions made by a wallet.\r\n */\r\nexport function createCsvStaking(txs: HistoryItemType[]) {\r\n    // Filter only staking transactions\r\n    const filtered = txs.filter(isHistoryStakingTx);\r\n    // Sort by stake end date\r\n    const sorted = filtered.sort((a, b) => {\r\n        const aTime = a.stakeEnd.getTime();\r\n        const bTime = b.stakeEnd.getTime();\r\n        return bTime - aTime;\r\n    });\r\n\r\n    const rows = [stakingHeaders, ...parseStakingTxs(sorted)];\r\n    return createCSVContent(rows);\r\n}\r\n\r\n/**\r\n * Parses each staking transaction according to the headers defined in constants and returns an array of strings for\r\n * each cell in the CSV.\r\n * @param txs\r\n */\r\nexport function parseStakingTxs(txs: iHistoryStaking[]) {\r\n    return txs.map((tx) => {\r\n        const txDate = moment(tx.timestamp).format();\r\n        const stakeStart = moment(tx.stakeStart).format();\r\n        const stakeEnd = moment(tx.stakeEnd).format();\r\n        const now = Date.now();\r\n\r\n        const stakeAmt = bnToBigAvaxP(tx.amount).toString();\r\n\r\n        let rewardAmt;\r\n        if (tx.stakeEnd.getTime() > now) {\r\n            rewardAmt = 'Pending';\r\n        } else if (!tx.isRewarded) {\r\n            rewardAmt = 'Stake Not Rewarded';\r\n        } else if (tx.rewardAmount) {\r\n            rewardAmt = !tx.rewardAmount.isZero() ? bnToBigAvaxP(tx.rewardAmount).toString() : 'Not Reward Owner';\r\n        } else {\r\n            rewardAmt = 'Not Reward Owner';\r\n        }\r\n\r\n        return [tx.id, txDate, tx.type, tx.nodeID, stakeAmt, stakeStart, stakeEnd, tx.isRewarded.toString(), rewardAmt];\r\n    });\r\n}\r\n","import { HistoryItemType, isHistoryBaseTx, isHistoryEVMTx, isHistoryImportExportTx } from '@/History';\r\nimport { normalHeaders } from '@/Csv/constants';\r\nimport { createCSVContent } from '@/Csv/createCsvContent';\r\nimport { bnToBig, bnToBigAvaxC, bnToBigAvaxX } from '@/utils';\r\nimport moment from 'moment';\r\n\r\n/**\r\n * Given an array of history transactions, filter the base and export/import txs and returns the body of a csv file.\r\n * @remarks You can download the returned string as a CSV file.\r\n * @param txs An array of transactions made by a wallet.\r\n */\r\nexport function createCsvNormal(txs: HistoryItemType[]) {\r\n    const rows = [normalHeaders, ...parseNormalTxs(txs)];\r\n    return createCSVContent(rows);\r\n}\r\n\r\nexport function parseNormalTxs(txs: HistoryItemType[]) {\r\n    const rows: string[][] = [];\r\n    txs.map((tx) => {\r\n        const mom = moment(tx.timestamp);\r\n        const dateStr = mom.format();\r\n\r\n        if (isHistoryBaseTx(tx)) {\r\n            const tokenRows = tx.tokens.map((token) => {\r\n                const amtStr = bnToBig(token.amount, token.asset.denomination).toString();\r\n                return [tx.id, dateStr, tx.type, token.asset.symbol, amtStr, `\"${token.addresses.join('\\r')}\"`, 'X'];\r\n            });\r\n            rows.push(...tokenRows);\r\n        } else if (isHistoryImportExportTx(tx)) {\r\n            const amtStr = bnToBigAvaxX(tx.amount).toString();\r\n            rows.push([tx.id, dateStr, tx.type, 'AVAX', amtStr, '', `${tx.source} to ${tx.destination}`]);\r\n        } else if (isHistoryEVMTx(tx)) {\r\n            const amtStr = bnToBigAvaxC(tx.amount).toString();\r\n            const amtSigned = tx.isSender ? `-${amtStr}` : amtStr;\r\n            if (!tx.input) {\r\n                const addr = tx.isSender ? tx.to : tx.from;\r\n                rows.push([tx.id, dateStr, tx.type, 'AVAX', amtSigned, addr, `C`]);\r\n            }\r\n        }\r\n    });\r\n    return rows;\r\n}\r\n"],"names":["TestXBlockchainID","DefaultPlatformChainID","TestCBlockchainID","TestAvaxAssetID","Avalanche","ethers","BinTools","ContractFactory","MinterSet","OutputOwners","Common","tx","FeeMarketEIP1559Transaction","Transaction","Chain","Hardfork","ethersProvider","AVMConstants","PlatformVMConstants","EVMConstants","activeNetwork","BN","erc20Cache","PubSub","Buffer","Crypto","AjsBuffer","bip39","PayloadTypes","BufferAvalanche","Assets.getAssetDescription","EVMInput","SECPTransferOutput","TransferableOutput","ExportTx","UnsignedTx","costExportTx","AVMUTXOSet","PlatformUTXOSet","UnixNow","AVMKeyPair","computeAddress","computePublicKey","EVMKeyPair","networks","ECPair","payments","bip32","BufferNative","RLP","PlatformImportTx","AVMTx","PlatformTx","EVMTx","EVMImportTx","AVMSelectCredentialClass","PlatformSelectCredentialClass","EVMSelectCredentialClass","Signature","bitcoin","EVMKeyChain","personalSign","signTypedData","SignTypedDataVersion"],"mappings":"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"}
{"version":3,"file":"index.js","sources":["../src/Network/helpers/rpcFromConfig.ts","../src/Network/constants.ts","../src/helpers/http_client.ts","../src/helpers/network_helper.ts","../src/utils/FetchHTTPProvider.ts","../src/Network/getEthersProvider.ts","../node_modules/events/events.js","../src/Network/eventEmitter.ts","../src/errors.ts","../src/Asset/Erc20Token.ts","../src/Asset/Erc20.ts","../src/Network/network.ts","../src/Network/helpers/aliasFromNetworkID.ts","../src/Network/helpers/idFromAlias.ts","../src/Network/providers/AVMWebSocketProvider.ts","../src/Network/providers/EVMWebSocketProvider.ts","../src/Network/providers/WebsocketProvider.ts","../src/Network/utils.ts","../src/Asset/Assets.ts","../src/Asset/ERC721/getErc721Token.ts","../src/common.ts","../src/Keystore/Crypto.ts","../src/Keystore/constants.ts","../src/Keystore/keystore.ts","../src/Wallet/constants.ts","../src/helpers/tx_helper.ts","../node_modules/bip32-path/index.js","../src/Wallet/helpers/derivationHelper.ts","../src/helpers/utxo_helper.ts","../src/helpers/address_helper.ts","../src/utils/utils.ts","../src/utils/number_utils.ts","../src/utils/fee_utils.ts","../src/utils/waitTxUtils.ts","../src/utils/sleep.ts","../src/utils/CypherAES.ts","../src/Explorer/ortelius/utxoUtils.ts","../src/History/history_helpers.ts","../src/History/base_tx_parser.ts","../src/Explorer/snowtrace/constants.ts","../src/Explorer/snowtrace/utils.ts","../src/Explorer/snowtrace/snowtrace.ts","../src/Explorer/snowtrace/types.ts","../src/Explorer/ortelius/requests.ts","../src/Explorer/ortelius/utils.ts","../src/Explorer/coingecko/requests.ts","../src/History/importExportParser.ts","../src/History/parsers.ts","../src/History/evmParser.ts","../src/History/types.ts","../src/UniversalTx/UniversalNode.ts","../src/UniversalTx/UniversalNodeX.ts","../src/UniversalTx/UniversalNodeP.ts","../src/UniversalTx/UniversalNodeC.ts","../src/UniversalTx/utils.ts","../src/helpers/gas_helper.ts","../src/Wallet/Wallet.ts","../src/Wallet/HdScanner.ts","../src/Wallet/HDWalletAbstract.ts","../src/Wallet/EVM/EvmWalletReadonly.ts","../src/Wallet/PublicMnemonicWallet.ts","../node_modules/@obsidiansystems/hw-app-avalanche/lib/Avalanche.js","../src/Wallet/Ledger/utils.ts","../src/Wallet/Ledger/errors.ts","../src/Wallet/Ledger/LedgerWallet.ts","../src/Wallet/EVM/EvmWallet.ts","../src/Wallet/MnemonicWallet.ts","../src/Wallet/SingletonWallet.ts","../src/Csv/constants.ts","../src/Csv/createCsvContent.ts","../src/Csv/parseStakingTxs.ts","../src/Csv/parseNormalTxs.ts"],"sourcesContent":["import { NetworkConfig } from '../types';\r\n\r\nexport function getRpcC(conf: NetworkConfig) {\r\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/C/rpc`;\r\n}\r\nexport function getRpcX(conf: NetworkConfig) {\r\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/X`;\r\n}\r\nexport function getRpcP(conf: NetworkConfig) {\r\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/P`;\r\n}\r\n","import { NetworkConfig } from './types';\r\nimport {\r\n    DefaultPlatformChainID,\r\n    TestAvaxAssetID,\r\n    TestCBlockchainID,\r\n    TestXBlockchainID,\r\n} from '@c4tplatform/caminojs/dist/utils/constants';\r\nimport { getRpcC, getRpcP, getRpcX } from './helpers/rpcFromConfig';\r\n\r\nexport const LocalnetConfig: NetworkConfig = {\r\n    rawUrl: 'http://localhost:9650',\r\n    apiProtocol: 'http',\r\n    apiIp: 'localhost',\r\n    apiPort: 9650,\r\n    networkID: 12345,\r\n    // @ts-ignore\r\n    xChainID: TestXBlockchainID,\r\n    // @ts-ignore\r\n    pChainID: DefaultPlatformChainID,\r\n    // @ts-ignore\r\n    cChainID: TestCBlockchainID,\r\n    // @ts-ignore\r\n    evmChainID: 43112,\r\n    // @ts-ignore\r\n    avaxID: TestAvaxAssetID,\r\n    get rpcUrl() {\r\n        return {\r\n            c: getRpcC(this),\r\n            p: getRpcP(this),\r\n            x: getRpcX(this),\r\n        };\r\n    },\r\n};\r\n\r\n// Default network connection\r\nexport const DefaultConfig = LocalnetConfig;\r\n","export class HttpClient {\r\n    private TIMEOUT = 10000;\r\n\r\n    constructor(private baseURL: string) {}\r\n\r\n    get<T>(path: string, params?: Record<string, any>): Promise<T> {\r\n        const query = params && new URLSearchParams(params);\r\n        path = query ? `${path}?${query.toString()}` : path;\r\n        const url = `${this.baseURL}/${path}`;\r\n        const options = {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' },\r\n        };\r\n        return this.handleResponse<T>(this.fetchWithTimeout(url, options));\r\n    }\r\n\r\n    post<T>(path: string, data: Record<string, any>): Promise<T> {\r\n        const url = `${this.baseURL}/${path}`;\r\n        const options = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(data),\r\n        };\r\n        return this.handleResponse<T>(this.fetchWithTimeout(url, options));\r\n    }\r\n\r\n    private async handleResponse<T>(responsePromise: Promise<Response>): Promise<T> {\r\n        const response = await responsePromise;\r\n        if (response.ok) {\r\n            return await response.json();\r\n        } else {\r\n            const errorMessage = await response.text();\r\n            return Promise.reject(new Error(errorMessage));\r\n        }\r\n    }\r\n\r\n    private async fetchWithTimeout(input: RequestInfo, options: RequestInit & { timeout?: number } = {}) {\r\n        const { timeout = this.TIMEOUT } = options;\r\n\r\n        const controller = new AbortController();\r\n        const id = setTimeout(() => controller.abort(), timeout);\r\n        const response = await fetch(input, {\r\n            ...options,\r\n            signal: controller.signal,\r\n        });\r\n        clearTimeout(id);\r\n        return response;\r\n    }\r\n}\r\n","import { NetworkConfig } from '@/Network/types';\r\n\r\nimport { Avalanche } from '@c4tplatform/caminojs/dist';\r\nimport { HttpClient } from './http_client';\r\n\r\nexport function wsUrlFromConfigX(config: NetworkConfig): string {\r\n    let protocol = config.apiProtocol === 'http' ? 'ws' : 'wss';\r\n    return `${protocol}://${config.apiIp}:${config.apiPort}/ext/bc/X/events`;\r\n}\r\n\r\nexport function wsUrlFromConfigEVM(config: NetworkConfig): string {\r\n    let protocol = config.apiProtocol === 'http' ? 'ws' : 'wss';\r\n    return `${protocol}://${config.apiIp}:${config.apiPort}/ext/bc/C/ws`;\r\n}\r\n\r\n/**\r\n * Given the base url of an Avalanche API, requests the Network ID\r\n * @param url The base url for the Avalanche API\r\n */\r\nexport async function getNetworkIdFromURL(url: string): Promise<number> {\r\n    // TODO: Not be the best to assume /ext/info but Avalanchejs complicates things\r\n    let res = await fetch(url + '/ext/info', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            jsonrpc: '2.0',\r\n            id: 1,\r\n            method: 'info.getNetworkID',\r\n        }),\r\n    });\r\n    const data = await res.json();\r\n\r\n    return parseInt(data.result.networkID);\r\n}\r\n\r\nexport function createAvalancheProvider(config: NetworkConfig) {\r\n    return new Avalanche(config.apiIp, config.apiPort, config.apiProtocol, config.networkID);\r\n}\r\n\r\n/**\r\n * Given a network configuration returns an HttpClient instance connected to the explorer\r\n */\r\nexport function createExplorerApi(networkConfig: NetworkConfig) {\r\n    if (!networkConfig.explorerURL) {\r\n        throw new Error('Network configuration does not specify an explorer API.');\r\n    }\r\n\r\n    return new HttpClient(networkConfig.explorerURL);\r\n}\r\n\r\n/**\r\n * Given a network configuration returns an HttpClient instance connected to the signavault\r\n */\r\nexport function createSignavaultApi(networkConfig: NetworkConfig) {\r\n    if (!networkConfig.signavaultURL) {\r\n        throw new Error('Network configuration does not specify an explorer API.');\r\n    }\r\n\r\n    return new HttpClient(networkConfig.signavaultURL);\r\n}\r\n\r\n/**\r\n * Checks if the given network accepts credentials.\r\n * This must be true to use cookies.\r\n */\r\nexport async function canUseCredentials(config: NetworkConfig): Promise<boolean> {\r\n    let provider = createAvalancheProvider(config);\r\n    provider.setRequestConfig('withCredentials', true);\r\n\r\n    let infoApi = provider.Info();\r\n\r\n    // Make a dummy request with credentials\r\n    try {\r\n        await infoApi.getNetworkID();\r\n        return true;\r\n        // eslint-disable-next-line\r\n    } catch (e) {}\r\n\r\n    provider.setRequestConfig('withCredentials', false);\r\n\r\n    try {\r\n        await infoApi.getNetworkID();\r\n    } catch (e) {\r\n        throw new Error('Unable to connect.');\r\n    }\r\n\r\n    return false;\r\n}\r\n","const NETWORK_TIMEOUT = 'NETWORK_REQUEST_TIMEOUT';\r\n\r\n/**\r\n * HttpProvider should be used to send rpc calls over http\r\n */\r\nexport class FetchHttpProvider {\r\n    withCredentials: boolean;\r\n    timeout: number;\r\n    headers?: { name: string; value: string }[];\r\n    agent?: string;\r\n    connected: boolean;\r\n\r\n    constructor(\r\n        private host: string,\r\n        options?: {\r\n            withCredentials?: boolean;\r\n            timeout?: number;\r\n            headers?: { name: string; value: string }[];\r\n            agent?: string;\r\n            keepAlive?: boolean;\r\n        }\r\n    ) {\r\n        this.withCredentials = options?.withCredentials || false;\r\n        this.timeout = options?.timeout || 0;\r\n        this.headers = options?.headers;\r\n        this.agent = options?.agent;\r\n        this.connected = false;\r\n\r\n        this.host = host || 'http://localhost:8545';\r\n    }\r\n\r\n    private prepareRequest(body: string): Promise<unknown> {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(this.host, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    ...this.headers?.reduce((prev, current) => ({ ...prev, [current.name]: current.value }), {}),\r\n                },\r\n                credentials: this.withCredentials ? 'include' : undefined,\r\n                body,\r\n            }).then(resolve, reject);\r\n\r\n            if (this.timeout) {\r\n                const e = new Error(NETWORK_TIMEOUT);\r\n                setTimeout(reject, this.timeout, e);\r\n            }\r\n        });\r\n    }\r\n\r\n    send(payload: unknown, callback: (error: Error | null, response?: any) => void) {\r\n        this.prepareRequest(JSON.stringify(payload))\r\n            .then((response: any) => response?.json())\r\n            .then((result) => {\r\n                this.connected = true;\r\n                callback(null, result);\r\n            })\r\n            .catch((e) => {\r\n                if (e?.message === NETWORK_TIMEOUT) {\r\n                    callback(new Error('CONNECTION TIMEOUT: timeout of ' + this.timeout + ' ms achived'));\r\n                    return;\r\n                }\r\n\r\n                const error = new Error(\"CONNECTION ERROR: Couldn't connect to node \" + this.host + '.') as any;\r\n                if (e) {\r\n                    error.code = e.code;\r\n                    error.reason = e.reason;\r\n                }\r\n\r\n                this.connected = false;\r\n                callback(error);\r\n            });\r\n    }\r\n\r\n    disconnect() {\r\n        //NO OP\r\n    }\r\n\r\n    supportsSubscriptions() {\r\n        return false;\r\n    }\r\n}\r\n","import { ethers } from 'ethers';\r\nimport { NetworkConfig } from '@/Network/types';\r\n\r\nexport function getEthersJsonRpcProvider(config: NetworkConfig) {\r\n    return new ethers.providers.JsonRpcProvider(config.rpcUrl.c, {\r\n        name: '',\r\n        chainId: config.evmChainID,\r\n    });\r\n}\r\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","import { NetworkConfig } from '@/Network/types';\r\nimport EventEmitter from 'events';\r\n\r\n/**\r\n * Fire network change event\r\n * @param newNetwork The newly connected network config\r\n */\r\nexport function emitNetworkChange(newNetwork: NetworkConfig) {\r\n    networkEvents.emit('network_change', newNetwork);\r\n}\r\n\r\nconst MAX_LISTENERS = 100;\r\n\r\nexport const networkEvents: EventEmitter = new EventEmitter();\r\nnetworkEvents.setMaxListeners(MAX_LISTENERS);\r\n","export const NO_NETWORK = new Error('No network selected.');\r\nexport const NO_EXPLORER_API = new Error('Explorer API not found.');\r\n","import { activeNetwork, web3 } from '@/Network/network';\r\nimport ERC20Abi from '@openzeppelin/contracts/build/contracts/ERC20.json';\r\nimport { Erc20TokenData } from '@/Asset/types';\r\nimport { NO_NETWORK } from '@/errors';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport { Contract } from 'web3-eth-contract';\r\nimport xss from 'xss';\r\nexport class Erc20Token {\r\n    contract: Contract;\r\n    address: string;\r\n    name: string;\r\n    symbol: string;\r\n    decimals: number;\r\n    chainId: number;\r\n    data: Erc20TokenData;\r\n\r\n    constructor(data: Erc20TokenData) {\r\n        this.name = xss(data.name);\r\n        this.symbol = xss(data.symbol);\r\n        this.address = data.address;\r\n        this.decimals = data.decimals;\r\n        this.chainId = data.chainId;\r\n        this.data = data;\r\n\r\n        //@ts-ignore\r\n        this.contract = new web3.eth.Contract(ERC20Abi.abi, data.address);\r\n    }\r\n\r\n    toData(): Erc20TokenData {\r\n        return this.data;\r\n    }\r\n\r\n    static async getData(address: string): Promise<Erc20TokenData> {\r\n        //@ts-ignore\r\n        let contract = new web3.eth.Contract(ERC20Abi.abi, address);\r\n\r\n        let contractCalls = await Promise.all([\r\n            contract.methods.name().call(),\r\n            contract.methods.symbol().call(),\r\n            contract.methods.decimals().call(),\r\n        ]);\r\n        // Purify the values for XSS protection\r\n        let name = xss(contractCalls[0]);\r\n        let symbol = xss(contractCalls[1]);\r\n        let decimals = parseInt(contractCalls[2]);\r\n\r\n        if (!activeNetwork) {\r\n            throw NO_NETWORK;\r\n        }\r\n\r\n        return {\r\n            name,\r\n            symbol,\r\n            decimals,\r\n            address,\r\n            chainId: activeNetwork.evmChainID,\r\n        };\r\n    }\r\n\r\n    async balanceOf(address: string): Promise<BN> {\r\n        let bal = await this.contract.methods.balanceOf(address).call();\r\n        return new BN(bal);\r\n    }\r\n}\r\n","import { Erc20Store, Erc20TokenData } from '@/Asset/types';\r\nimport { Erc20Token } from '@/Asset/Erc20Token';\r\n\r\nexport let erc20Cache: Erc20Store = {};\r\n\r\nexport function getErc20Cache(): Erc20Store {\r\n    return {\r\n        ...erc20Cache,\r\n    };\r\n}\r\n\r\n/**\r\n * Clears the internal erc20 cache.\r\n */\r\nexport function bustErc20Cache() {\r\n    erc20Cache = {};\r\n}\r\n\r\n/**\r\n * Fetches ERC20 data from the given contract address and adds the token to the given store.\r\n * @param address ERC20 Contract address\r\n */\r\nasync function addErc20Token(address: string): Promise<Erc20Token> {\r\n    let existing = erc20Cache[address];\r\n    if (existing) {\r\n        return existing;\r\n    }\r\n\r\n    try {\r\n        let data: Erc20TokenData = await Erc20Token.getData(address);\r\n        let token = new Erc20Token(data);\r\n\r\n        erc20Cache[address] = token;\r\n        return token;\r\n    } catch (e) {\r\n        throw new Error('Unable to add ERC20 contract.');\r\n    }\r\n}\r\n\r\n/**\r\n * Initates and caches an erc20 token from the given data.\r\n * @param data Information such as name, symbol, and address about the ERC20 token.\r\n */\r\nexport function addErc20TokenFromData(data: Erc20TokenData): Erc20Token {\r\n    let address = data.address;\r\n    let existing = erc20Cache[address];\r\n    if (existing) {\r\n        return existing;\r\n    }\r\n\r\n    let token = new Erc20Token(data);\r\n    erc20Cache[address] = token;\r\n    return token;\r\n}\r\n\r\nexport async function getContractDataErc20(address: string): Promise<Erc20TokenData> {\r\n    try {\r\n        let data: Erc20TokenData = await Erc20Token.getData(address);\r\n        return data;\r\n    } catch (e) {\r\n        throw new Error(`ERC20 contract ${address} does not exist.`);\r\n    }\r\n}\r\n\r\nexport async function getErc20Token(address: string): Promise<Erc20Token> {\r\n    let storeItem = erc20Cache[address];\r\n    if (storeItem) {\r\n        return storeItem;\r\n    } else {\r\n        return await addErc20Token(address);\r\n    }\r\n}\r\n","import { Avalanche } from '@c4tplatform/caminojs/dist';\r\nimport Web3 from 'web3';\r\nimport { DefaultConfig } from './constants';\r\nimport { NetworkConfig, NetworkConfigRpc, NetworkProtocolType } from './types';\r\nimport { getRpcC, getRpcP, getRpcX } from './helpers/rpcFromConfig';\r\nimport { createAvalancheProvider } from '@/helpers/network_helper';\r\nimport { FetchHttpProvider } from '@/utils/FetchHTTPProvider';\r\nimport { getEthersJsonRpcProvider } from '@/Network/getEthersProvider';\r\nimport { ethers } from 'ethers';\r\nimport { HttpClient } from '@/helpers/http_client';\r\nimport { emitNetworkChange } from '@/Network/eventEmitter';\r\nimport { bustErc20Cache } from '@/Asset/Erc20';\r\n\r\nlet avaInst: Avalanche = createAvalancheProvider(DefaultConfig);\r\n\r\nexport const avalanche = () => avaInst;\r\n\r\nfunction getProviderFromUrl(url: string, credentials = false) {\r\n    return new FetchHttpProvider(url, {\r\n        timeout: 20000,\r\n        withCredentials: credentials,\r\n    });\r\n}\r\n\r\nconst rpcUrl = getRpcC(DefaultConfig);\r\nexport const web3 = new Web3(getProviderFromUrl(rpcUrl, true) as any);\r\n// JSON RPC Ethers provider\r\nexport let ethersProvider: ethers.providers.JsonRpcProvider = getEthersJsonRpcProvider(DefaultConfig);\r\nexport let explorer_api: HttpClient | null = null;\r\nexport let activeNetwork: NetworkConfig = DefaultConfig;\r\n\r\n/**\r\n * Returns the evm chain ID of the active network\r\n */\r\nexport function getEvmChainID(): number {\r\n    return activeNetwork.evmChainID;\r\n}\r\n\r\n/**\r\n * Changes the connected network of the SDK.\r\n * This is a synchronous call that does not do any network requests.\r\n * @param conf\r\n * @param credentials\r\n */\r\nexport function setAvalanche(ava: Avalanche): void {\r\n    avaInst = ava;\r\n\r\n    let conf: NetworkConfig = {\r\n        rawUrl: ava.getURL(),\r\n        apiProtocol: ava.getProtocol().toLowerCase() as NetworkProtocolType,\r\n        apiIp: ava.getHost(),\r\n        apiPort: ava.getPort(),\r\n        networkID: ava.getNetworkID(),\r\n        xChainID: ava.getNetwork().X.blockchainID,\r\n        pChainID: ava.getNetwork().P.blockchainID,\r\n        cChainID: ava.getNetwork().C.blockchainID,\r\n        avaxID: ava.getNetwork().X.avaxAssetID,\r\n        evmChainID: ava.getNetwork().C.chainID ?? 0,\r\n        get rpcUrl(): NetworkConfigRpc {\r\n            return {\r\n                c: getRpcC(this),\r\n                p: getRpcP(this),\r\n                x: getRpcX(this),\r\n            };\r\n        },\r\n    };\r\n\r\n    const useCredentials = ava.getRequestConfig().withCredentials === true;\r\n\r\n    let rpcUrl = getRpcC(conf);\r\n    web3.setProvider(getProviderFromUrl(rpcUrl, useCredentials) as any);\r\n    // Update ethers provider\r\n    ethersProvider = getEthersJsonRpcProvider(conf);\r\n\r\n    activeNetwork = conf;\r\n\r\n    emitNetworkChange(conf);\r\n    bustErc20Cache();\r\n}\r\n","import { ChainIdType } from '@/common';\r\nimport { activeNetwork } from '@/Network/network';\r\n\r\n/**\r\n * Given the chain ID returns the chain alias\r\n * @param id Chain id\r\n */\r\nexport function idToChainAlias(id: string): ChainIdType {\r\n    if (id === activeNetwork.xChainID) {\r\n        return 'X';\r\n    } else if (id === activeNetwork.pChainID) {\r\n        return 'P';\r\n    } else if (id === activeNetwork.cChainID) {\r\n        return 'C';\r\n    }\r\n    throw new Error('Unknown chain ID.');\r\n}\r\n","import { ChainIdType } from '@/common';\r\nimport { avalanche } from '@/Network/network';\r\n\r\n/**\r\n * Given a chain alias, returns the chain id.\r\n * @param alias `X`, `P` or `C`\r\n */\r\nexport function chainIdFromAlias(alias: ChainIdType) {\r\n    if (alias === 'X') {\r\n        return avalanche().XChain().getBlockchainID();\r\n    } else if (alias === 'P') {\r\n        return avalanche().PChain().getBlockchainID();\r\n    } else if (alias === 'C') {\r\n        return avalanche().CChain().getBlockchainID();\r\n    }\r\n    throw new Error('Unknown chain alias.');\r\n}\r\n","import Sockette from 'sockette';\r\nimport { PubSub } from '@c4tplatform/caminojs/dist';\r\nimport { WalletType } from '@/Wallet/types';\r\n\r\nconst FILTER_ADDRESS_SIZE = 1000;\r\n\r\nexport class AVMWebSocketProvider {\r\n    isConnected = false;\r\n    socket: Sockette;\r\n\r\n    wallets: WalletType[] = [];\r\n    boundHandler: any;\r\n\r\n    constructor(wsUrl: string) {\r\n        this.boundHandler = () => this.onWalletAddressChange();\r\n        this.socket = new Sockette(wsUrl, {\r\n            onopen: () => {\r\n                this.onOpen();\r\n            },\r\n            onclose: () => {\r\n                this.onClose();\r\n            },\r\n            onmessage: () => {\r\n                this.onMessage();\r\n            },\r\n            onerror: () => {\r\n                this.onError();\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Starts watching for transactions on this wallet.\r\n     * @param wallet The wallet instance to track\r\n     */\r\n    trackWallet(wallet: WalletType): void {\r\n        if (this.wallets.includes(wallet)) {\r\n            return;\r\n        }\r\n        this.wallets.push(wallet);\r\n\r\n        wallet.on('addressChanged', this.boundHandler);\r\n        this.updateFilterAddresses();\r\n    }\r\n\r\n    onWalletAddressChange(): void {\r\n        this.updateFilterAddresses();\r\n    }\r\n\r\n    removeWallet(w: WalletType): void {\r\n        if (!this.wallets.includes(w)) {\r\n            return;\r\n        }\r\n\r\n        let index = this.wallets.indexOf(w);\r\n        this.wallets.splice(index, 1);\r\n        w.off('addressChanged', this.boundHandler);\r\n    }\r\n\r\n    setEndpoint(wsUrl: string): void {\r\n        this.socket.close();\r\n\r\n        this.socket = new Sockette(wsUrl, {\r\n            onopen: () => {\r\n                this.onOpen();\r\n            },\r\n            onclose: () => {\r\n                this.onClose();\r\n            },\r\n            onmessage: () => {\r\n                this.onMessage();\r\n            },\r\n            onerror: () => {\r\n                this.onError();\r\n            },\r\n        });\r\n    }\r\n\r\n    // Clears the filter listening to X chain transactions\r\n    clearFilter(): void {\r\n        let pubsub = new PubSub();\r\n        let bloom = pubsub.newBloom(FILTER_ADDRESS_SIZE);\r\n        this.socket.send(bloom);\r\n    }\r\n\r\n    /**\r\n     * Creates a bloom filter from the addresses of the tracked wallets and subscribes to\r\n     * transactions on the node.\r\n     */\r\n    updateFilterAddresses() {\r\n        if (!this.isConnected) {\r\n            return;\r\n        }\r\n\r\n        let wallets = this.wallets;\r\n\r\n        let addrs = [];\r\n        for (let i = 0; i < wallets.length; i++) {\r\n            let w = wallets[i];\r\n            let externalAddrs = w.getExternalAddressesXSync();\r\n            let addrsLen = externalAddrs.length;\r\n            let startIndex = Math.max(0, addrsLen - FILTER_ADDRESS_SIZE);\r\n            let addAddrs = externalAddrs.slice(startIndex);\r\n            addrs.push(...addAddrs);\r\n        }\r\n\r\n        let pubsub = new PubSub();\r\n        let bloom = pubsub.newBloom(FILTER_ADDRESS_SIZE);\r\n        this.socket.send(bloom);\r\n\r\n        // Divide addresses by 100 and send multiple messages\r\n        // There is a max msg size ~10kb\r\n        const GROUP_AMOUNT = 100;\r\n        let index = 0;\r\n        while (index < addrs.length) {\r\n            let chunk = addrs.slice(index, index + GROUP_AMOUNT);\r\n            let addAddrs = pubsub.addAddresses(chunk);\r\n            this.socket.send(addAddrs);\r\n            index += GROUP_AMOUNT;\r\n        }\r\n    }\r\n\r\n    private updateWalletBalanceX() {\r\n        this.wallets.forEach((w) => {\r\n            w.updateUtxosX();\r\n        });\r\n    }\r\n\r\n    private onOpen() {\r\n        this.isConnected = true;\r\n        this.updateFilterAddresses();\r\n    }\r\n\r\n    private onMessage() {\r\n        this.updateWalletBalanceX();\r\n    }\r\n\r\n    private onClose() {\r\n        this.isConnected = false;\r\n    }\r\n\r\n    private onError() {}\r\n}\r\n","import { ethers } from 'ethers';\r\nimport { WalletType } from '@/Wallet/types';\r\n\r\nconst SOCKET_RECONNECT_TIMEOUT = 1000;\r\n\r\nexport class EVMWebSocketProvider {\r\n    provider: ethers.providers.WebSocketProvider;\r\n    wsUrl: string;\r\n    wallets: WalletType[] = [];\r\n\r\n    constructor(wsUrl: string) {\r\n        let provider = new ethers.providers.WebSocketProvider(wsUrl);\r\n        this.provider = provider;\r\n        this.wsUrl = wsUrl;\r\n\r\n        this.addListeners();\r\n    }\r\n\r\n    setEndpoint(wsUrl: string): void {\r\n        this.destroyConnection();\r\n        let provider = new ethers.providers.WebSocketProvider(wsUrl);\r\n        this.provider = provider;\r\n        this.wsUrl = wsUrl;\r\n\r\n        this.addListeners();\r\n    }\r\n\r\n    trackWallet(wallet: WalletType): void {\r\n        if (this.wallets.includes(wallet)) {\r\n            return;\r\n        }\r\n\r\n        this.wallets.push(wallet);\r\n    }\r\n\r\n    removeWallet(wallet: WalletType): void {\r\n        if (!this.wallets.includes(wallet)) {\r\n            return;\r\n        }\r\n\r\n        let index = this.wallets.indexOf(wallet);\r\n        this.wallets.splice(index, 1);\r\n    }\r\n\r\n    async destroyConnection(): Promise<void> {\r\n        this.provider._websocket.onclose = () => {};\r\n        await this.provider.destroy();\r\n    }\r\n\r\n    async reconnect(): Promise<void> {\r\n        // Clear the current onclose handler so that we dont attempt a reconnection\r\n        await this.destroyConnection();\r\n        let wsProvider = new ethers.providers.WebSocketProvider(this.wsUrl);\r\n        this.provider = wsProvider;\r\n    }\r\n\r\n    private addListeners() {\r\n        let provider = this.provider;\r\n\r\n        provider.on('block', () => {\r\n            this.onBlock();\r\n        });\r\n\r\n        // Save default function so we can keep calling it\r\n        let defaultOnOpen = provider._websocket.onopen;\r\n        let defaultOnClose = provider._websocket.onclose;\r\n\r\n        provider._websocket.onopen = (ev: any) => {\r\n            if (defaultOnOpen) defaultOnOpen(ev);\r\n        };\r\n\r\n        provider._websocket.onclose = (ev: any) => {\r\n            if (defaultOnClose) defaultOnClose(ev);\r\n\r\n            setTimeout(() => {\r\n                this.reconnect();\r\n            }, SOCKET_RECONNECT_TIMEOUT);\r\n        };\r\n    }\r\n\r\n    private removeListeners() {\r\n        this.provider.off('block', this.onBlock);\r\n    }\r\n\r\n    private onBlock() {\r\n        // Update wallet balances\r\n        this.wallets.forEach((w) => {\r\n            w.updateAvaxBalanceC();\r\n        });\r\n    }\r\n}\r\n","import { AVMWebSocketProvider } from '@/Network/providers/AVMWebSocketProvider';\r\nimport { EVMWebSocketProvider } from '@/Network/providers/EVMWebSocketProvider';\r\nimport { WalletType } from '@/Wallet/types';\r\nimport { NetworkConfig } from '@/Network/types';\r\nimport { wsUrlFromConfigEVM, wsUrlFromConfigX } from '@/helpers/network_helper';\r\nimport { activeNetwork } from '@/Network/network';\r\n\r\nexport class WebsocketProvider {\r\n    avmProvider: AVMWebSocketProvider;\r\n    evmProvider: EVMWebSocketProvider;\r\n\r\n    constructor(avmEndpoint: string, evmEndpoint: string) {\r\n        this.avmProvider = new AVMWebSocketProvider(avmEndpoint);\r\n        this.evmProvider = new EVMWebSocketProvider(evmEndpoint);\r\n    }\r\n\r\n    static fromActiveNetwork(): WebsocketProvider {\r\n        return WebsocketProvider.fromNetworkConfig(activeNetwork);\r\n    }\r\n\r\n    static fromNetworkConfig(config: NetworkConfig): WebsocketProvider {\r\n        let evm = wsUrlFromConfigEVM(config);\r\n        let avm = wsUrlFromConfigX(config);\r\n        return new WebsocketProvider(avm, evm);\r\n    }\r\n\r\n    public setEndpoints(avmEndpoint: string, evmEndpoint: string): void {\r\n        this.avmProvider.setEndpoint(avmEndpoint);\r\n        this.evmProvider.setEndpoint(evmEndpoint);\r\n    }\r\n\r\n    public setNetwork(config: NetworkConfig): void {\r\n        let evm = wsUrlFromConfigEVM(config);\r\n        let avm = wsUrlFromConfigX(config);\r\n        this.setEndpoints(avm, evm);\r\n    }\r\n\r\n    public trackWallet(wallet: WalletType): void {\r\n        this.avmProvider.trackWallet(wallet);\r\n        this.evmProvider.trackWallet(wallet);\r\n    }\r\n\r\n    public removeWallet(wallet: WalletType): void {\r\n        this.avmProvider.removeWallet(wallet);\r\n        this.evmProvider.removeWallet(wallet);\r\n    }\r\n}\r\n","import { NetworkConfig } from '@/Network/types';\r\nimport { LocalnetConfig } from '@/Network/constants';\r\nimport { activeNetwork } from '@/Network/network';\r\n\r\nexport function isFujiNetwork(_: NetworkConfig) {\r\n    return false;\r\n}\r\n\r\nexport function isMainnetNetwork(_: NetworkConfig) {\r\n    return false;\r\n}\r\n\r\nexport function isLocalNetwork(activeNetwork: NetworkConfig) {\r\n    return activeNetwork.networkID === LocalnetConfig.networkID;\r\n}\r\n\r\nexport function getAvaxAssetID() {\r\n    return activeNetwork.avaxID;\r\n}\r\n\r\nexport function getActiveNetworkConfig() {\r\n    return activeNetwork;\r\n}\r\n","import { avalanche } from '@/Network/network';\r\n\r\nimport { iAssetCache, iAssetDescriptionClean } from '@/Asset/types';\r\nimport xss from 'xss';\r\nlet assetCache: iAssetCache = {};\r\n\r\nexport function getAssetDescriptionSync(assetId: string): iAssetDescriptionClean {\r\n    if (typeof assetCache[assetId] === 'undefined') throw new Error(`Asset ID ${assetId} is not known.`);\r\n    return assetCache[assetId];\r\n}\r\n\r\n/**\r\n * Uses the node api to get meta data given an asset ID. Saves the result to cache.\r\n * @param assetId\r\n */\r\nexport async function getAssetDescription(assetId: string): Promise<iAssetDescriptionClean> {\r\n    let cache = assetCache[assetId];\r\n    if (cache) {\r\n        return cache;\r\n    }\r\n\r\n    try {\r\n        let res = await avalanche().XChain().getAssetDescription(assetId);\r\n        let clean: iAssetDescriptionClean = {\r\n            ...res,\r\n            assetID: assetId,\r\n            name: xss(res.name),\r\n            symbol: xss(res.symbol),\r\n        };\r\n\r\n        assetCache[assetId] = clean;\r\n        return clean;\r\n    } catch (e) {\r\n        throw new Error(`Asset ${assetId} does not exist.`);\r\n    }\r\n}\r\n","import { abi } from '@openzeppelin/contracts/build/contracts/ERC721.json';\r\nimport { ContractFactory } from 'ethers';\r\n// import { web3 } from '@/Network';\r\n// import { AbiItem } from 'web3-utils';\r\n/**\r\n * Returns an ethers ERC721 Contract\r\n * @param address\r\n */\r\nexport function getErc721TokenEthers(address: string) {\r\n    return ContractFactory.getContract(address, abi);\r\n}\r\n\r\n/**\r\n * Returns an web3 ERC721 Contract\r\n * @param address\r\n */\r\n// export function getErc721TokenWeb3(address: string) {\r\n//     return new web3.eth.Contract(abi as AbiItem[], address);\r\n// }\r\n","import { BinTools } from '@c4tplatform/caminojs/dist';\r\n\r\nexport const bintools = BinTools.getInstance();\r\n\r\nexport type ChainIdType = 'X' | 'P' | 'C';\r\n","import { Buffer } from 'buffer/';\r\nimport createHash from 'create-hash';\r\n\r\n/**\r\n * @ignore\r\n */\r\n\r\n/**\r\n * Helper utility for encryption and password hashing, browser-safe.\r\n * Encryption is using AES-GCM with a random public nonce.\r\n */\r\nexport default class CryptoHelpers {\r\n    protected ivSize = 12;\r\n\r\n    protected saltSize = 16;\r\n\r\n    protected tagLength = 128;\r\n\r\n    protected aesLength = 256;\r\n\r\n    public keygenIterations = 200000; //3.0, 2.0 uses 100000\r\n\r\n    /**\r\n     * Internal-intended function for cleaning passwords.\r\n     *\r\n     * @param password\r\n     * @param salt\r\n     */\r\n    _pwcleaner(password: string, slt: Buffer): Buffer {\r\n        const pw: Buffer = Buffer.from(password, 'utf8');\r\n        return this.sha256(Buffer.concat([pw, slt]));\r\n    }\r\n    /**\r\n     * Internal-intended function for producing an intermediate key.\r\n     *\r\n     * @param pwkey\r\n     */\r\n\r\n    async _keyMaterial(pwkey: Buffer): Promise<CryptoKey> {\r\n        return crypto.subtle.importKey('raw', new Uint8Array(pwkey), { name: 'PBKDF2' }, false, ['deriveKey']);\r\n    }\r\n\r\n    /**\r\n     * Internal-intended function for turning an intermediate key into a salted key.\r\n     *\r\n     * @param keyMaterial\r\n     * @param salt\r\n     */\r\n    async _deriveKey(keyMaterial: CryptoKey, salt: Buffer): Promise<CryptoKey> {\r\n        return crypto.subtle.deriveKey(\r\n            {\r\n                name: 'PBKDF2',\r\n                salt,\r\n                iterations: this.keygenIterations,\r\n                hash: 'SHA-256',\r\n            },\r\n            keyMaterial,\r\n            { name: 'AES-GCM', length: this.aesLength },\r\n            false,\r\n            ['encrypt', 'decrypt']\r\n        );\r\n    }\r\n\r\n    /**\r\n     * A SHA256 helper function.\r\n     *\r\n     * @param message The message to hash\r\n     *\r\n     * @returns A {@link https://github.com/feross/buffer|Buffer} containing the SHA256 hash of the message\r\n     */\r\n    sha256(message: string | Buffer): Buffer {\r\n        let buff: Buffer;\r\n        if (typeof message === 'string') {\r\n            buff = Buffer.from(message, 'utf8');\r\n        } else {\r\n            buff = Buffer.from(message);\r\n        }\r\n        return Buffer.from(createHash('sha256').update(buff).digest()); // ensures correct Buffer class is used\r\n    }\r\n\r\n    /**\r\n     * Generates a randomized {@link https://github.com/feross/buffer|Buffer} to be used as a salt\r\n     */\r\n    makeSalt(): Buffer {\r\n        const salt = Buffer.alloc(this.saltSize);\r\n        crypto.getRandomValues(salt);\r\n        return salt;\r\n    }\r\n\r\n    /**\r\n     * Produces a password-safe hash.\r\n     *\r\n     * @param password A string for the password\r\n     * @param salt An optional {@link https://github.com/feross/buffer|Buffer} containing a salt used in the password hash\r\n     *\r\n     * @returns An object containing the \"salt\" and the \"hash\" produced by this function, both as {@link https://github.com/feross/buffer|Buffer}.\r\n     */\r\n    async pwhash(password: string, salt: Buffer): Promise<{ salt: Buffer; hash: Buffer }> {\r\n        let slt: Buffer;\r\n        if (salt instanceof Buffer) {\r\n            slt = salt;\r\n            // @ts-ignore\r\n        } else if (salt instanceof Uint8Array && process.env.NODE_ENV === 'test') {\r\n            slt = salt;\r\n        } else {\r\n            slt = this.makeSalt();\r\n        }\r\n\r\n        const hash: Buffer = this._pwcleaner(password, this._pwcleaner(password, slt));\r\n        return { salt: slt, hash };\r\n    }\r\n\r\n    /**\r\n     * Encrypts plaintext with the provided password using AES-GCM.\r\n     *\r\n     * @param password A string for the password\r\n     * @param plaintext The plaintext to encrypt\r\n     * @param salt An optional {@link https://github.com/feross/buffer|Buffer} for the salt to use in the encryption process\r\n     *\r\n     * @returns An object containing the \"salt\", \"iv\", and \"ciphertext\", all as {@link https://github.com/feross/buffer|Buffer}.\r\n     */\r\n    async encrypt(\r\n        password: string,\r\n        plaintext: Buffer | string,\r\n        salt: Buffer | undefined = undefined\r\n    ): Promise<{ salt: Buffer; iv: Buffer; ciphertext: Buffer }> {\r\n        let slt: Buffer;\r\n        if (typeof salt !== 'undefined' && salt instanceof Buffer) {\r\n            slt = salt;\r\n        } else {\r\n            slt = this.makeSalt();\r\n        }\r\n\r\n        let pt: Buffer;\r\n        if (typeof plaintext !== 'undefined' && plaintext instanceof Buffer) {\r\n            pt = plaintext;\r\n        } else {\r\n            pt = Buffer.from(plaintext, 'utf8');\r\n        }\r\n        const pwkey: Buffer = this._pwcleaner(password, slt);\r\n        const keyMaterial: CryptoKey = await this._keyMaterial(pwkey);\r\n        const pkey: CryptoKey = await this._deriveKey(keyMaterial, slt);\r\n        const iv: Buffer = Buffer.from(crypto.getRandomValues(new Uint8Array(this.ivSize)));\r\n\r\n        const ciphertext: Buffer = Buffer.from(\r\n            await crypto.subtle.encrypt(\r\n                {\r\n                    name: 'AES-GCM',\r\n                    iv,\r\n                    additionalData: slt,\r\n                    tagLength: this.tagLength,\r\n                },\r\n                pkey,\r\n                pt\r\n            )\r\n        );\r\n\r\n        return {\r\n            salt: slt,\r\n            iv,\r\n            ciphertext,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Decrypts ciphertext with the provided password, iv, and salt.\r\n     *\r\n     * @param password A string for the password\r\n     * @param ciphertext A {@link https://github.com/feross/buffer|Buffer} for the ciphertext\r\n     * @param salt A {@link https://github.com/feross/buffer|Buffer} for the salt\r\n     * @param iv A {@link https://github.com/feross/buffer|Buffer} for the iv\r\n     */\r\n    async decrypt(password: string, ciphertext: Buffer, salt: Buffer, iv: Buffer): Promise<Buffer> {\r\n        const pwkey: Buffer = this._pwcleaner(password, salt);\r\n        const keyMaterial: CryptoKey = await this._keyMaterial(pwkey);\r\n        const pkey: CryptoKey = await this._deriveKey(keyMaterial, salt);\r\n\r\n        const pt: Buffer = Buffer.from(\r\n            await crypto.subtle.decrypt(\r\n                {\r\n                    name: 'AES-GCM',\r\n                    iv, // The initialization vector you used to encrypt\r\n                    additionalData: salt, // The addtionalData you used to encrypt (if any)\r\n                    tagLength: 128, // The tagLength you used to encrypt (if any)\r\n                },\r\n                pkey, // from generateKey or importKey above\r\n                ciphertext // ArrayBuffer of the data\r\n            )\r\n        );\r\n        return pt;\r\n    }\r\n\r\n    constructor() {}\r\n}\r\n","export const SUPPORTED_VERSION = ['2.0', '3.0', '4.0', '5.0', '6.0'];\r\nexport const KEYSTORE_VERSION = '6.0'; // the current version\r\nexport const ITERATIONS_V2 = 100000;\r\nexport const ITERATIONS_V3 = 200000; // and any version above\r\n","// Functions to manage import/export of keystore files\r\nimport {\r\n    AllKeyFileDecryptedTypes,\r\n    AllKeyFileTypes,\r\n    KeyFileDecryptedV2,\r\n    KeyFileDecryptedV3,\r\n    KeyFileDecryptedV4,\r\n    KeyFileDecryptedV5,\r\n    KeyFileDecryptedV6,\r\n    KeyFileKeyDecryptedV2,\r\n    KeyFileKeyDecryptedV3,\r\n    KeyFileKeyDecryptedV4,\r\n    KeyFileKeyDecryptedV5,\r\n    KeyFileKeyDecryptedV6,\r\n    KeyFileKeyV2,\r\n    KeyFileKeyV3,\r\n    KeyFileKeyV4,\r\n    KeyFileKeyV5,\r\n    KeyFileKeyV6,\r\n    KeyFileV2,\r\n    KeyFileV3,\r\n    KeyFileV4,\r\n    KeyFileV5,\r\n    KeyFileV6,\r\n    KeystoreFileKeyType,\r\n} from './types';\r\nimport { avalanche } from '@/Network/network';\r\nimport { Buffer } from 'buffer/';\r\nimport { MnemonicWallet } from '@/Wallet/MnemonicWallet';\r\nimport Crypto from './Crypto';\r\nimport { SingletonWallet } from '@/Wallet/SingletonWallet';\r\nimport { AccessWalletMultipleInput } from './types';\r\n// import { keyToKeypair } from '@/helpers/helper'\r\nimport * as bip39 from 'bip39';\r\nimport { bintools } from '@/common';\r\nimport { Buffer as AjsBuffer } from '@c4tplatform/caminojs/dist';\r\nimport { ITERATIONS_V2, ITERATIONS_V3, KEYSTORE_VERSION } from '@/Keystore/constants';\r\n\r\nconst cryptoHelpers = new Crypto();\r\n\r\ninterface IHash {\r\n    salt: Buffer;\r\n    hash: Buffer;\r\n}\r\n\r\ninterface PKCrypt {\r\n    salt: Buffer;\r\n    iv: Buffer;\r\n    ciphertext: Buffer;\r\n}\r\n\r\nexport async function readV2(data: KeyFileV2, pass: string) {\r\n    const version: string = data.version;\r\n    cryptoHelpers.keygenIterations = ITERATIONS_V2;\r\n\r\n    let salt: Buffer = bintools.cb58Decode(data.salt);\r\n    let pass_hash: string = data.pass_hash;\r\n\r\n    let checkHashString: string;\r\n    let checkHash: Buffer = await cryptoHelpers._pwcleaner(pass, salt);\r\n    checkHashString = bintools.cb58Encode(AjsBuffer.from(checkHash));\r\n\r\n    if (checkHashString !== pass_hash) {\r\n        throw 'INVALID_PASS';\r\n    }\r\n\r\n    let keys: KeyFileKeyV2[] = data.keys;\r\n    let keysDecrypt: KeyFileKeyDecryptedV2[] = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let key_data: KeyFileKeyV2 = keys[i];\r\n\r\n        let key: Buffer = bintools.cb58Decode(key_data.key);\r\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\r\n\r\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\r\n        let key_string = bintools.cb58Encode(AjsBuffer.from(key_decrypt));\r\n\r\n        keysDecrypt.push({\r\n            key: key_string,\r\n        });\r\n    }\r\n\r\n    return {\r\n        version,\r\n        activeIndex: 0,\r\n        keys: keysDecrypt,\r\n    };\r\n}\r\nexport async function readV3(data: KeyFileV3, pass: string) {\r\n    const version: string = data.version;\r\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\r\n\r\n    let salt: Buffer = bintools.cb58Decode(data.salt);\r\n    let pass_hash: string = data.pass_hash;\r\n\r\n    let checkHashString: string;\r\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\r\n    checkHashString = bintools.cb58Encode(AjsBuffer.from(checkHash.hash));\r\n\r\n    if (checkHashString !== pass_hash) {\r\n        throw 'INVALID_PASS';\r\n    }\r\n\r\n    let keys: KeyFileKeyV3[] = data.keys;\r\n    let keysDecrypt: KeyFileKeyDecryptedV3[] = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let key_data: KeyFileKeyV3 = keys[i];\r\n\r\n        let key: Buffer = bintools.cb58Decode(key_data.key);\r\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\r\n\r\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\r\n        let key_string = bintools.cb58Encode(AjsBuffer.from(key_decrypt));\r\n\r\n        keysDecrypt.push({\r\n            key: key_string,\r\n        });\r\n    }\r\n\r\n    return {\r\n        version,\r\n        activeIndex: 0,\r\n        keys: keysDecrypt,\r\n    };\r\n}\r\nexport async function readV4(data: KeyFileV4, pass: string): Promise<KeyFileDecryptedV5> {\r\n    const version = data.version;\r\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\r\n\r\n    let salt: Buffer = bintools.cb58Decode(data.salt);\r\n    let pass_hash: string = data.pass_hash;\r\n\r\n    let checkHashString: string;\r\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\r\n    checkHashString = bintools.cb58Encode(AjsBuffer.from(checkHash.hash));\r\n\r\n    if (checkHashString !== pass_hash) {\r\n        throw 'INVALID_PASS';\r\n    }\r\n\r\n    let keys: KeyFileKeyV4[] = data.keys;\r\n    let keysDecrypt: KeyFileKeyDecryptedV4[] = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let key_data: KeyFileKeyV4 = keys[i];\r\n\r\n        let key: Buffer = bintools.cb58Decode(key_data.key);\r\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\r\n\r\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\r\n        let key_string = bintools.cb58Encode(AjsBuffer.from(key_decrypt));\r\n\r\n        keysDecrypt.push({\r\n            key: key_string,\r\n        });\r\n    }\r\n\r\n    return {\r\n        version,\r\n        activeIndex: 0,\r\n        keys: keysDecrypt,\r\n    };\r\n}\r\n\r\nexport async function readV5(data: KeyFileV5, pass: string): Promise<KeyFileDecryptedV5> {\r\n    const version: string = data.version;\r\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\r\n\r\n    let salt: Buffer = bintools.cb58Decode(data.salt);\r\n    let pass_hash = data.pass_hash;\r\n\r\n    let checkHashString: string;\r\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\r\n    checkHashString = bintools.cb58Encode(AjsBuffer.from(checkHash.hash));\r\n\r\n    if (checkHashString !== pass_hash) {\r\n        throw 'INVALID_PASS';\r\n    }\r\n\r\n    let keys: KeyFileKeyV5[] = data.keys;\r\n    let keysDecrypt: KeyFileKeyDecryptedV5[] = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let key_data: KeyFileKeyV5 = keys[i];\r\n\r\n        let key: Buffer = bintools.cb58Decode(key_data.key);\r\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\r\n\r\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\r\n        let key_string = key_decrypt.toString();\r\n\r\n        keysDecrypt.push({\r\n            key: key_string,\r\n        });\r\n    }\r\n\r\n    return {\r\n        version,\r\n        activeIndex: 0,\r\n        keys: keysDecrypt,\r\n    };\r\n}\r\n\r\nexport async function readV6(data: KeyFileV6, pass: string): Promise<KeyFileDecryptedV6> {\r\n    const version: string = data.version;\r\n    const activeIndex = data.activeIndex;\r\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\r\n\r\n    let salt: Buffer = bintools.cb58Decode(data.salt);\r\n\r\n    let keys: KeyFileKeyV6[] = data.keys;\r\n    let keysDecrypt: KeyFileKeyDecryptedV6[] = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let key_data: KeyFileKeyV6 = keys[i];\r\n\r\n        let key: Buffer = bintools.cb58Decode(key_data.key);\r\n        let type: KeystoreFileKeyType = key_data.type;\r\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\r\n\r\n        let key_decrypt: Buffer;\r\n        try {\r\n            key_decrypt = await cryptoHelpers.decrypt(pass, key, salt, nonce);\r\n        } catch (e) {\r\n            throw 'INVALID_PASS';\r\n        }\r\n\r\n        const key_string = key_decrypt.toString();\r\n\r\n        keysDecrypt.push({\r\n            key: key_string,\r\n            type: type,\r\n        });\r\n    }\r\n\r\n    return {\r\n        version,\r\n        activeIndex: activeIndex || 0,\r\n        keys: keysDecrypt,\r\n    };\r\n}\r\n\r\n/**\r\n * Will decrypt and return the keys of the encrypted wallets in the given json file\r\n * @param data A JSON file of encrypted wallet keys\r\n * @param pass The password to decrypt the keys\r\n */\r\nexport async function readKeyFile(data: AllKeyFileTypes, pass: string): Promise<AllKeyFileDecryptedTypes> {\r\n    switch (data.version) {\r\n        case '6.0':\r\n            return await readV6(data as KeyFileV6, pass);\r\n        case '5.0':\r\n            return await readV5(data as KeyFileV5, pass);\r\n        case '4.0':\r\n            return await readV4(data as KeyFileV4, pass);\r\n        case '3.0':\r\n            return await readV3(data as KeyFileV3, pass);\r\n        case '2.0':\r\n            return await readV2(data as KeyFileV2, pass);\r\n        default:\r\n            throw 'INVALID_VERSION';\r\n    }\r\n}\r\n\r\nexport function extractKeysV2(\r\n    file: KeyFileDecryptedV2 | KeyFileDecryptedV3 | KeyFileDecryptedV4\r\n): AccessWalletMultipleInput[] {\r\n    let chainID = avalanche().XChain().getBlockchainAlias();\r\n    let keys = (file as KeyFileDecryptedV2 | KeyFileDecryptedV3 | KeyFileDecryptedV4).keys;\r\n\r\n    return keys.map((key) => {\r\n        // Private keys from the keystore file do not have the PrivateKey- prefix\r\n        let pk = 'PrivateKey-' + key.key;\r\n        // let keypair = keyToKeypair(pk, chainID)\r\n        let keypair = avalanche().XChain().newKeyChain().importKey(pk);\r\n\r\n        let keyBuf = keypair.getPrivateKey();\r\n        let keyHex: string = keyBuf.toString('hex');\r\n        let paddedKeyHex = keyHex.padStart(64, '0');\r\n        let mnemonic: string = bip39.entropyToMnemonic(paddedKeyHex);\r\n\r\n        return {\r\n            key: mnemonic,\r\n            type: 'mnemonic',\r\n        };\r\n    });\r\n}\r\n\r\nexport function extractKeysV5(file: KeyFileDecryptedV5): AccessWalletMultipleInput[] {\r\n    return file.keys.map((key) => ({\r\n        key: key.key,\r\n        type: 'mnemonic',\r\n    }));\r\n}\r\n\r\nexport function extractKeysV6(file: KeyFileDecryptedV6): AccessWalletMultipleInput[] {\r\n    return file.keys.map((key) => ({\r\n        type: key.type,\r\n        key: key.key,\r\n    }));\r\n}\r\n\r\nexport function extractKeysFromDecryptedFile(file: AllKeyFileDecryptedTypes): AccessWalletMultipleInput[] {\r\n    switch (file.version) {\r\n        case '6.0':\r\n            return extractKeysV6(file as KeyFileDecryptedV6);\r\n        case '5.0':\r\n            return extractKeysV5(file as KeyFileDecryptedV5);\r\n        case '4.0':\r\n            return extractKeysV2(file as KeyFileDecryptedV4);\r\n        case '3.0':\r\n            return extractKeysV2(file as KeyFileDecryptedV3);\r\n        case '2.0':\r\n            return extractKeysV2(file as KeyFileDecryptedV2);\r\n        default:\r\n            throw 'INVALID_VERSION';\r\n    }\r\n}\r\n\r\n/**\r\n * Given an array of wallets, the active index, and a password, return an encrypted JSON object that is the keystore file\r\n * @param wallets An array of wallet to encrypt\r\n * @param pass Password used in encryption\r\n * @param activeIndex Index of the active wallet in the `wallets` array\r\n * @return Returns a JSON object that can later be decrypted with `readKeyfile` and the given password\r\n */\r\nexport async function makeKeyfile(\r\n    wallets: (MnemonicWallet | SingletonWallet)[],\r\n    pass: string,\r\n    activeIndex: number\r\n): Promise<KeyFileV6> {\r\n    // 3.0 and above uses 200,000\r\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\r\n\r\n    let salt: Buffer = await cryptoHelpers.makeSalt();\r\n\r\n    let keys: KeyFileKeyV6[] = [];\r\n\r\n    for (let i = 0; i < wallets.length; i++) {\r\n        let wallet = wallets[i];\r\n        let key;\r\n        let type: KeystoreFileKeyType;\r\n        if (wallet.type === 'singleton') {\r\n            key = (wallet as SingletonWallet).key;\r\n            type = 'singleton';\r\n        } else {\r\n            key = (wallet as MnemonicWallet).getMnemonic();\r\n            type = 'mnemonic';\r\n        }\r\n        let pk_crypt: PKCrypt = await cryptoHelpers.encrypt(pass, key, salt);\r\n\r\n        let key_data: KeyFileKeyV6 = {\r\n            key: bintools.cb58Encode(AjsBuffer.from(pk_crypt.ciphertext)),\r\n            iv: bintools.cb58Encode(AjsBuffer.from(pk_crypt.iv)),\r\n            type: type,\r\n        };\r\n        keys.push(key_data);\r\n    }\r\n\r\n    let file_data: KeyFileV6 = {\r\n        version: KEYSTORE_VERSION,\r\n        salt: bintools.cb58Encode(AjsBuffer.from(salt)),\r\n        activeIndex,\r\n        keys: keys,\r\n    };\r\n    return file_data;\r\n}\r\n","// HD WALLET\r\n// m / purpose' / coin_type' / account' / change / address_index\r\n\r\nexport const AVAX_TOKEN_INDEX: string = '9000';\r\nexport const AVAX_TOKEN_PATH = `m/44'/${AVAX_TOKEN_INDEX}'`;\r\nexport const AVAX_ACCOUNT_PATH: string = `m/44'/${AVAX_TOKEN_INDEX}'/0'`; // Change and index left out\r\nexport const ETH_ACCOUNT_PATH: string = `m/44'/60'/0'`;\r\nexport const LEDGER_ETH_ACCOUNT_PATH = ETH_ACCOUNT_PATH + '/0/0';\r\n\r\nexport const HD_SCAN_GAP_SIZE: number = 20; // a gap of at least 20 indexes is needed to claim an index unused\r\nexport const SCAN_SIZE: number = 70; // the total number of utxos to look at initially to calculate last index\r\nexport const HD_SCAN_LOOK_UP_WINDOW: number = 64; // Number of addresses to check with the explorer at a single call\r\nexport const SCAN_RANGE: number = SCAN_SIZE - HD_SCAN_GAP_SIZE; // How many items are actually scanned\r\n\r\nexport const LEDGER_EXCHANGE_TIMEOUT = 90_000;\r\nexport const MIN_EVM_SUPPORT_V = '0.5.3';\r\n/**\r\n * In order to free the thread when deriving addresses, the execution will sleep every N address derived\r\n */\r\nexport const DERIVATION_SLEEP_INTERVAL = 200;\r\n","import { avalanche, ethersProvider, web3 } from '@/Network/network';\r\n\r\nimport { BN, Buffer } from '@c4tplatform/caminojs/dist';\r\nimport {\r\n    AVMConstants,\r\n    MinterSet,\r\n    NFTMintOutput,\r\n    UnsignedTx as AVMUnsignedTx,\r\n    UTXO as AVMUTXO,\r\n    UTXOSet as AVMUTXOSet,\r\n    UTXOSet,\r\n} from '@c4tplatform/caminojs/dist/apis/avm';\r\n\r\nimport { PayloadBase } from '@c4tplatform/caminojs/dist/utils';\r\nimport { OutputOwners } from '@c4tplatform/caminojs/dist/common';\r\nimport { PlatformVMConstants, UTXOSet as PlatformUTXOSet } from '@c4tplatform/caminojs/dist/apis/platformvm';\r\n\r\nimport { EVMConstants } from '@c4tplatform/caminojs/dist/apis/evm';\r\n\r\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\r\nimport EthereumjsCommon from '@ethereumjs/common';\r\nimport Common, { Chain } from '@ethereumjs/common';\r\n\r\nimport ERC20Abi from '@openzeppelin/contracts/build/contracts/ERC20.json';\r\nimport ERC721Abi from '@openzeppelin/contracts/build/contracts/ERC721.json';\r\nimport { bintools } from '@/common';\r\nimport { ExportChainsC, ExportChainsP, ExportChainsX } from '@/Wallet/types';\r\nimport { chainIdFromAlias } from '@/Network/helpers/idFromAlias';\r\nimport { getErc721TokenEthers } from '@/Asset';\r\n\r\nexport async function buildCreateNftFamilyTx(\r\n    name: string,\r\n    symbol: string,\r\n    groupNum: number,\r\n    fromAddrs: string[],\r\n    minterAddr: string,\r\n    changeAddr: string,\r\n    utxoSet: UTXOSet\r\n) {\r\n    let fromAddresses = fromAddrs;\r\n    let changeAddress = changeAddr;\r\n    let minterAddress = minterAddr;\r\n\r\n    const minterSets: MinterSet[] = [];\r\n\r\n    // Create the groups\r\n    for (let i = 0; i < groupNum; i++) {\r\n        const minterSet: MinterSet = new MinterSet(1, [minterAddress]);\r\n        minterSets.push(minterSet);\r\n    }\r\n\r\n    let unsignedTx: AVMUnsignedTx = await avalanche()\r\n        .XChain()\r\n        .buildCreateNFTAssetTx(utxoSet, fromAddresses, [changeAddress], minterSets, name, symbol);\r\n    return unsignedTx;\r\n}\r\n\r\nexport async function buildMintNftTx(\r\n    mintUtxo: AVMUTXO,\r\n    payload: PayloadBase,\r\n    quantity: number,\r\n    ownerAddress: string,\r\n    changeAddress: string,\r\n    fromAddresses: string[],\r\n    utxoSet: UTXOSet\r\n): Promise<AVMUnsignedTx> {\r\n    let addrBuf = bintools.parseAddress(ownerAddress, 'X');\r\n    let owners = [];\r\n\r\n    let sourceAddresses = fromAddresses;\r\n\r\n    for (let i = 0; i < quantity; i++) {\r\n        let owner = new OutputOwners([addrBuf]);\r\n        owners.push(owner);\r\n    }\r\n\r\n    let groupID = (mintUtxo.getOutput() as NFTMintOutput).getGroupID();\r\n\r\n    let mintTx = await avalanche()\r\n        .XChain()\r\n        .buildCreateNFTMintTx(\r\n            utxoSet,\r\n            owners,\r\n            sourceAddresses,\r\n            [changeAddress],\r\n            mintUtxo.getUTXOID(),\r\n            groupID,\r\n            payload\r\n        );\r\n    return mintTx;\r\n}\r\n\r\nexport async function buildAvmExportTransaction(\r\n    destinationChain: ExportChainsX,\r\n    utxoSet: AVMUTXOSet,\r\n    fromAddresses: string[],\r\n    toAddress: string,\r\n    amount: BN, // export amount + fee\r\n    sourceChangeAddress: string\r\n) {\r\n    let destinationChainId = chainIdFromAlias(destinationChain);\r\n\r\n    return await avalanche()\r\n        .XChain()\r\n        .buildExportTx(utxoSet as AVMUTXOSet, amount, destinationChainId, [toAddress], fromAddresses, [\r\n            sourceChangeAddress,\r\n        ]);\r\n}\r\n\r\nexport async function buildPlatformExportTransaction(\r\n    utxoSet: PlatformUTXOSet,\r\n    fromAddresses: string[],\r\n    toAddress: string,\r\n    amount: BN, // export amount + fee\r\n    sourceChangeAddress: string,\r\n    destinationChain: ExportChainsP\r\n) {\r\n    let destinationChainId = chainIdFromAlias(destinationChain);\r\n\r\n    return await avalanche()\r\n        .PChain()\r\n        .buildExportTx(utxoSet, amount, destinationChainId, [toAddress], fromAddresses, [sourceChangeAddress]);\r\n}\r\n\r\n/**\r\n *\r\n * @param fromAddresses\r\n * @param toAddress\r\n * @param amount\r\n * @param fromAddressBech\r\n * @param destinationChain Either `X` or `P`\r\n * @param fee Export fee in nAVAX\r\n */\r\nexport async function buildEvmExportTransaction(\r\n    fromAddresses: string[],\r\n    toAddress: string,\r\n    amount: BN, // export amount + fee\r\n    fromAddressBech: string,\r\n    destinationChain: ExportChainsC,\r\n    fee: BN\r\n) {\r\n    let destinationChainId = chainIdFromAlias(destinationChain);\r\n\r\n    const nonce = await web3.eth.getTransactionCount(fromAddresses[0]);\r\n    const avaxAssetIDBuf: Buffer = await avalanche().XChain().getAVAXAssetID();\r\n    const avaxAssetIDStr: string = bintools.cb58Encode(avaxAssetIDBuf);\r\n\r\n    let fromAddressHex = fromAddresses[0];\r\n\r\n    return await avalanche()\r\n        .CChain()\r\n        .buildExportTx(\r\n            amount,\r\n            avaxAssetIDStr,\r\n            destinationChainId,\r\n            fromAddressHex,\r\n            fromAddressBech,\r\n            [toAddress],\r\n            nonce,\r\n            undefined,\r\n            undefined,\r\n            fee\r\n        );\r\n}\r\n\r\nexport async function buildEvmTransferEIP1559Tx(\r\n    from: string,\r\n    to: string,\r\n    amount: BN, // in wei\r\n    priorityFee: BN,\r\n    maxFee: BN,\r\n    gasLimit: number\r\n) {\r\n    const nonce = await web3.eth.getTransactionCount(from);\r\n    const chainId = await web3.eth.getChainId();\r\n    const networkId = await web3.eth.net.getId();\r\n\r\n    const common = Common.custom({ networkId, chainId });\r\n\r\n    const tx = FeeMarketEIP1559Transaction.fromTxData(\r\n        {\r\n            nonce: nonce,\r\n            maxFeePerGas: '0x' + maxFee.toString('hex'),\r\n            maxPriorityFeePerGas: '0x' + priorityFee.toString('hex'),\r\n            gasLimit: gasLimit,\r\n            to: to,\r\n            value: '0x' + amount.toString('hex'),\r\n            data: '0x',\r\n        },\r\n        { common }\r\n    );\r\n    return tx;\r\n}\r\n\r\nexport async function buildEvmTransferNativeTx(\r\n    from: string,\r\n    to: string,\r\n    amount: BN, // in wei\r\n    gasPrice: BN,\r\n    gasLimit: number\r\n) {\r\n    const nonce = await web3.eth.getTransactionCount(from);\r\n    const chainId = await web3.eth.getChainId();\r\n    const networkId = await web3.eth.net.getId();\r\n\r\n    const common = Common.custom({ networkId, chainId });\r\n\r\n    const tx = Transaction.fromTxData(\r\n        {\r\n            nonce: nonce,\r\n            gasPrice: '0x' + gasPrice.toString('hex'),\r\n            gasLimit: gasLimit,\r\n            to: to,\r\n            value: '0x' + amount.toString('hex'),\r\n            data: '0x',\r\n        },\r\n        { common }\r\n    );\r\n    return tx;\r\n}\r\n\r\nexport async function buildCustomEvmTx(\r\n    from: string,\r\n    gasPrice: BN,\r\n    gasLimit: number,\r\n    data?: string,\r\n    to?: string,\r\n    value?: string,\r\n    nonce?: number\r\n): Promise<Transaction> {\r\n    if (typeof nonce === 'undefined') {\r\n        nonce = await web3.eth.getTransactionCount(from);\r\n    }\r\n\r\n    const chainId = await web3.eth.getChainId();\r\n    const networkId = await web3.eth.net.getId();\r\n\r\n    const chainParams = {\r\n        common: EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul'),\r\n    };\r\n\r\n    let gasPriceHex = `0x${gasPrice.toString('hex')}`;\r\n\r\n    let tx = Transaction.fromTxData(\r\n        {\r\n            nonce,\r\n            gasPrice: gasPriceHex,\r\n            gasLimit,\r\n            value,\r\n            to,\r\n            data,\r\n        },\r\n        chainParams\r\n    );\r\n    return tx;\r\n}\r\n\r\nexport async function buildEvmTransferErc20Tx(\r\n    from: string,\r\n    to: string,\r\n    amount: BN, // in wei\r\n    gasPrice: BN,\r\n    gasLimit: number,\r\n    contractAddress: string\r\n) {\r\n    //@ts-ignore\r\n    const cont = new web3.eth.Contract(ERC20Abi.abi, contractAddress);\r\n    const tokenTx = cont.methods.transfer(to, amount.toString());\r\n\r\n    let data = tokenTx.encodeABI();\r\n\r\n    let tx = await buildCustomEvmTx(from, gasPrice, gasLimit, data, contractAddress);\r\n\r\n    return tx;\r\n}\r\n\r\nexport async function buildEvmTransferErc721Tx(\r\n    from: string,\r\n    to: string,\r\n    gasPrice: BN,\r\n    gasLimit: number,\r\n    tokenContract: string,\r\n    tokenId: number\r\n) {\r\n    const nonce = await web3.eth.getTransactionCount(from);\r\n    const chainId = await web3.eth.getChainId();\r\n    const networkId = await web3.eth.net.getId();\r\n    const chainParams = {\r\n        common: EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul'),\r\n    };\r\n    // @ts-ignore\r\n    const contract = new web3.eth.Contract(ERC721Abi.abi, tokenContract);\r\n    const tokenTx = contract.methods['safeTransferFrom(address,address,uint256)'](from, to, tokenId);\r\n\r\n    let tx = Transaction.fromTxData(\r\n        {\r\n            nonce: nonce,\r\n            gasPrice: '0x' + gasPrice.toString('hex'),\r\n            gasLimit: gasLimit,\r\n            value: '0x0',\r\n            to: tokenContract,\r\n            data: tokenTx.encodeABI(),\r\n        },\r\n        chainParams\r\n    );\r\n    return tx;\r\n}\r\n\r\nexport async function estimateErc20Gas(tokenContract: string, from: string, to: string, value: BN) {\r\n    //@ts-ignore\r\n    const contract = new web3.eth.Contract(ERC20Abi.abi, tokenContract);\r\n    const tokenTx = contract.methods.transfer(to, value.toString());\r\n    return await tokenTx.estimateGas({\r\n        from: from,\r\n    });\r\n}\r\n\r\n/**\r\n * Estimate the gas limit for the ERC721 `safeTransferFrom(address,address,uint256)` method.\r\n * @param contract\r\n * @param from\r\n * @param to\r\n * @param tokenID\r\n */\r\nexport async function estimateErc721TransferGas(contract: string, from: string, to: string, tokenID: number) {\r\n    let c = getErc721TokenEthers(contract);\r\n    c = c.connect(ethersProvider);\r\n    const gas = await c.estimateGas['safeTransferFrom(address,address,uint256)'](from, to, tokenID);\r\n    return gas.toNumber();\r\n}\r\n\r\n/**\r\n * Estimates the gas needed to send AVAX\r\n * @param to Destination address\r\n * @param amount Amount of AVAX to send, given in WEI\r\n * @param gasPrice Given in WEI\r\n */\r\nexport async function estimateAvaxGas(from: string, to: string, amount: BN, gasPrice: BN): Promise<number> {\r\n    try {\r\n        return await web3.eth.estimateGas({\r\n            from,\r\n            to,\r\n            gasPrice: `0x${gasPrice.toString('hex')}`,\r\n            value: `0x${amount.toString('hex')}`,\r\n        });\r\n    } catch (e) {\r\n        // TODO: Throws an error if we do not have enough avax balance\r\n        //TODO: Is it ok to return 21000\r\n        return 21000;\r\n    }\r\n}\r\n\r\nexport enum AvmTxNameEnum {\r\n    'Transaction' = AVMConstants.BASETX,\r\n    'Mint' = AVMConstants.CREATEASSETTX,\r\n    'Operation' = AVMConstants.OPERATIONTX,\r\n    'Import' = AVMConstants.IMPORTTX,\r\n    'Export' = AVMConstants.EXPORTTX,\r\n}\r\n\r\nexport enum PlatfromTxNameEnum {\r\n    'Transaction' = PlatformVMConstants.BASETX,\r\n    'Add Validator' = PlatformVMConstants.ADDVALIDATORTX,\r\n    'Add Delegator' = PlatformVMConstants.ADDDELEGATORTX,\r\n    'Import' = PlatformVMConstants.IMPORTTX,\r\n    'Export' = PlatformVMConstants.EXPORTTX,\r\n    'Add Subnet Validator' = PlatformVMConstants.ADDSUBNETVALIDATORTX,\r\n    'Create Chain' = PlatformVMConstants.CREATECHAINTX,\r\n    'Create Subnet' = PlatformVMConstants.CREATESUBNETTX,\r\n    'Advance Time' = PlatformVMConstants.ADVANCETIMETX,\r\n    'Reward Validator' = PlatformVMConstants.REWARDVALIDATORTX,\r\n}\r\n\r\n// TODO: create asset transactions\r\nexport enum ParseableAvmTxEnum {\r\n    'Transaction' = AVMConstants.BASETX,\r\n    'Import' = AVMConstants.IMPORTTX,\r\n    'Export' = AVMConstants.EXPORTTX,\r\n}\r\n\r\nexport enum ParseablePlatformEnum {\r\n    'Transaction' = PlatformVMConstants.BASETX,\r\n    'Add Validator' = PlatformVMConstants.ADDVALIDATORTX,\r\n    'Add Delegator' = PlatformVMConstants.ADDDELEGATORTX,\r\n    'Import' = PlatformVMConstants.IMPORTTX,\r\n    'Export' = PlatformVMConstants.EXPORTTX,\r\n}\r\n\r\nexport enum ParseableEvmTxEnum {\r\n    'Import' = EVMConstants.IMPORTTX,\r\n    'Export' = EVMConstants.EXPORTTX,\r\n}\r\n","/*\n * Bitcoin BIP32 path helpers\n * (C) 2016 Alex Beregszaszi\n */\n\nconst HARDENED = 0x80000000\n\nvar BIPPath = function (path) {\n  if (!Array.isArray(path)) {\n    throw new Error('Input must be an Array')\n  }\n  if (path.length === 0) {\n    throw new Error('Path must contain at least one level')\n  }\n  for (var i = 0; i < path.length; i++) {\n    if (typeof path[i] !== 'number') {\n      throw new Error('Path element is not a number')\n    }\n  }\n  this.path = path\n}\n\nBIPPath.validatePathArray = function (path) {\n  try {\n    BIPPath.fromPathArray(path)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nBIPPath.validateString = function (text, reqRoot) {\n  try {\n    BIPPath.fromString(text, reqRoot)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nBIPPath.fromPathArray = function (path) {\n  return new BIPPath(path)\n}\n\nBIPPath.fromString = function (text, reqRoot) {\n  // skip the root\n  if (/^m\\//i.test(text)) {\n    text = text.slice(2)\n  } else if (reqRoot) {\n    throw new Error('Root element is required')\n  }\n\n  var path = text.split('/')\n  var ret = new Array(path.length)\n  for (var i = 0; i < path.length; i++) {\n    var tmp = /(\\d+)([hH\\']?)/.exec(path[i])\n    if (tmp === null) {\n      throw new Error('Invalid input')\n    }\n    ret[i] = parseInt(tmp[1], 10)\n\n    if (ret[i] >= HARDENED) {\n      throw new Error('Invalid child index')\n    }\n\n    if (tmp[2] === 'h' || tmp[2] === 'H' || tmp[2] === '\\'') {\n      ret[i] += HARDENED\n    } else if (tmp[2].length != 0) {\n      throw new Error('Invalid modifier')\n    }\n  }\n  return new BIPPath(ret)\n}\n\nBIPPath.prototype.toPathArray = function () {\n  return this.path\n}\n\nBIPPath.prototype.toString = function (noRoot, oldStyle) {\n  var ret = new Array(this.path.length)\n  for (var i = 0; i < this.path.length; i++) {\n    var tmp = this.path[i]\n    if (tmp & HARDENED) {\n      ret[i] = (tmp & ~HARDENED) + (oldStyle ? 'h' : '\\'')\n    } else {\n      ret[i] = tmp\n    }\n  }\n  return (noRoot ? '' : 'm/') + ret.join('/')\n}\n\nBIPPath.prototype.inspect = function () {\n  return 'BIPPath <' + this.toString() + '>'\n}\n\nmodule.exports = BIPPath\n","import { AVAX_TOKEN_PATH, ETH_ACCOUNT_PATH } from '@/Wallet/constants';\r\n\r\n/**\r\n * Given an account number, returns the Avalanche account derivation path as a string\r\n * @param accountIndex\r\n */\r\nexport function getAccountPathAvalanche(accountIndex: number) {\r\n    if (accountIndex < 0) throw new Error('Account index can not be less than 0.');\r\n    return `${AVAX_TOKEN_PATH}/${accountIndex}'`;\r\n}\r\n\r\n/**\r\n * Returns the string `m/44'/60'/0'/0/n` where `n` is the account index.\r\n * @param accountIndex\r\n */\r\nexport function getAccountPathEVM(accountIndex: number) {\r\n    if (accountIndex < 0) throw new Error('Account index can not be less than 0.');\r\n    return `${ETH_ACCOUNT_PATH}/0/${accountIndex}`;\r\n}\r\n","import { UTXOSet as AVMUTXOSet } from '@c4tplatform/caminojs/dist/apis/avm/utxos';\r\nimport { UTXOSet as PlatformUTXOSet } from '@c4tplatform/caminojs/dist/apis/platformvm/utxos';\r\nimport { UTXOSet as EVMUTXOSet } from '@c4tplatform/caminojs/dist/apis/evm/utxos';\r\nimport { avalanche } from '@/Network/network';\r\nimport { ExportChainsC, ExportChainsP, ExportChainsX } from '@/Wallet/types';\r\nimport { chainIdFromAlias } from '@/Network/helpers/idFromAlias';\r\nimport { GetStakeResponse } from '@c4tplatform/caminojs/dist/apis/platformvm/interfaces';\r\n\r\n/**\r\n *\r\n * @param addrs an array of X chain addresses to get the atomic utxos of\r\n * @param sourceChain Which chain to check against, either `P` or `C`\r\n */\r\nexport async function avmGetAtomicUTXOs(addrs: string[], sourceChain: ExportChainsX): Promise<AVMUTXOSet> {\r\n    const selection = addrs.slice(0, 1024);\r\n    const remaining = addrs.slice(1024);\r\n\r\n    const sourceChainId = chainIdFromAlias(sourceChain);\r\n    let utxoSet = (await avalanche().XChain().getUTXOs(selection, sourceChainId)).utxos;\r\n\r\n    if (remaining.length > 0) {\r\n        const nextSet = await avmGetAtomicUTXOs(remaining, sourceChain);\r\n        utxoSet = utxoSet.merge(nextSet);\r\n    }\r\n    return utxoSet;\r\n}\r\n\r\n// todo: Use end index to get ALL utxos\r\nexport async function platformGetAtomicUTXOs(addrs: string[], sourceChain: ExportChainsP): Promise<PlatformUTXOSet> {\r\n    let selection = addrs.slice(0, 1024);\r\n    let remaining = addrs.slice(1024);\r\n    const sourceChainId = chainIdFromAlias(sourceChain);\r\n\r\n    let utxoSet = (await avalanche().PChain().getUTXOs(selection, sourceChainId)).utxos;\r\n    if (remaining.length > 0) {\r\n        let nextSet = await platformGetAtomicUTXOs(remaining, sourceChain);\r\n        utxoSet = utxoSet.merge(nextSet);\r\n    }\r\n    return utxoSet;\r\n}\r\n\r\n// todo: Use end index to get ALL utxos\r\nexport async function evmGetAtomicUTXOs(addrs: string[], sourceChain: ExportChainsC): Promise<EVMUTXOSet> {\r\n    if (addrs.length > 1024) {\r\n        throw new Error('Number of addresses can not be greater than 1024.');\r\n    }\r\n    const sourceChainId = chainIdFromAlias(sourceChain);\r\n    let result: EVMUTXOSet = (await avalanche().CChain().getUTXOs(addrs, sourceChainId)).utxos;\r\n    return result;\r\n}\r\n\r\nexport async function getStakeForAddresses(addrs: string[]): Promise<GetStakeResponse> {\r\n    if (addrs.length <= 256) {\r\n        let data = await avalanche().PChain().getStake(addrs);\r\n        return data;\r\n    } else {\r\n        //Break the list in to 1024 chunks\r\n        let chunk = addrs.slice(0, 256);\r\n        let remainingChunk = addrs.slice(256);\r\n\r\n        let chunkData = await avalanche().PChain().getStake(chunk);\r\n        let chunkStake = chunkData.staked;\r\n        let chunkUtxos = chunkData.stakedOutputs;\r\n\r\n        let next = await getStakeForAddresses(remainingChunk);\r\n        return {\r\n            staked: chunkStake.add(next.staked),\r\n            stakedOutputs: [...chunkUtxos, ...next.stakedOutputs],\r\n        };\r\n    }\r\n}\r\n\r\nexport async function avmGetAllUTXOs(addrs: string[]): Promise<AVMUTXOSet> {\r\n    if (addrs.length <= 1024) {\r\n        let utxos = await avmGetAllUTXOsForAddresses(addrs);\r\n        return utxos;\r\n    } else {\r\n        //Break the list in to 1024 chunks\r\n        let chunk = addrs.slice(0, 1024);\r\n        let remainingChunk = addrs.slice(1024);\r\n\r\n        let newSet = await avmGetAllUTXOsForAddresses(chunk);\r\n        return newSet.merge(await avmGetAllUTXOs(remainingChunk));\r\n    }\r\n}\r\n\r\nexport async function avmGetAllUTXOsForAddresses(addrs: string[], endIndex?: any): Promise<AVMUTXOSet> {\r\n    if (addrs.length > 1024) throw new Error('Maximum length of addresses is 1024');\r\n    let response;\r\n    if (!endIndex) {\r\n        response = await avalanche().XChain().getUTXOs(addrs);\r\n    } else {\r\n        response = await avalanche().XChain().getUTXOs(addrs, undefined, 0, endIndex);\r\n    }\r\n\r\n    let utxoSet = response.utxos;\r\n    let nextEndIndex = response.endIndex;\r\n    let len = response.numFetched;\r\n\r\n    if (len >= 1024) {\r\n        let subUtxos = await avmGetAllUTXOsForAddresses(addrs, nextEndIndex);\r\n        return utxoSet.merge(subUtxos);\r\n    }\r\n    return utxoSet;\r\n}\r\n\r\n// helper method to get utxos for more than 1024 addresses\r\nexport async function platformGetAllUTXOs(addrs: string[]): Promise<PlatformUTXOSet> {\r\n    if (addrs.length <= 1024) {\r\n        let newSet = await platformGetAllUTXOsForAddresses(addrs);\r\n        return newSet;\r\n    } else {\r\n        //Break the list in to 1024 chunks\r\n        let chunk = addrs.slice(0, 1024);\r\n        let remainingChunk = addrs.slice(1024);\r\n\r\n        let newSet = await platformGetAllUTXOsForAddresses(chunk);\r\n\r\n        return newSet.merge(await platformGetAllUTXOs(remainingChunk));\r\n    }\r\n}\r\n\r\nexport async function platformGetAllUTXOsForAddresses(addrs: string[], endIndex?: any): Promise<PlatformUTXOSet> {\r\n    let response;\r\n    if (!endIndex) {\r\n        response = await avalanche().PChain().getUTXOs(addrs);\r\n    } else {\r\n        response = await avalanche().PChain().getUTXOs(addrs, undefined, 0, endIndex);\r\n    }\r\n\r\n    let utxoSet = response.utxos;\r\n    let nextEndIndex = response.endIndex;\r\n    let len = response.numFetched;\r\n\r\n    if (len >= 1024) {\r\n        let subUtxos = await platformGetAllUTXOsForAddresses(addrs, nextEndIndex);\r\n        return utxoSet.merge(subUtxos);\r\n    }\r\n\r\n    return utxoSet;\r\n}\r\n","import { ChainIdType } from '@/common';\r\nimport Web3 from 'web3';\r\nimport { bintools } from '@/common';\r\n\r\nexport const validateAddress = (address: string): boolean | string => {\r\n    return validateAddressX(address) || validateAddressP(address) || validateAddressEVM(address);\r\n};\r\n\r\nexport function validateAddressX(address: string) {\r\n    try {\r\n        let buff = bintools.parseAddress(address, 'X');\r\n        if (!buff) return false;\r\n        return true;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function validateAddressP(address: string) {\r\n    try {\r\n        let buff = bintools.parseAddress(address, 'P');\r\n        if (!buff) return false;\r\n        return true;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function validateAddressEVM(address: string) {\r\n    return Web3.utils.isAddress(address);\r\n}\r\n\r\n/**\r\n * Returns the human readable part of a X or P bech32 address.\r\n * @param address\r\n */\r\nexport function getAddressHRP(address: string): string {\r\n    if (!validateAddress(address)) {\r\n        throw new Error('Invalid X or P address.');\r\n    }\r\n    return address.split('-')[1].split('1')[0];\r\n}\r\n\r\n/**\r\n * Given an address, return which Chain it belongs to\r\n * @param address\r\n */\r\nexport function getAddressChain(address: string): ChainIdType {\r\n    if (!validateAddress(address)) {\r\n        throw new Error('Invalid address.');\r\n    }\r\n\r\n    if (Web3.utils.isAddress(address)) {\r\n        return 'C';\r\n    } else {\r\n        return address[0] as ChainIdType;\r\n    }\r\n}\r\n","import { Buffer as BufferAvalanche } from '@c4tplatform/caminojs/dist';\r\nimport { validateAddress } from '@/helpers/address_helper';\r\nimport createHash from 'create-hash';\r\nimport { PayloadBase, PayloadTypes } from '@c4tplatform/caminojs/dist/utils';\r\n\r\n/**\r\n * Checks if address is valid.\r\n *\r\n * @return\r\n * boolean if address is valid, error message if not valid.\r\n */\r\nexport function isValidAddress(address: string): boolean {\r\n    return validateAddress(address) === true;\r\n}\r\n\r\nexport function digestMessage(msgStr: string): Buffer {\r\n    let mBuf = Buffer.from(msgStr, 'utf8');\r\n    let msgSize = Buffer.alloc(4);\r\n    msgSize.writeUInt32BE(mBuf.length, 0);\r\n    let msgBuf = Buffer.from(`\\x1AAvalanche Signed Message:\\n${msgSize}${msgStr}`, 'utf8');\r\n    return createHash('sha256').update(msgBuf).digest();\r\n}\r\n\r\nlet payloadtypes = PayloadTypes.getInstance();\r\n\r\nexport function parseNftPayload(rawPayload: string): PayloadBase {\r\n    let payload = BufferAvalanche.from(rawPayload, 'base64');\r\n    payload = BufferAvalanche.concat([new BufferAvalanche(4).fill(payload.length), payload]);\r\n\r\n    let typeId = payloadtypes.getTypeID(payload);\r\n    let pl: BufferAvalanche = payloadtypes.getContent(payload);\r\n    let payloadbase: PayloadBase = payloadtypes.select(typeId, pl);\r\n\r\n    return payloadbase;\r\n}\r\n","import { BN } from '@c4tplatform/caminojs/dist';\r\nimport Big from 'big.js';\r\n\r\ndeclare module 'big.js' {\r\n    interface Big {\r\n        toLocaleString(toFixed?: number): string;\r\n    }\r\n}\r\n\r\nBig.prototype.toLocaleString = function (toFixed: number = 9) {\r\n    let fixedStr = this.toFixed(toFixed, 0);\r\n    let split = fixedStr.split('.');\r\n    let wholeStr = parseInt(split[0]).toLocaleString('en-US');\r\n\r\n    if (split.length === 1) {\r\n        return wholeStr;\r\n    } else {\r\n        let remainderStr = split[1];\r\n\r\n        // remove trailing 0s\r\n        let lastChar = remainderStr.charAt(remainderStr.length - 1);\r\n        while (lastChar === '0') {\r\n            remainderStr = remainderStr.substring(0, remainderStr.length - 1);\r\n            lastChar = remainderStr.charAt(remainderStr.length - 1);\r\n        }\r\n\r\n        let trimmed = remainderStr.substring(0, toFixed);\r\n        if (!trimmed) return wholeStr;\r\n        return `${wholeStr}.${trimmed}`;\r\n    }\r\n};\r\n\r\n/**\r\n * @param val the amount to parse\r\n * @param denomination number of decimal places to parse with\r\n */\r\nexport function bnToBig(val: BN, denomination = 0): Big {\r\n    let mult = Big(10).pow(denomination);\r\n    return new Big(val.toString()).div(mult);\r\n}\r\n\r\n/**\r\n * Converts a BN amount of 18 decimals to 9.\r\n * Used for AVAX C <-> X,P conversions\r\n * @param amount\r\n */\r\nexport function avaxCtoX(amount: BN) {\r\n    let tens = new BN(10).pow(new BN(9));\r\n    return amount.div(tens);\r\n}\r\n\r\nexport function avaxXtoC(amount: BN) {\r\n    let tens = new BN(10).pow(new BN(9));\r\n    return amount.mul(tens);\r\n}\r\n\r\nexport function avaxPtoC(amount: BN) {\r\n    return avaxXtoC(amount);\r\n}\r\n\r\nexport function bnToBigAvaxX(val: BN): Big {\r\n    return bnToBig(val, 9);\r\n}\r\n\r\nexport function bnToBigAvaxP(val: BN): Big {\r\n    return bnToBigAvaxX(val);\r\n}\r\n\r\nexport function bnToBigAvaxC(val: BN): Big {\r\n    return bnToBig(val, 18);\r\n}\r\n\r\n/**\r\n * Parses the value using a denomination of 18\r\n *\r\n * @param val the amount to parse given in WEI\r\n *\r\n * @example\r\n * ```\r\n * bnToAvaxC(new BN('22500000000000000000')\r\n * // will return  22.5\r\n *```\r\n *\r\n */\r\nexport function bnToAvaxC(val: BN): string {\r\n    return bnToLocaleString(val, 18);\r\n}\r\n\r\n/**\r\n * Parses the value using a denomination of 9\r\n *\r\n * @param val the amount to parse given in nAVAX\r\n */\r\nexport function bnToAvaxX(val: BN): string {\r\n    return bnToLocaleString(val, 9);\r\n}\r\n\r\n/**\r\n * Parses the value using a denomination of 9\r\n *\r\n * @param val the amount to parse given in nAVAX\r\n */\r\nexport function bnToAvaxP(val: BN): string {\r\n    return bnToAvaxX(val);\r\n}\r\n\r\n/**\r\n *\r\n * @param val the number to parse\r\n * @param decimals number of decimal places used to parse the number\r\n */\r\nexport function numberToBN(val: number | string, decimals: number): BN {\r\n    let valBig = Big(val);\r\n    let tens = Big(10).pow(decimals);\r\n    let valBN = new BN(valBig.times(tens).toFixed(0));\r\n    return valBN;\r\n}\r\n\r\nexport function numberToBNAvaxX(val: number | string) {\r\n    return numberToBN(val, 9);\r\n}\r\n\r\nexport function numberToBNAvaxP(val: number | string) {\r\n    return numberToBNAvaxX(val);\r\n}\r\n\r\nexport function numberToBNAvaxC(val: number | string) {\r\n    return numberToBN(val, 18);\r\n}\r\n\r\n/**\r\n * @Remarks\r\n * A helper method to convert BN numbers to human readable strings.\r\n *\r\n * @param val The amount to convert\r\n * @param decimals Number of decimal places to parse the amount with\r\n *\r\n * @example\r\n * ```\r\n * bnToLocaleString(new BN(100095),2)\r\n * // will return '1,000.95'\r\n * ```\r\n */\r\nexport function bnToLocaleString(val: BN, decimals = 9): string {\r\n    let bigVal = bnToBig(val, decimals);\r\n    return bigToLocaleString(bigVal, decimals);\r\n}\r\n\r\nexport function bigToLocaleString(bigVal: Big, decimals: number = 9): string {\r\n    let fixedStr = bigVal.toFixed(decimals);\r\n    let split = fixedStr.split('.');\r\n    let wholeStr = parseInt(split[0]).toLocaleString('en-US');\r\n\r\n    if (split.length === 1) {\r\n        return wholeStr;\r\n    } else {\r\n        let remainderStr = split[1];\r\n\r\n        // remove trailing 0s\r\n        let lastChar = remainderStr.charAt(remainderStr.length - 1);\r\n        while (lastChar === '0') {\r\n            remainderStr = remainderStr.substring(0, remainderStr.length - 1);\r\n            lastChar = remainderStr.charAt(remainderStr.length - 1);\r\n        }\r\n\r\n        let trimmed = remainderStr.substring(0, decimals);\r\n        if (!trimmed) return wholeStr;\r\n        return `${wholeStr}.${trimmed}`;\r\n    }\r\n}\r\n\r\n/**\r\n * Converts a string to a BN value of the given denomination.\r\n * @param value The string value of the\r\n * @param decimals\r\n *\r\n * @example\r\n * ```\r\n * stringToBN('1.32', 5) // is same as BN(132000)\r\n * ```\r\n */\r\nexport function stringToBN(value: string, decimals: number) {\r\n    let big = Big(value);\r\n    let tens = Big(10).pow(decimals);\r\n    let mult = big.times(tens);\r\n    let rawStr = mult.toFixed(0, 0);\r\n    return new BN(rawStr);\r\n}\r\n\r\nexport function bigToBN(val: Big, denom: number): BN {\r\n    let denomFlr = Math.floor(denom);\r\n    if (denomFlr < 0) throw new Error('Denomination can not be less that 0.');\r\n\r\n    const bnBig = val.mul(Big(10).pow(denomFlr));\r\n    const bnStr = bnBig.toFixed(0, 0);\r\n    return new BN(bnStr);\r\n}\r\n","import { avalanche } from '@/Network/network';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\n\r\n/**\r\n * Returns the transaction fee for X chain.\r\n */\r\nexport function getTxFeeX(): BN {\r\n    return avalanche().XChain().getTxFee();\r\n}\r\n\r\n/**\r\n * Returns the transaction fee for P chain.\r\n */\r\nexport function getTxFeeP(): BN {\r\n    return avalanche().PChain().getTxFee();\r\n}\r\n","import {\r\n    AvmStatusResponseType,\r\n    AvmStatusType,\r\n    ChainStatusResponseTypeC,\r\n    ChainStatusTypeC,\r\n    PlatformStatusResponseType,\r\n    PlatformStatusType,\r\n} from '@/utils/types';\r\nimport { avalanche, web3 } from '@/Network/network';\r\n\r\n/**\r\n * Waits until the given tx id is accepted on X chain\r\n * @param txId Tx ID to wait for\r\n * @param tryCount Number of attempts until timeout\r\n */\r\nexport async function waitTxX(txId: string, tryCount = 10): Promise<string> {\r\n    if (tryCount <= 0) {\r\n        throw new Error('Timeout');\r\n    }\r\n    let resp: AvmStatusResponseType;\r\n\r\n    try {\r\n        resp = (await avalanche().XChain().getTxStatus(txId)) as AvmStatusResponseType;\r\n    } catch (e) {\r\n        throw new Error('Unable to get transaction status.');\r\n    }\r\n\r\n    let status: AvmStatusType;\r\n    let reason;\r\n    if (typeof resp === 'string') {\r\n        status = resp as AvmStatusType;\r\n    } else {\r\n        status = resp.status as AvmStatusType;\r\n        reason = resp.reason;\r\n    }\r\n\r\n    if (status === 'Unknown' || status === 'Processing') {\r\n        return await new Promise((resolve) => {\r\n            setTimeout(async () => {\r\n                resolve(await waitTxX(txId, tryCount - 1));\r\n            }, 1000);\r\n        });\r\n        // return await waitTxX(txId, tryCount - 1);\r\n    } else if (status === 'Rejected') {\r\n        throw new Error(reason);\r\n    } else if (status === 'Accepted') {\r\n        return txId;\r\n    }\r\n\r\n    return txId;\r\n}\r\n\r\nexport async function waitTxP(txId: string, tryCount = 10): Promise<string> {\r\n    if (tryCount <= 0) {\r\n        throw new Error('Timeout');\r\n    }\r\n    let resp: PlatformStatusResponseType;\r\n\r\n    try {\r\n        resp = (await avalanche().PChain().getTxStatus(txId)) as PlatformStatusResponseType;\r\n    } catch (e) {\r\n        throw new Error('Unable to get transaction status.');\r\n    }\r\n\r\n    let status: PlatformStatusType;\r\n    let reason;\r\n    if (typeof resp === 'string') {\r\n        status = resp as PlatformStatusType;\r\n    } else {\r\n        status = resp.status as PlatformStatusType;\r\n        reason = resp.reason;\r\n    }\r\n\r\n    if (status === 'Unknown' || status === 'Processing') {\r\n        return await new Promise((resolve) => {\r\n            setTimeout(async () => {\r\n                resolve(await waitTxP(txId, tryCount - 1));\r\n            }, 1000);\r\n        });\r\n        // return await waitTxX(txId, tryCount - 1);\r\n    } else if (status === 'Dropped') {\r\n        throw new Error(reason);\r\n    } else if (status === 'Committed') {\r\n        return txId;\r\n    } else {\r\n        throw new Error('Unknown status type.');\r\n    }\r\n}\r\n\r\nexport async function waitTxEvm(txHash: string, tryCount = 10): Promise<string> {\r\n    if (tryCount <= 0) {\r\n        throw new Error('Timeout');\r\n    }\r\n\r\n    let receipt;\r\n\r\n    try {\r\n        receipt = await web3.eth.getTransactionReceipt(txHash);\r\n    } catch (e) {\r\n        throw new Error('Unable to get transaction receipt.');\r\n    }\r\n\r\n    if (!receipt) {\r\n        return await new Promise((resolve) => {\r\n            setTimeout(async () => {\r\n                resolve(await waitTxEvm(txHash, tryCount - 1));\r\n            }, 1000);\r\n        });\r\n    } else {\r\n        if (receipt.status) {\r\n            return txHash;\r\n        } else {\r\n            throw new Error('Transaction reverted.');\r\n        }\r\n    }\r\n}\r\n\r\nexport async function waitTxC(txId: string, tryCount = 10): Promise<string> {\r\n    if (tryCount <= 0) {\r\n        throw new Error('Timeout');\r\n    }\r\n\r\n    let resp: ChainStatusResponseTypeC;\r\n    try {\r\n        resp = (await avalanche().CChain().getAtomicTxStatus(txId)) as ChainStatusResponseTypeC;\r\n    } catch (e) {\r\n        throw new Error('Unable to get transaction status.');\r\n    }\r\n\r\n    let status: ChainStatusTypeC;\r\n    let reason;\r\n    if (typeof resp === 'string') {\r\n        status = resp as ChainStatusTypeC;\r\n    } else {\r\n        status = resp.status as ChainStatusTypeC;\r\n        reason = resp.reason;\r\n    }\r\n\r\n    if (status === 'Unknown' || status === 'Processing') {\r\n        return await new Promise((resolve) => {\r\n            setTimeout(async () => {\r\n                resolve(await waitTxC(txId, tryCount - 1));\r\n            }, 1000);\r\n        });\r\n        // return await waitTxX(txId, tryCount - 1);\r\n    } else if (status === 'Dropped') {\r\n        throw new Error(reason);\r\n    } else if (status === 'Accepted') {\r\n        return txId;\r\n    } else {\r\n        throw new Error('Unknown status type.');\r\n    }\r\n}\r\n","export async function sleep(durMs: number) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, durMs);\r\n    });\r\n}\r\n","import CryptoJS from 'crypto-js/core';\r\nimport AES from 'crypto-js/aes';\r\nimport randomstring from 'randomstring';\r\n\r\n/**\r\n * A helper class to obfuscate strings when storing in memory. Used as a helper rather than secure encryption.\r\n * @Remarks Do NOT use this class for actual secure encryption needs.\r\n */\r\nexport class CypherAES {\r\n    private pass: string;\r\n    private encrypted: string;\r\n\r\n    constructor(value: string) {\r\n        this.pass = randomstring.generate(32);\r\n        this.encrypted = AES.encrypt(value, this.pass).toString();\r\n    }\r\n\r\n    public getValue() {\r\n        return AES.decrypt(this.encrypted, this.pass).toString(CryptoJS.enc.Utf8);\r\n    }\r\n}\r\n","import { OrteliusUTXO } from '@/Explorer';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport { iHistoryBaseTxTokenOwners } from '@/History';\r\n\r\nexport function filterDuplicateStrings(vals: string[]) {\r\n    return vals.filter((val, i) => vals.indexOf(val) === i);\r\n}\r\n\r\nexport function isArraysOverlap(arr1: any[], arr2: any[]): boolean {\r\n    let overlaps = arr1.filter((item) => arr2.includes(item));\r\n    return overlaps.length > 0;\r\n}\r\n\r\n/**\r\n * Returns true if this utxo is owned by any of the given addresses\r\n * @param ownerAddrs Addresses to check against\r\n * @param output The UTXO\r\n */\r\nexport function isOutputOwner(ownerAddrs: string[], output: OrteliusUTXO): boolean {\r\n    let outAddrs = output.addresses;\r\n    if (!outAddrs) return false;\r\n\r\n    let totAddrs = outAddrs.filter((addr) => {\r\n        return ownerAddrs.includes(addr);\r\n    });\r\n\r\n    return totAddrs.length > 0;\r\n}\r\n\r\nexport function isOutputOwnerC(ownerAddr: string, output: OrteliusUTXO): boolean {\r\n    let outAddrs = output.caddresses;\r\n    if (!outAddrs) return false;\r\n    return outAddrs.includes(ownerAddr);\r\n}\r\n\r\n/**\r\n * Returns the total amount of `assetID` in the given `utxos` owned by `address`. Checks for X/P addresses.\r\n * @param utxos UTXOs to calculate balance from.\r\n * @param addresses The wallet's  addresses.\r\n * @param assetID Only count outputs of this asset ID.\r\n * @param chainID Only count the outputs on this chain.\r\n * @param isStake Set to `true` if looking for staking utxos.\r\n */\r\nexport function getAssetBalanceFromUTXOs(\r\n    utxos: OrteliusUTXO[],\r\n    addresses: string[],\r\n    assetID: string,\r\n    chainID: string,\r\n    isStake = false\r\n) {\r\n    let myOuts = utxos.filter((utxo) => {\r\n        if (\r\n            assetID === utxo.assetID &&\r\n            isOutputOwner(addresses, utxo) &&\r\n            chainID === utxo.chainID &&\r\n            utxo.stake === isStake\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    let tot = myOuts.reduce((acc, utxo) => {\r\n        return acc.add(new BN(utxo.amount));\r\n    }, new BN(0));\r\n\r\n    return tot;\r\n}\r\n\r\n/**\r\n * Returns the total amount of `assetID` in the given `utxos` owned by `address`. Checks for EVM address.\r\n * @param utxos UTXOs to calculate balance from.\r\n * @param address The wallet's  evm address `0x...`.\r\n * @param assetID Only count outputs of this asset ID.\r\n * @param chainID Only count the outputs on this chain.\r\n * @param isStake Set to `true` if looking for staking utxos.\r\n */\r\nexport function getEvmAssetBalanceFromUTXOs(\r\n    utxos: OrteliusUTXO[],\r\n    address: string,\r\n    assetID: string,\r\n    chainID: string,\r\n    isStake = false\r\n) {\r\n    let myOuts = utxos.filter((utxo) => {\r\n        if (\r\n            assetID === utxo.assetID &&\r\n            isOutputOwnerC(address, utxo) &&\r\n            chainID === utxo.chainID &&\r\n            utxo.stake === isStake\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    let tot = myOuts.reduce((acc, utxo) => {\r\n        return acc.add(new BN(utxo.amount));\r\n    }, new BN(0));\r\n\r\n    return tot;\r\n}\r\n\r\n/**\r\n * Returns UTXOs owned by the given addresses\r\n * @param outs UTXOs to filter\r\n * @param myAddrs Addresses to filter by\r\n */\r\nexport function getOwnedOutputs(outs: OrteliusUTXO[], myAddrs: string[]) {\r\n    return outs.filter((out) => {\r\n        let outAddrs = out.addresses || [];\r\n        return isArraysOverlap(myAddrs, outAddrs);\r\n    });\r\n}\r\n\r\n/**\r\n * Returns addresses of the given UTXOs\r\n * @param outs UTXOs to get the addresses of.\r\n */\r\nexport function getAddresses(outs: OrteliusUTXO[]): string[] {\r\n    let allAddrs: string[] = [];\r\n\r\n    for (let i = 0; i < outs.length; i++) {\r\n        let out = outs[i];\r\n        let addrs = out.addresses || [];\r\n        allAddrs.push(...addrs);\r\n    }\r\n\r\n    // Remove duplicated\r\n    return allAddrs.filter((addr, i) => allAddrs.indexOf(addr) === i);\r\n}\r\n\r\n/**\r\n * Returns only the UTXOs of the given asset id.\r\n * @param outs\r\n * @param assetID\r\n */\r\nexport function getAssetOutputs(outs: OrteliusUTXO[], assetID: string) {\r\n    return outs.filter((out) => out.assetID === assetID);\r\n}\r\n\r\n/**\r\n * Returns UTXOs not owned by the given addresses\r\n * @param outs UTXOs to filter\r\n * @param myAddrs Addresses to filter by\r\n */\r\nexport function getNotOwnedOutputs(outs: OrteliusUTXO[], myAddrs: string[]) {\r\n    return outs.filter((out) => {\r\n        let outAddrs = out.addresses || [];\r\n        return !isArraysOverlap(myAddrs, outAddrs);\r\n    });\r\n}\r\n\r\nexport function getOutputTotals(outs: OrteliusUTXO[]) {\r\n    return outs.reduce((acc, out) => {\r\n        return acc.add(new BN(out.amount));\r\n    }, new BN(0));\r\n}\r\n\r\nexport function getRewardOuts(outs: OrteliusUTXO[]) {\r\n    return outs.filter((out) => out.rewardUtxo);\r\n}\r\n\r\n/**\r\n * Returns outputs belonging to the given chain ID\r\n * @param outs UTXOs to filter\r\n * @param chainID Chain ID to filter by\r\n */\r\nexport function getOutputsOfChain(outs: OrteliusUTXO[], chainID: string) {\r\n    return outs.filter((out) => out.chainID === chainID);\r\n}\r\n\r\n/**\r\n * Filters the UTXOs of a certain output type\r\n * @param outs UTXOs to filter\r\n * @param type Output type to filter by\r\n */\r\nexport function getOutputsOfType(outs: OrteliusUTXO[], type: number) {\r\n    return outs.filter((out) => out.outputType === type);\r\n}\r\n\r\n/**\r\n * Returns a map of asset id to owner addresses\r\n * @param outs\r\n */\r\nexport function getOutputsAssetOwners(outs: OrteliusUTXO[]): iHistoryBaseTxTokenOwners {\r\n    let assetIDs = getOutputsAssetIDs(outs);\r\n    let res: iHistoryBaseTxTokenOwners = {};\r\n\r\n    for (let i = 0; i < assetIDs.length; i++) {\r\n        let id = assetIDs[i];\r\n        let assetUTXOs = getAssetOutputs(outs, id);\r\n        let addrs = getAddresses(assetUTXOs);\r\n        res[id] = addrs;\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * Returns an array of Asset IDs from the given UTXOs\r\n * @param outs Array of UTXOs\r\n */\r\nexport function getOutputsAssetIDs(outs: OrteliusUTXO[]): string[] {\r\n    let res = [];\r\n\r\n    for (let i = 0; i < outs.length; i++) {\r\n        let out = outs[i];\r\n        res.push(out.assetID);\r\n    }\r\n    return filterDuplicateStrings(res);\r\n}\r\n","import { OrteliusUTXO } from '@/Explorer';\r\nimport { iHistoryNftFamilyBalance } from '@/History/types';\r\nimport { AVMConstants } from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport { parseNftPayload } from '@/utils';\r\nimport { isOutputOwner } from '@/Explorer/ortelius/utxoUtils';\r\n\r\n/**\r\n * Parse the raw memo field to readable text.\r\n * @param raw\r\n */\r\nexport function parseMemo(raw: string): string {\r\n    const memoText = new Buffer(raw, 'base64').toString('utf8');\r\n\r\n    // Bug that sets memo to empty string (AAAAAA==) for some tx types\r\n    if (!memoText.length || raw === 'AAAAAA==') return '';\r\n    return memoText;\r\n}\r\n\r\nexport function getNFTBalanceFromUTXOs(\r\n    utxos: OrteliusUTXO[],\r\n    addresses: string[],\r\n    assetID: string\r\n): iHistoryNftFamilyBalance {\r\n    let nftUTXOs = utxos.filter((utxo) => {\r\n        if (\r\n            utxo.outputType === AVMConstants.NFTXFEROUTPUTID &&\r\n            utxo.assetID === assetID &&\r\n            isOutputOwner(addresses, utxo)\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    let res: iHistoryNftFamilyBalance = {};\r\n    for (let i = 0; i < nftUTXOs.length; i++) {\r\n        let utxo = nftUTXOs[i];\r\n        let groupID = utxo.groupID;\r\n\r\n        let content;\r\n        if (utxo.payload) {\r\n            let parsedPayload = parseNftPayload(utxo.payload);\r\n            content = parsedPayload.getContent().toString();\r\n        }\r\n\r\n        if (res[groupID]) {\r\n            res[groupID].amount++;\r\n        } else {\r\n            res[groupID] = {\r\n                payload: content || '',\r\n                amount: 1,\r\n            };\r\n        }\r\n    }\r\n    return res;\r\n}\r\n","import {\r\n    iHistoryBaseTx,\r\n    iHistoryBaseTxNFTsReceivedRaw,\r\n    iHistoryBaseTxNFTsSentRaw,\r\n    iHistoryBaseTxToken,\r\n    iHistoryBaseTxTokenLossGain,\r\n    iHistoryBaseTxTokenOwners,\r\n} from '@/History';\r\nimport * as Assets from '@/Asset/Assets';\r\nimport { bnToLocaleString, getTxFeeX } from '@/utils';\r\nimport { AVMConstants } from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport { getNFTBalanceFromUTXOs, parseMemo } from '@/History/history_helpers';\r\nimport {\r\n    filterDuplicateStrings,\r\n    getAssetOutputs,\r\n    getNotOwnedOutputs,\r\n    getOutputsAssetIDs,\r\n    getOutputsAssetOwners,\r\n    getOutputsOfType,\r\n    getOutputTotals,\r\n    getOwnedOutputs,\r\n} from '@/Explorer/ortelius/utxoUtils';\r\nimport { getAvaxAssetID } from '@/Network/utils';\r\nimport { OrteliusAvalancheTx, OrteliusUTXO } from '@/Explorer';\r\n\r\nexport async function getBaseTxSummary(tx: OrteliusAvalancheTx, ownerAddrs: string[]): Promise<iHistoryBaseTx> {\r\n    let ins = tx.inputs?.map((input) => input.output) || [];\r\n    let outs = tx.outputs || [];\r\n\r\n    // Calculate losses from inputs\r\n    let losses = getOwnedTokens(ins, ownerAddrs);\r\n    let gains = getOwnedTokens(outs, ownerAddrs);\r\n\r\n    let nowOwnedIns = getNotOwnedOutputs(ins, ownerAddrs);\r\n    let nowOwnedOuts = getNotOwnedOutputs(outs, ownerAddrs);\r\n\r\n    let froms = getOutputsAssetOwners(nowOwnedIns);\r\n    let tos = getOutputsAssetOwners(nowOwnedOuts);\r\n\r\n    let tokens = await getBaseTxTokensSummary(gains, losses, froms, tos);\r\n\r\n    return {\r\n        id: tx.id,\r\n        fee: getTxFeeX(),\r\n        type: 'transaction',\r\n        timestamp: new Date(tx.timestamp),\r\n        memo: parseMemo(tx.memo),\r\n        tokens: tokens,\r\n    };\r\n}\r\n\r\nfunction getBaseTxNFTLosses(tx: OrteliusAvalancheTx, ownerAddrs: string[]): iHistoryBaseTxNFTsSentRaw {\r\n    let ins = tx.inputs || [];\r\n    let inUTXOs = ins.map((input) => input.output);\r\n    let nftUTXOs = inUTXOs.filter((utxo) => {\r\n        return utxo.outputType === AVMConstants.NFTXFEROUTPUTID;\r\n    });\r\n\r\n    let res: iHistoryBaseTxNFTsSentRaw = {};\r\n    for (let assetID in tx.inputTotals) {\r\n        let nftBal = getNFTBalanceFromUTXOs(nftUTXOs, ownerAddrs, assetID);\r\n\r\n        // If empty dictionary pass\r\n        if (Object.keys(nftBal).length === 0) continue;\r\n\r\n        res[assetID] = nftBal;\r\n    }\r\n    return res;\r\n}\r\n\r\nfunction getBaseTxNFTGains(tx: OrteliusAvalancheTx, ownerAddrs: string[]): iHistoryBaseTxNFTsReceivedRaw {\r\n    let outs = tx.outputs || [];\r\n    let nftUTXOs = outs.filter((utxo) => {\r\n        return utxo.outputType === AVMConstants.NFTXFEROUTPUTID;\r\n    });\r\n    let res: iHistoryBaseTxNFTsReceivedRaw = {};\r\n\r\n    for (let assetID in tx.inputTotals) {\r\n        let nftBal = getNFTBalanceFromUTXOs(nftUTXOs, ownerAddrs, assetID);\r\n        // If empty dictionary pass\r\n        if (Object.keys(nftBal).length === 0) continue;\r\n\r\n        res[assetID] = nftBal;\r\n    }\r\n    return res;\r\n}\r\n\r\n/**\r\n * Returns a dictionary of asset totals belonging to the owner\r\n * @param utxos\r\n * @param ownerAddrs\r\n */\r\nfunction getOwnedTokens(utxos: OrteliusUTXO[], ownerAddrs: string[]): iHistoryBaseTxTokenLossGain {\r\n    let tokenUTXOs = getOutputsOfType(utxos, AVMConstants.SECPXFEROUTPUTID);\r\n    // Owned inputs\r\n    let myUTXOs = getOwnedOutputs(tokenUTXOs, ownerAddrs);\r\n\r\n    // Asset IDs received\r\n    let assetIDs = getOutputsAssetIDs(myUTXOs);\r\n\r\n    let res: iHistoryBaseTxTokenLossGain = {};\r\n\r\n    for (let i = 0; i < assetIDs.length; i++) {\r\n        let assetID = assetIDs[i];\r\n        let assetUTXOs = getAssetOutputs(myUTXOs, assetID);\r\n        let tot = getOutputTotals(assetUTXOs);\r\n        res[assetID] = tot;\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nasync function getBaseTxTokensSummary(\r\n    gains: iHistoryBaseTxTokenLossGain,\r\n    losses: iHistoryBaseTxTokenLossGain,\r\n    froms: iHistoryBaseTxTokenOwners,\r\n    tos: iHistoryBaseTxTokenOwners\r\n): Promise<iHistoryBaseTxToken[]> {\r\n    let res: iHistoryBaseTxToken[] = [];\r\n\r\n    let assetIDs = filterDuplicateStrings([...Object.keys(gains), ...Object.keys(losses)]);\r\n\r\n    // Fetch asset descriptions\r\n    let calls = assetIDs.map((id) => Assets.getAssetDescription(id));\r\n    let descs = await Promise.all(calls);\r\n    let descsDict: any = {};\r\n\r\n    // Convert array to dict\r\n    for (let i = 0; i < descs.length; i++) {\r\n        let desc = descs[i];\r\n        descsDict[desc.assetID] = desc;\r\n    }\r\n\r\n    for (let i = 0; i < assetIDs.length; i++) {\r\n        let id = assetIDs[i];\r\n        let tokenGain = gains[id] || new BN(0);\r\n        let tokenLost = losses[id] || new BN(0);\r\n        let tokenDesc = descsDict[id];\r\n\r\n        // If we sent avax, deduct the fee\r\n        if (id === getAvaxAssetID() && !tokenLost.isZero()) {\r\n            tokenLost = tokenLost.sub(getTxFeeX());\r\n        }\r\n\r\n        // How much we gained/lost of this token\r\n        let diff = tokenGain.sub(tokenLost);\r\n        let diffClean = bnToLocaleString(diff, tokenDesc.denomination);\r\n\r\n        // If we didnt gain or lose anything, ignore this token\r\n        if (diff.isZero()) continue;\r\n\r\n        if (diff.isNeg()) {\r\n            res.push({\r\n                amount: diff,\r\n                amountDisplayValue: diffClean,\r\n                addresses: tos[id],\r\n                asset: tokenDesc,\r\n            });\r\n        } else {\r\n            res.push({\r\n                amount: diff,\r\n                amountDisplayValue: diffClean,\r\n                addresses: froms[id],\r\n                asset: tokenDesc,\r\n            });\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n","export const SNOWTRACE_MAINNET = 'https://api.snowtrace.io';\r\nexport const SNOWTRACE_TESTNET = 'https://api-testnet.snowtrace.io';\r\n","import { SnowtraceErc20Tx, SnowtraceNormalTx } from '@/Explorer';\r\n\r\n/**\r\n * Filter duplicate Snowtrace transactions\r\n * @param txs\r\n */\r\nexport function filterDuplicateTransactions<Tx extends SnowtraceErc20Tx | SnowtraceNormalTx>(txs: Tx[]) {\r\n    const hashes = txs.map((tx) => tx.hash);\r\n    return txs.filter((tx, i) => {\r\n        return hashes.indexOf(tx.hash) === i;\r\n    });\r\n}\r\n","import { SNOWTRACE_MAINNET, SNOWTRACE_TESTNET } from '@/Explorer/snowtrace/constants';\r\nimport { isFujiNetwork, isMainnetNetwork, NetworkConfig } from '@/Network';\r\nimport { SnowtraceErc20Tx, SnowtraceNormalTx, SnowtraceResponse } from '@/Explorer/snowtrace/types';\r\nimport { filterDuplicateTransactions } from './utils';\r\n\r\nasync function fetchSnowtraceAPI<T>(query: string, isMainnet = true): Promise<T> {\r\n    const baseUrl = isMainnet ? SNOWTRACE_MAINNET : SNOWTRACE_TESTNET;\r\n    const response = await fetch(`${baseUrl}/${query}`);\r\n    return response.json();\r\n}\r\n\r\nexport async function getErc20History(\r\n    address: string,\r\n    networkConfig: NetworkConfig,\r\n    page = 0,\r\n    offset = 0,\r\n    contractAddress?: string\r\n) {\r\n    const contractQuery = contractAddress ? `&contractaddress=${contractAddress}` : '';\r\n    const sort = 'desc';\r\n    const query = `api?module=account&action=tokentx&address=${address}&sort=${sort}&page=${page}&offset=${offset}${contractQuery}`;\r\n\r\n    let resp;\r\n    if (isMainnetNetwork(networkConfig)) {\r\n        resp = await fetchSnowtraceAPI<SnowtraceResponse<SnowtraceErc20Tx>>(query);\r\n    } else if (isFujiNetwork(networkConfig)) {\r\n        resp = await fetchSnowtraceAPI<SnowtraceResponse<SnowtraceErc20Tx>>(query, false);\r\n    } else {\r\n        throw new Error('Snow trace is only available for Avalanche Mainnet and Testnet');\r\n    }\r\n\r\n    return filterDuplicateTransactions<SnowtraceErc20Tx>(resp.result);\r\n}\r\n\r\nexport async function getNormalHistory(address: string, networkConfig: NetworkConfig, page = 0, offset = 0) {\r\n    const sort = 'desc';\r\n    const query = `api?module=account&action=txlist&address=${address}&sort=${sort}&page=${page}&offset=${offset}`;\r\n\r\n    let resp;\r\n    if (isMainnetNetwork(networkConfig)) {\r\n        resp = await fetchSnowtraceAPI<SnowtraceResponse<SnowtraceNormalTx>>(query);\r\n    } else if (isFujiNetwork(networkConfig)) {\r\n        resp = await fetchSnowtraceAPI<SnowtraceResponse<SnowtraceNormalTx>>(query, false);\r\n    } else {\r\n        throw new Error('Snow trace is only available for Avalanche Mainnet and Testnet');\r\n    }\r\n    return filterDuplicateTransactions<SnowtraceNormalTx>(resp.result);\r\n}\r\n\r\n/**\r\n * https://docs.etherscan.io/api-endpoints/contracts#get-contract-abi-for-verified-contract-source-codes\r\n *\r\n * @param address\r\n * @param networkConfig\r\n * @returns string array, the first index is the ABI\r\n */\r\nexport async function getABIForContract(\r\n    address: string,\r\n    networkConfig: NetworkConfig\r\n): Promise<SnowtraceResponse<string>> {\r\n    const isMainnet = isMainnetNetwork(networkConfig);\r\n    const isFuji = isFujiNetwork(networkConfig);\r\n\r\n    if (!isMainnet && !isFuji) {\r\n        throw new Error('Snow trace is only available for Avalanche Mainnet and Testnet');\r\n    }\r\n\r\n    const params = new window.URLSearchParams({ module: 'contract', action: 'getabi', address });\r\n    return await fetchSnowtraceAPI<SnowtraceResponse<string>>(`api?${params.toString()}`, isMainnet);\r\n}\r\n","export type SnowtraceTx = SnowtraceNormalTx | SnowtraceErc20Tx;\r\n\r\nexport interface SnowtraceErc20Tx {\r\n    blockNumber: string;\r\n    timeStamp: string;\r\n    hash: string;\r\n    nonce: string;\r\n    blockHash: string;\r\n    from: string;\r\n    contractAddress: string;\r\n    to: string;\r\n    value: string;\r\n    tokenName: string;\r\n    tokenSymbol: string;\r\n    tokenDecimal: string;\r\n    transactionIndex: string;\r\n    gas: string;\r\n    gasPrice: string;\r\n    gasUsed: string;\r\n    cumulativeGasUsed: string;\r\n    input: string;\r\n    confirmations: string;\r\n}\r\n\r\nexport interface SnowtraceNormalTx {\r\n    blockNumber: string;\r\n    timeStamp: string;\r\n    hash: string;\r\n    nonce: string;\r\n    blockHash: string;\r\n    transactionIndex: string;\r\n    from: string;\r\n    to: string;\r\n    value: string;\r\n    gas: string;\r\n    gasPrice: string;\r\n    isError: string;\r\n    txreceipt_status: string;\r\n    input: string;\r\n    contractAddress: string;\r\n    cumulativeGasUsed: string;\r\n    gasUsed: string;\r\n    confirmations: string;\r\n}\r\n\r\n/**\r\n * Type guard for SnowtraceErc20Tx\r\n * @param tx\r\n */\r\nexport function isSnowtraceErc20Tx(tx: SnowtraceNormalTx | SnowtraceErc20Tx): tx is SnowtraceErc20Tx {\r\n    return tx.hasOwnProperty('tokenName');\r\n}\r\n\r\n/**\r\n * Type guard for SnowtraceNormalTx\r\n * @param tx\r\n */\r\nexport function isSnowtraceNormalTx(tx: SnowtraceNormalTx | SnowtraceErc20Tx): tx is SnowtraceNormalTx {\r\n    return !tx.hasOwnProperty('tokenName');\r\n}\r\n\r\nexport interface SnowtraceResponse<ResponseType> {\r\n    status: string;\r\n    message: string;\r\n    result: ResponseType[];\r\n}\r\n","import { explorer_api } from '@/Network/network';\r\nimport { NO_EXPLORER_API } from '@/errors';\r\nimport { OrteliusAvalancheTx, OrteliusEvmTx } from '@/Explorer';\r\n\r\n/**\r\n * Returns transactions FROM and TO the address given\r\n * @param addr The address to get historic transactions for.\r\n */\r\nexport async function getAddressHistoryEVM(addr: string): Promise<OrteliusEvmTx[]> {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n\r\n    let endpoint = `/v2/ctransactions?address=${addr}`;\r\n    let data = (await explorer_api.get<{ Transactions: OrteliusEvmTx[] }>(endpoint)).Transactions;\r\n\r\n    data.sort((a, b) => {\r\n        let dateA = new Date(a.createdAt);\r\n        let dateB = new Date(b.createdAt);\r\n\r\n        return dateB.getTime() - dateA.getTime();\r\n    });\r\n\r\n    return data;\r\n}\r\n\r\n/**\r\n * Returns the ortelius data from the given tx id.\r\n * @param txID\r\n */\r\nexport async function getTx(txID: string): Promise<OrteliusAvalancheTx> {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n\r\n    let url = `/v2/transactions/${txID}`;\r\n    return await explorer_api.get<OrteliusAvalancheTx>(url);\r\n}\r\n\r\n/**\r\n * Returns ortelius data for a transaction hash on C chain EVM,\r\n * @param txHash\r\n */\r\nexport async function getTxEvm(txHash: string): Promise<OrteliusEvmTx> {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n\r\n    let endpoint = `/v2/ctransactions?hash=${txHash}`;\r\n    let data = (await explorer_api.get<{ Transactions: OrteliusEvmTx[] }>(endpoint)).Transactions[0];\r\n\r\n    return data;\r\n}\r\n\r\n/**\r\n * Returns, X or P chain transactions belonging to the given address array.\r\n * @param addresses Addresses to check for. Max number of addresses is 1024\r\n * @param limit\r\n * @param chainID The blockchain ID of X or P chain\r\n * @param endTime\r\n */\r\nasync function getTransactionsAvalanche(\r\n    addresses: string[],\r\n    limit = 20,\r\n    chainID: string,\r\n    endTime?: string\r\n): Promise<OrteliusAvalancheTx[]> {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n\r\n    if (addresses.length > 1024) throw new Error('Number of addresses can not exceed 1024.');\r\n\r\n    // Remove the prefix (X- P-) from given addresses\r\n    const addrsRaw = addresses.map((addr) => {\r\n        return addr.split('-')[1];\r\n    });\r\n\r\n    const rootUrl = '/v2/transactions';\r\n\r\n    const req = {\r\n        address: addrsRaw,\r\n        sort: ['timestamp-desc'],\r\n        disableCount: ['1'],\r\n        chainID: [chainID],\r\n        disableGenesis: ['false'],\r\n    };\r\n\r\n    // Add limit if given\r\n    if (limit > 0) {\r\n        //@ts-ignore\r\n        req.limit = [limit.toString()];\r\n    }\r\n\r\n    // Add end time if given\r\n    if (endTime) {\r\n        //@ts-ignore\r\n        req.endTime = [endTime];\r\n    }\r\n\r\n    const res = await explorer_api.post<{ transactions: OrteliusAvalancheTx[]; next?: string }>(rootUrl, req);\r\n    const resTxs = res.transactions;\r\n    const next: string | undefined = res.next;\r\n\r\n    let allTxs = resTxs === null ? [] : resTxs;\r\n\r\n    // If we need to fetch more for this address\r\n    if (next && !limit) {\r\n        let endTime = next.split('&')[0].split('=')[1];\r\n        let nextRes = await getAddressHistory(addresses, limit, chainID, endTime);\r\n        allTxs.push(...nextRes);\r\n    }\r\n\r\n    return allTxs;\r\n}\r\n\r\n/**\r\n * Returns, X or P chain transactions belonging to the given address array.\r\n * @param addrs Addresses to check for.\r\n * @param limit\r\n * @param chainID The blockchain ID of X or P chain\r\n * @param endTime\r\n */\r\nexport async function getAddressHistory(\r\n    addrs: string[],\r\n    limit = 20,\r\n    chainID: string,\r\n    endTime?: string\r\n): Promise<OrteliusAvalancheTx[]> {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n    const ADDR_SIZE = 1024;\r\n\r\n    const addrsChunks = [];\r\n\r\n    for (let i = 0; i < addrs.length; i += ADDR_SIZE) {\r\n        const chunk = addrs.slice(i, i + ADDR_SIZE);\r\n        addrsChunks.push(chunk);\r\n    }\r\n\r\n    // Get histories in parallel\r\n    const promises = addrsChunks.map((chunk) => {\r\n        return getTransactionsAvalanche(chunk, limit, chainID, endTime);\r\n    });\r\n\r\n    const results = await Promise.all(promises);\r\n    return results.reduce((acc, txs) => {\r\n        return [...acc, ...txs];\r\n    }, []);\r\n}\r\n\r\n/**\r\n * Given an array of addresses, checks which chain each address was already used on\r\n * @param addrs\r\n */\r\nexport async function getAddressChains(addrs: string[]) {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n\r\n    // Strip the prefix\r\n    let rawAddrs = addrs.map((addr) => {\r\n        return addr.split('-')[1];\r\n    });\r\n\r\n    let urlRoot = `/v2/addressChains`;\r\n\r\n    let res = await explorer_api.post<any>(urlRoot, {\r\n        address: rawAddrs,\r\n        disableCount: ['1'],\r\n    });\r\n\r\n    return res.addressChains;\r\n}\r\n\r\nexport async function getAddressDetailX(addr: string) {\r\n    if (!explorer_api) {\r\n        throw NO_EXPLORER_API;\r\n    }\r\n\r\n    let addrRaw = addr.split('-')[1];\r\n    let url = `/x/addresses/${addrRaw}`;\r\n\r\n    return await explorer_api.get<any>(url);\r\n}\r\n","import { OrteliusAvalancheTx } from '@/Explorer';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport { getOutputTotals } from '@/Explorer/ortelius/utxoUtils';\r\n\r\n/**\r\n * Given an array of transactions from the explorer, filter out duplicate transactions\r\n * @param txs\r\n */\r\nexport function filterDuplicateOrtelius(txs: OrteliusAvalancheTx[]) {\r\n    let txsIds: string[] = [];\r\n    let filtered: OrteliusAvalancheTx[] = [];\r\n\r\n    for (let i = 0; i < txs.length; i++) {\r\n        let tx = txs[i];\r\n        let txId = tx.id;\r\n\r\n        if (txsIds.includes(txId)) {\r\n            continue;\r\n        } else {\r\n            txsIds.push(txId);\r\n            filtered.push(tx);\r\n        }\r\n    }\r\n    return filtered;\r\n}\r\n\r\n// If any of the inputs has a different chain ID, thats the source chain\r\n// else return current chain\r\n/**\r\n * Returns the source chain id.\r\n * @param tx Tx data from the explorer.\r\n */\r\nexport function findSourceChain(tx: OrteliusAvalancheTx): string {\r\n    let baseChain = tx.chainID;\r\n    let ins = tx.inputs || [];\r\n\r\n    for (let i = 0; i < ins.length; i++) {\r\n        let inChainId = ins[i].output.inChainID;\r\n        if (!inChainId) continue;\r\n        if (inChainId !== baseChain) return inChainId;\r\n    }\r\n    return baseChain;\r\n}\r\n\r\n// If any of the outputs has a different chain ID, that's the destination chain\r\n// else return current chain\r\n/**\r\n * Returns the destination chain id.\r\n * @param tx Tx data from the explorer.\r\n */\r\nexport function findDestinationChain(tx: OrteliusAvalancheTx): string {\r\n    let baseChain = tx.chainID;\r\n    let outs = tx.outputs || [];\r\n\r\n    for (let i = 0; i < outs.length; i++) {\r\n        let outChainId = outs[i].outChainID;\r\n        if (!outChainId) continue;\r\n        if (outChainId !== baseChain) return outChainId;\r\n    }\r\n    return baseChain;\r\n}\r\n\r\n// To get the stake amount, sum the non-reward output utxos.\r\nexport function getStakeAmount(tx: OrteliusAvalancheTx): BN {\r\n    let outs = tx.outputs || [];\r\n    let nonRewardUtxos = outs.filter((utxo) => !utxo.rewardUtxo && utxo.stake);\r\n\r\n    let tot = getOutputTotals(nonRewardUtxos);\r\n    return tot;\r\n}\r\n","import { CoinGeckoPriceHistoryResponse } from '@/Explorer/coingecko/types';\r\n\r\nconst COINGECKO_BASE_URL = 'https://api.coingecko.com/api/v3';\r\nconst AVAX_COIN_ID = 'avalanche-2';\r\n\r\n/**\r\n * Fetches the current AVAX price using Coin Gecko.\r\n * @remarks\r\n * You might get rate limited if you use this function frequently.\r\n *\r\n * @return\r\n * Current price of 1 AVAX vs a currency (default USD)\r\n */\r\nexport async function getAvaxPrice(currentCurrency = 'USD'): Promise<number> {\r\n    const res = await fetch(`${COINGECKO_BASE_URL}/simple/price?ids=${AVAX_COIN_ID}&vs_currencies=${currentCurrency}`);\r\n    const data = await res.json();\r\n    return data[AVAX_COIN_ID][currentCurrency.toLowerCase()];\r\n}\r\n\r\n/**\r\n * Gets daily price history using Coin Gecko.\r\n * @param currency\r\n */\r\nexport async function getAvaxPriceHistory(currency = 'USD') {\r\n    const params = new URLSearchParams({\r\n        vs_currency: currency.toLowerCase(),\r\n        days: 'max',\r\n        interval: 'daily',\r\n    });\r\n    const res = await fetch(`${COINGECKO_BASE_URL}/coins/${AVAX_COIN_ID}/market_chart?${params.toString()}`);\r\n    const data: CoinGeckoPriceHistoryResponse = await res.json();\r\n\r\n    return data.prices;\r\n}\r\n","import { iHistoryImportExport } from '@/History/types';\r\nimport { parseMemo } from '@/History/history_helpers';\r\nimport { idToChainAlias } from '@/Network/helpers/aliasFromNetworkID';\r\nimport { avalanche } from '@/Network/network';\r\nimport { bnToAvaxX } from '@/utils';\r\nimport { getOutputsOfChain, getOutputTotals, getOwnedOutputs } from '@/Explorer/ortelius/utxoUtils';\r\nimport { findDestinationChain, findSourceChain, OrteliusAvalancheTx } from '@/Explorer';\r\n\r\nexport function getImportSummary(tx: OrteliusAvalancheTx, addresses: string[]): iHistoryImportExport {\r\n    let sourceChain = findSourceChain(tx);\r\n    let chainAliasFrom = idToChainAlias(sourceChain);\r\n    let chainAliasTo = idToChainAlias(tx.chainID);\r\n\r\n    let outs = tx.outputs || [];\r\n    let myOuts = getOwnedOutputs(outs, addresses);\r\n    let amtOut = getOutputTotals(myOuts);\r\n\r\n    let time = new Date(tx.timestamp);\r\n    let fee = avalanche().XChain().getTxFee();\r\n\r\n    let res: iHistoryImportExport = {\r\n        id: tx.id,\r\n        memo: parseMemo(tx.memo),\r\n        source: chainAliasFrom,\r\n        destination: chainAliasTo,\r\n        amount: amtOut,\r\n        amountDisplayValue: bnToAvaxX(amtOut),\r\n        timestamp: time,\r\n        type: 'import',\r\n        fee: fee,\r\n    };\r\n\r\n    return res;\r\n}\r\n\r\nexport function getExportSummary(tx: OrteliusAvalancheTx, addresses: string[]): iHistoryImportExport {\r\n    let sourceChain = findSourceChain(tx);\r\n    let chainAliasFrom = idToChainAlias(sourceChain);\r\n\r\n    let destinationChain = findDestinationChain(tx);\r\n    let chainAliasTo = idToChainAlias(destinationChain);\r\n\r\n    let outs = tx.outputs || [];\r\n    let myOuts = getOwnedOutputs(outs, addresses);\r\n    let chainOuts = getOutputsOfChain(myOuts, destinationChain);\r\n    let amtOut = getOutputTotals(chainOuts);\r\n\r\n    let time = new Date(tx.timestamp);\r\n    let fee = avalanche().XChain().getTxFee();\r\n\r\n    let res: iHistoryImportExport = {\r\n        id: tx.id,\r\n        memo: parseMemo(tx.memo),\r\n        source: chainAliasFrom,\r\n        destination: chainAliasTo,\r\n        amount: amtOut,\r\n        amountDisplayValue: bnToAvaxX(amtOut),\r\n        timestamp: time,\r\n        type: 'export',\r\n        fee: fee,\r\n    };\r\n\r\n    return res;\r\n}\r\n","import { HistoryItemType, HistoryItemTypeName, iHistoryImportExport, iHistoryItem, iHistoryStaking } from '@/History';\r\nimport { parseMemo } from '@/History/history_helpers';\r\nimport { activeNetwork, avalanche } from '@/Network/network';\r\nimport { bnToAvaxP, bnToAvaxX } from '@/utils';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport { getBaseTxSummary } from '@/History/base_tx_parser';\r\nimport { idToChainAlias } from '@/Network/helpers/aliasFromNetworkID';\r\nimport { getExportSummary, getImportSummary } from '@/History/importExportParser';\r\nimport { findSourceChain, getStakeAmount, OrteliusAvalancheTx } from '@/Explorer';\r\nimport {\r\n    getEvmAssetBalanceFromUTXOs,\r\n    getOutputTotals,\r\n    getOwnedOutputs,\r\n    getRewardOuts,\r\n} from '@/Explorer/ortelius/utxoUtils';\r\n\r\nexport async function getTransactionSummary(\r\n    tx: OrteliusAvalancheTx,\r\n    walletAddrs: string[],\r\n    evmAddress: string\r\n): Promise<HistoryItemType> {\r\n    let cleanAddressesXP = walletAddrs.map((addr) => addr.split('-')[1]);\r\n\r\n    switch (tx.type) {\r\n        case 'import':\r\n        case 'pvm_import':\r\n            return getImportSummary(tx, cleanAddressesXP);\r\n        case 'export':\r\n        case 'pvm_export':\r\n        case 'atomic_export_tx':\r\n            return getExportSummary(tx, cleanAddressesXP);\r\n        case 'add_validator':\r\n        case 'add_delegator':\r\n            return getStakingSummary(tx, cleanAddressesXP);\r\n        case 'atomic_import_tx':\r\n            return getImportSummaryC(tx, evmAddress);\r\n        case 'operation':\r\n        case 'base':\r\n            return await getBaseTxSummary(tx, cleanAddressesXP);\r\n        default:\r\n            return getUnsupportedSummary(tx);\r\n    }\r\n}\r\n\r\nfunction getUnsupportedSummary(tx: OrteliusAvalancheTx): iHistoryItem {\r\n    return {\r\n        id: tx.id,\r\n        type: 'not_supported',\r\n        timestamp: new Date(tx.timestamp),\r\n        fee: new BN(0),\r\n    };\r\n}\r\n\r\nfunction getStakingSummary(tx: OrteliusAvalancheTx, ownerAddrs: string[]): iHistoryStaking {\r\n    let time = new Date(tx.timestamp);\r\n\r\n    // let pChainID = activeNetwork.pChainID;\r\n    // let avaxID = activeNetwork.avaxID;\r\n    let ins = tx.inputs?.map((tx) => tx.output) || [];\r\n    let myIns = getOwnedOutputs(ins, ownerAddrs);\r\n\r\n    let outs = tx.outputs || [];\r\n    let myOuts = getOwnedOutputs(outs, ownerAddrs);\r\n\r\n    let stakeAmount = getStakeAmount(tx);\r\n\r\n    // Assign the type\r\n    let type: HistoryItemTypeName = tx.type === 'add_validator' ? 'add_validator' : 'add_delegator';\r\n    // If this wallet only received the fee\r\n    if (myIns.length === 0 && type === 'add_delegator') {\r\n        type = 'delegation_fee';\r\n    } else if (myIns.length === 0 && type === 'add_validator') {\r\n        type = 'validation_fee';\r\n    }\r\n\r\n    let rewardAmount;\r\n    let rewardAmountClean;\r\n    if (tx.rewarded) {\r\n        let rewardOuts = getRewardOuts(myOuts);\r\n        rewardAmount = getOutputTotals(rewardOuts);\r\n        rewardAmountClean = bnToAvaxP(rewardAmount);\r\n    }\r\n\r\n    return {\r\n        id: tx.id,\r\n        nodeID: tx.validatorNodeID,\r\n        stakeStart: new Date(tx.validatorStart * 1000),\r\n        stakeEnd: new Date(tx.validatorEnd * 1000),\r\n        timestamp: time,\r\n        type: type,\r\n        fee: new BN(0),\r\n        amount: stakeAmount,\r\n        amountDisplayValue: bnToAvaxP(stakeAmount),\r\n        memo: parseMemo(tx.memo),\r\n        isRewarded: tx.rewarded,\r\n        rewardAmount: rewardAmount,\r\n        rewardAmountDisplayValue: rewardAmountClean,\r\n    };\r\n}\r\n\r\n// Returns the summary for a C chain import TX\r\nfunction getImportSummaryC(tx: OrteliusAvalancheTx, ownerAddr: string) {\r\n    let sourceChain = findSourceChain(tx);\r\n    let chainAliasFrom = idToChainAlias(sourceChain);\r\n    let chainAliasTo = idToChainAlias(tx.chainID);\r\n\r\n    let avaxID = activeNetwork.avaxID;\r\n\r\n    let outs = tx.outputs || [];\r\n    let amtOut = getEvmAssetBalanceFromUTXOs(outs, ownerAddr, avaxID, tx.chainID);\r\n\r\n    let time = new Date(tx.timestamp);\r\n    let fee = avalanche().XChain().getTxFee();\r\n\r\n    let res: iHistoryImportExport = {\r\n        id: tx.id,\r\n        source: chainAliasFrom,\r\n        destination: chainAliasTo,\r\n        amount: amtOut,\r\n        amountDisplayValue: bnToAvaxX(amtOut),\r\n        timestamp: time,\r\n        type: 'import',\r\n        fee: fee,\r\n        memo: parseMemo(tx.memo),\r\n    };\r\n\r\n    return res;\r\n}\r\n","import { iHistoryEVMTx } from '@/History/types';\r\nimport { bnToAvaxC } from '@/utils';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport { OrteliusEvmTx } from '@/Explorer';\r\n\r\nexport function getTransactionSummaryEVM(tx: OrteliusEvmTx, walletAddress: string): iHistoryEVMTx {\r\n    let isSender = tx.fromAddr.toUpperCase() === walletAddress.toUpperCase();\r\n\r\n    let amt = new BN(tx.value);\r\n    let amtClean = bnToAvaxC(amt);\r\n    let date = new Date(tx.createdAt);\r\n\r\n    let gasLimit = new BN(tx.gasLimit);\r\n    let gasPrice = new BN(tx.gasPrice);\r\n    let feeBN = gasLimit.mul(gasPrice); // in gwei\r\n\r\n    return {\r\n        id: tx.hash,\r\n        fee: feeBN,\r\n        memo: '',\r\n        block: tx.block,\r\n        isSender,\r\n        type: 'transaction_evm',\r\n        amount: amt,\r\n        amountDisplayValue: amtClean,\r\n        gasLimit: tx.gasLimit,\r\n        gasPrice: tx.gasPrice,\r\n        from: tx.fromAddr,\r\n        to: tx.toAddr,\r\n        timestamp: date,\r\n        input: tx.input,\r\n    };\r\n}\r\n","import { BN } from '@c4tplatform/caminojs/dist';\r\nimport { ChainIdType } from '@/common';\r\nimport { iAssetDescriptionClean } from '@/Asset/types';\r\n\r\nexport type HistoryItemType = AVMHistoryItemType | PVMHistoryItemType | EVMHistoryITemType | iHistoryItem;\r\n\r\nexport type AVMHistoryItemType = iHistoryBaseTx | iHistoryImportExport;\r\nexport type PVMHistoryItemType = iHistoryStaking;\r\nexport type EVMHistoryITemType = iHistoryEVMTx;\r\n\r\nexport type HistoryImportExportTypeName = 'import' | 'export';\r\nexport type HistoryItemTypeName =\r\n    | HistoryImportExportTypeName\r\n    | 'transaction'\r\n    | 'transaction_evm'\r\n    | 'add_delegator'\r\n    | 'add_validator'\r\n    | 'delegation_fee'\r\n    | 'validation_fee'\r\n    | 'not_supported';\r\n\r\nexport interface iHistoryItem {\r\n    id: string;\r\n    type: HistoryItemTypeName;\r\n    timestamp: Date;\r\n    fee: BN;\r\n    memo?: string;\r\n}\r\n\r\n/**\r\n * Parsed interface for Import and Export transactions.\r\n */\r\nexport interface iHistoryImportExport extends iHistoryItem {\r\n    amount: BN;\r\n    type: HistoryImportExportTypeName;\r\n    amountDisplayValue: string;\r\n    destination: ChainIdType;\r\n    source: ChainIdType;\r\n}\r\n\r\n/**\r\n * Typeguard for `iHistoryImportExport` interface\r\n * @param tx The parsed history object\r\n */\r\nexport function isHistoryImportExportTx(tx: HistoryItemType): tx is iHistoryImportExport {\r\n    return tx.type === 'export' || tx.type === 'import';\r\n}\r\n\r\n/**\r\n * Parsed interface for Validation, Validation Fee, Delegation and Delegation Fee transactions.\r\n */\r\nexport interface iHistoryStaking extends iHistoryItem {\r\n    nodeID: string;\r\n    stakeStart: Date;\r\n    stakeEnd: Date;\r\n    amount: BN;\r\n    amountDisplayValue: string;\r\n    isRewarded: boolean;\r\n    rewardAmount?: BN;\r\n    rewardAmountDisplayValue?: string;\r\n}\r\n\r\n/**\r\n * Typeguard for `iHistoryStaking` interface\r\n * @param tx The parsed history object\r\n */\r\nexport function isHistoryStakingTx(tx: HistoryItemType): tx is iHistoryStaking {\r\n    let types: HistoryItemTypeName[] = ['add_validator', 'add_delegator', 'validation_fee', 'delegation_fee'];\r\n    return types.includes(tx.type);\r\n}\r\n\r\n/**\r\n * Interface for parsed X chain base transactions.\r\n */\r\nexport interface iHistoryBaseTx extends iHistoryItem {\r\n    tokens: iHistoryBaseTxToken[];\r\n    // nfts: iHistoryBaseTxNFTs;\r\n}\r\n\r\n/**\r\n * Typeguard for `iHistoryBaseTx` interface\r\n * @param tx The parsed history object\r\n */\r\nexport function isHistoryBaseTx(tx: HistoryItemType): tx is iHistoryBaseTx {\r\n    return tx.type === 'transaction';\r\n}\r\n\r\n/**\r\n * Interface for parsed EVM transactions.\r\n */\r\nexport interface iHistoryEVMTx extends iHistoryItem {\r\n    block: string;\r\n    gasLimit: number;\r\n    gasPrice: string;\r\n    from: string;\r\n    to: string;\r\n    amount: BN;\r\n    amountDisplayValue: string;\r\n    isSender: boolean;\r\n    input?: string;\r\n}\r\n\r\nexport function isHistoryEVMTx(tx: HistoryItemType): tx is iHistoryEVMTx {\r\n    return tx.type === 'transaction_evm';\r\n}\r\n\r\nexport interface iHistoryBaseTxToken {\r\n    amount: BN;\r\n    amountDisplayValue: string;\r\n    addresses: string[];\r\n    asset: iAssetDescriptionClean;\r\n}\r\n\r\nexport interface iHistoryBaseTxNFTs {\r\n    sent: iHistoryBaseTxNFTsSent;\r\n    received: iHistoryBaseTxNFTsReceived;\r\n}\r\n\r\nexport interface iHistoryBaseTxTokenLossGain {\r\n    [assetId: string]: BN;\r\n}\r\n\r\nexport interface iHistoryBaseTxTokenOwners {\r\n    [assetId: string]: string[];\r\n}\r\n\r\nexport interface iHistoryNftFamilyBalance {\r\n    [groupNum: number]: {\r\n        payload: string;\r\n        amount: number;\r\n    };\r\n}\r\n\r\nexport interface iHistoryBaseTxNFTsReceivedRaw {\r\n    [assetID: string]: iHistoryNftFamilyBalance;\r\n}\r\nexport interface iHistoryBaseTxNFTsSentRaw {\r\n    [assetID: string]: iHistoryNftFamilyBalance;\r\n}\r\n\r\nexport interface iHistoryBaseTxNFTsSent {\r\n    [assetID: string]: {\r\n        groups: iHistoryNftFamilyBalance;\r\n        to: string[];\r\n        asset: iAssetDescriptionClean;\r\n    };\r\n}\r\n\r\nexport interface iHistoryBaseTxNFTsReceived {\r\n    [assetID: string]: {\r\n        groups: iHistoryNftFamilyBalance;\r\n        from: string[];\r\n        asset: iAssetDescriptionClean;\r\n    };\r\n}\r\n","import { BN } from '@c4tplatform/caminojs/dist';\r\nimport { ChainIdType } from '@/common';\r\nimport {\r\n    UniversalTx,\r\n    UniversalTxActionExport,\r\n    UniversalTxActionImport,\r\n    UniversalTxExport,\r\n    UniversalTxImport,\r\n} from './types';\r\n\r\nexport abstract class UniversalNodeAbstract {\r\n    parents: UniversalNodeAbstract[];\r\n    child: UniversalNodeAbstract | null; // can only have 1 child\r\n    balance: BN;\r\n    chain: ChainIdType;\r\n    feeExport: BN;\r\n    feeImport: BN;\r\n\r\n    protected constructor(balance: BN, chain: ChainIdType, feeExport: BN, feeImport: BN) {\r\n        this.parents = [];\r\n        this.child = null;\r\n        this.balance = balance;\r\n        this.chain = chain;\r\n        this.feeExport = feeExport;\r\n        this.feeImport = feeImport;\r\n    }\r\n\r\n    // Sum of the node's balance + all balance of parents minus the transfer fees\r\n    reduceTotalBalanceFromParents(): BN {\r\n        // If there are no balance return balance of self\r\n        if (this.parents.length === 0) {\r\n            return this.balance;\r\n        }\r\n\r\n        let parentBals = this.parents.map((node) => {\r\n            // Subtract transfer fees from parent balance\r\n            // import + export\r\n            let parentBalance = node.reduceTotalBalanceFromParents();\r\n            parentBalance = parentBalance.sub(this.feeImport).sub(node.feeExport);\r\n            let zero = new BN(0);\r\n            return BN.max(parentBalance, zero);\r\n        });\r\n\r\n        let tot = parentBals.reduce((prev, current) => {\r\n            return prev.add(current);\r\n        }, new BN(0));\r\n\r\n        return tot.add(this.balance);\r\n    }\r\n\r\n    /**\r\n     * Returns the export action type from this node to its child\r\n     * @param to\r\n     */\r\n    abstract getExportMethod(to: ChainIdType): UniversalTxActionExport;\r\n\r\n    /**\r\n     * Returns the import action type from this node to its child\r\n     * @param from Which chain are we importing from\r\n     */\r\n    abstract getImportMethod(from: ChainIdType): UniversalTxActionImport;\r\n\r\n    buildExportTx(destChain: ChainIdType, amount: BN): UniversalTxExport {\r\n        return {\r\n            action: this.getExportMethod(destChain),\r\n            amount: amount,\r\n            fee: this.feeExport,\r\n        };\r\n    }\r\n\r\n    buildImportTx(sourceChain: ChainIdType): UniversalTxImport {\r\n        return {\r\n            action: this.getImportMethod(sourceChain),\r\n            fee: this.feeImport,\r\n        };\r\n    }\r\n\r\n    /***\r\n     * Assumes there is enough balance on node tree\r\n     * Returns empty array even if transaction not possible!\r\n     * What steps to take to have the target balance on this node.\r\n     * @param target Amount of nAVAX needed on this node.\r\n     */\r\n    getStepsForTargetBalance(target: BN): UniversalTx[] {\r\n        // If the node has enough balance no transaction needed\r\n        // If target is negative or zero no transaction needed\r\n        if (this.balance.gte(target) || target.lte(new BN(0))) {\r\n            return [];\r\n        }\r\n\r\n        // If not enough balance and no parents\r\n        // return all the balance\r\n        if (this.balance.lt(target) && this.parents.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        // If not enough balance on this node, try to collect it from parents\r\n        // Amount needed to collect from parents\r\n        let remaining = target.sub(this.balance);\r\n\r\n        let transactions = [];\r\n        for (let i = 0; i < this.parents.length; i++) {\r\n            let p = this.parents[i];\r\n\r\n            if (remaining.lte(new BN(0))) break;\r\n\r\n            // Parent's balance\r\n            let pBal = p.reduceTotalBalanceFromParents();\r\n            const exportFee = p.feeExport;\r\n            const importFee = this.feeImport;\r\n            const feeImportExport = exportFee.add(importFee);\r\n            // Maximum balance we can import from parent\r\n            let pBalMax = pBal.sub(feeImportExport);\r\n            // The parent needs to have this balance to satisfy the needed amount\r\n\r\n            // Try to export the remaining amount, if the parent balance is lower than that export the maximum amount\r\n            // Import amount is the usable amount imported\r\n            const importAmt = BN.min(pBalMax, remaining); // The amount that will cross to the target chain\r\n            // Exported amount should include the import fees\r\n            const exportAmt = importAmt.add(importFee);\r\n\r\n            if (exportAmt.lte(new BN(0))) continue;\r\n\r\n            let pTx = p.buildExportTx(this.chain, exportAmt);\r\n            let importTx = this.buildImportTx(p.chain);\r\n\r\n            transactions.push(pTx);\r\n            transactions.push(importTx);\r\n\r\n            remaining = remaining.sub(importAmt);\r\n        }\r\n\r\n        // If we still have remaining balance, we can not complete this transfer\r\n        if (remaining.gt(new BN(0))) {\r\n            throw new Error('Insufficient AVAX balances.');\r\n        }\r\n\r\n        return transactions;\r\n    }\r\n\r\n    addParent(node: UniversalNodeAbstract) {\r\n        this.parents.push(node);\r\n    }\r\n\r\n    setChild(node: UniversalNodeAbstract) {\r\n        this.child = node;\r\n    }\r\n}\r\n","import { UniversalNodeAbstract } from '@/UniversalTx/UniversalNode';\r\nimport { ExportChainsX } from '@/Wallet/types';\r\nimport {\r\n    UniversalTxActionExportX,\r\n    UniversalTxActionImportX,\r\n    UniversalTxExportX,\r\n    UniversalTxImportX,\r\n} from '@/UniversalTx/types';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\n\r\nexport default class UniversalNodeX extends UniversalNodeAbstract {\r\n    constructor(balance: BN, feeExport: BN, feeImport: BN) {\r\n        super(balance, 'X', feeExport, feeImport);\r\n    }\r\n\r\n    buildExportTx(destChain: ExportChainsX, amount: BN): UniversalTxExportX {\r\n        return super.buildExportTx(destChain, amount) as UniversalTxExportX;\r\n    }\r\n\r\n    buildImportTx(sourceChain: ExportChainsX): UniversalTxImportX {\r\n        return super.buildImportTx(sourceChain) as UniversalTxImportX;\r\n    }\r\n\r\n    getExportMethod(to: ExportChainsX): UniversalTxActionExportX {\r\n        if (to === 'P') {\r\n            return 'export_x_p';\r\n        } else {\r\n            return 'export_x_c';\r\n        }\r\n    }\r\n\r\n    getImportMethod(from: ExportChainsX): UniversalTxActionImportX {\r\n        if (from === 'P') {\r\n            return 'import_p_x';\r\n        } else {\r\n            return 'import_c_x';\r\n        }\r\n    }\r\n}\r\n","import { UniversalNodeAbstract } from '@/UniversalTx/UniversalNode';\r\nimport { ExportChainsP } from '@/Wallet/types';\r\nimport {\r\n    UniversalTxActionExportP,\r\n    UniversalTxActionImportP,\r\n    UniversalTxExportP,\r\n    UniversalTxImportP,\r\n} from '@/UniversalTx/types';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\n\r\nexport default class UniversalNodeP extends UniversalNodeAbstract {\r\n    constructor(balance: BN, feeExport: BN, feeImport: BN) {\r\n        super(balance, 'P', feeExport, feeImport);\r\n    }\r\n\r\n    buildExportTx(destChain: ExportChainsP, amount: BN): UniversalTxExportP {\r\n        return super.buildExportTx(destChain, amount) as UniversalTxExportP;\r\n    }\r\n\r\n    buildImportTx(sourceChain: ExportChainsP): UniversalTxImportP {\r\n        return super.buildImportTx(sourceChain) as UniversalTxImportP;\r\n    }\r\n\r\n    getExportMethod(to: ExportChainsP): UniversalTxActionExportP {\r\n        if (to === 'X') {\r\n            return 'export_p_x';\r\n        } else {\r\n            return 'export_p_c';\r\n        }\r\n    }\r\n\r\n    getImportMethod(from: ExportChainsP): UniversalTxActionImportP {\r\n        if (from === 'X') {\r\n            return 'import_x_p';\r\n        } else {\r\n            return 'import_c_p';\r\n        }\r\n    }\r\n}\r\n","import { UniversalNodeAbstract } from '@/UniversalTx/UniversalNode';\r\nimport { ExportChainsC } from '@/Wallet/types';\r\nimport {\r\n    UniversalTxActionExportC,\r\n    UniversalTxActionImportC,\r\n    UniversalTxExportC,\r\n    UniversalTxImportC,\r\n} from '@/UniversalTx/types';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\n\r\nexport default class UniversalNodeC extends UniversalNodeAbstract {\r\n    constructor(balance: BN, feeExport: BN, feeImport: BN) {\r\n        super(balance, 'C', feeExport, feeImport);\r\n    }\r\n\r\n    buildExportTx(destChain: ExportChainsC, amount: BN): UniversalTxExportC {\r\n        return super.buildExportTx(destChain, amount) as UniversalTxExportC;\r\n    }\r\n\r\n    buildImportTx(sourceChain: ExportChainsC): UniversalTxImportC {\r\n        return super.buildImportTx(sourceChain) as UniversalTxImportC;\r\n    }\r\n\r\n    getExportMethod(to: ExportChainsC): UniversalTxActionExportC {\r\n        if (to === 'X') {\r\n            return 'export_c_x';\r\n        } else {\r\n            return 'export_c_p';\r\n        }\r\n    }\r\n\r\n    getImportMethod(from: ExportChainsC): UniversalTxActionImportC {\r\n        if (from === 'X') {\r\n            return 'import_x_c';\r\n        } else {\r\n            return 'import_p_c';\r\n        }\r\n    }\r\n}\r\n","import { BN } from '@c4tplatform/caminojs/dist';\r\nimport { UniversalTx } from '@/UniversalTx/types';\r\nimport UniversalNodeX from '@/UniversalTx/UniversalNodeX';\r\nimport UniversalNodeP from '@/UniversalTx/UniversalNodeP';\r\nimport UniversalNodeC from '@/UniversalTx/UniversalNodeC';\r\n\r\nexport function createGraphForP(balX: BN, balP: BN, balC: BN, atomicFeeXP: BN, atomicFeeC: BN): UniversalNodeP {\r\n    let xNode = new UniversalNodeX(balX, atomicFeeXP, atomicFeeXP);\r\n    let pNode = new UniversalNodeP(balP, atomicFeeXP, atomicFeeXP);\r\n    let cNode = new UniversalNodeC(balC, atomicFeeC, atomicFeeC);\r\n\r\n    pNode.addParent(xNode);\r\n    pNode.addParent(cNode);\r\n\r\n    cNode.setChild(pNode);\r\n    xNode.setChild(pNode);\r\n    return pNode;\r\n}\r\n\r\nexport function createGraphForC(balX: BN, balP: BN, balC: BN, atomicFeeXP: BN, atomicFeeC: BN): UniversalNodeC {\r\n    let xNode = new UniversalNodeX(balX, atomicFeeXP, atomicFeeXP);\r\n    let pNode = new UniversalNodeP(balP, atomicFeeXP, atomicFeeXP);\r\n    let cNode = new UniversalNodeC(balC, atomicFeeC, atomicFeeC);\r\n\r\n    cNode.addParent(xNode);\r\n    cNode.addParent(pNode);\r\n\r\n    pNode.setChild(cNode);\r\n    xNode.setChild(cNode);\r\n\r\n    return cNode;\r\n}\r\n\r\nexport function createGraphForX(balX: BN, balP: BN, balC: BN, atomicFeeXP: BN, atomicFeeC: BN): UniversalNodeX {\r\n    let xNode = new UniversalNodeX(balX, atomicFeeXP, atomicFeeXP);\r\n    let pNode = new UniversalNodeP(balP, atomicFeeXP, atomicFeeXP);\r\n    let cNode = new UniversalNodeC(balC, atomicFeeC, atomicFeeC);\r\n\r\n    xNode.addParent(pNode);\r\n    xNode.addParent(cNode);\r\n\r\n    cNode.setChild(xNode);\r\n    pNode.setChild(xNode);\r\n\r\n    return xNode;\r\n}\r\n\r\nexport function canHaveBalanceOnX(\r\n    balX: BN,\r\n    balP: BN,\r\n    balC: BN,\r\n    targetAmount: BN,\r\n    atomicFeeXP: BN,\r\n    atomicFeeC: BN\r\n): boolean {\r\n    let startNode = createGraphForX(balX, balP, balC, atomicFeeXP, atomicFeeC);\r\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\r\n}\r\n\r\nexport function canHaveBalanceOnP(\r\n    balX: BN,\r\n    balP: BN,\r\n    balC: BN,\r\n    targetAmount: BN,\r\n    atomicFeeXP: BN,\r\n    atomicFeeC: BN\r\n): boolean {\r\n    let startNode = createGraphForP(balX, balP, balC, atomicFeeXP, atomicFeeC);\r\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\r\n}\r\n\r\n/**\r\n * Will return true if `targetAmount` can exist on C chain\r\n */\r\nexport function canHaveBalanceOnC(\r\n    balX: BN,\r\n    balP: BN,\r\n    balC: BN,\r\n    targetAmount: BN,\r\n    atomicFeeXP: BN,\r\n    atomicFeeC: BN\r\n): boolean {\r\n    let startNode = createGraphForC(balX, balP, balC, atomicFeeXP, atomicFeeC);\r\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\r\n}\r\n\r\nexport function getStepsForBalanceP(\r\n    balX: BN,\r\n    balP: BN,\r\n    balC: BN,\r\n    targetAmount: BN,\r\n    atomicFeeXP: BN,\r\n    atomicFeeC: BN\r\n): UniversalTx[] {\r\n    let startNode = createGraphForP(balX, balP, balC, atomicFeeXP, atomicFeeC);\r\n\r\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\r\n        throw new Error('Insufficient AVAX.');\r\n    }\r\n\r\n    return startNode.getStepsForTargetBalance(targetAmount);\r\n}\r\n\r\nexport function getStepsForBalanceC(\r\n    balX: BN,\r\n    balP: BN,\r\n    balC: BN,\r\n    targetAmount: BN,\r\n    atomicFeeXP: BN,\r\n    atomicFeeC: BN\r\n): UniversalTx[] {\r\n    let startNode = createGraphForC(balX, balP, balC, atomicFeeXP, atomicFeeC);\r\n\r\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\r\n        throw new Error('Insufficient AVAX.');\r\n    }\r\n\r\n    return startNode.getStepsForTargetBalance(targetAmount);\r\n}\r\n\r\nexport function getStepsForBalanceX(\r\n    balX: BN,\r\n    balP: BN,\r\n    balC: BN,\r\n    targetAmount: BN,\r\n    atomicFeeXP: BN,\r\n    atomicFeeC: BN\r\n): UniversalTx[] {\r\n    let startNode = createGraphForX(balX, balP, balC, atomicFeeXP, atomicFeeC);\r\n\r\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\r\n        throw new Error('Insufficient AVAX.');\r\n    }\r\n\r\n    return startNode.getStepsForTargetBalance(targetAmount);\r\n}\r\n","import { activeNetwork, avalanche, web3 } from '@/Network/network';\r\nimport { BN } from '@c4tplatform/caminojs/dist';\r\nimport {\r\n    EVMInput,\r\n    ExportTx,\r\n    SECPTransferOutput,\r\n    TransferableOutput,\r\n    UnsignedTx,\r\n} from '@c4tplatform/caminojs/dist/apis/evm';\r\nimport { ExportChainsC } from '@/Wallet/types';\r\nimport { bintools } from '@/common';\r\nimport { chainIdFromAlias } from '@/Network';\r\nimport { costExportTx, costImportTx } from '@c4tplatform/caminojs/dist/utils';\r\nimport { buildEvmExportTransaction } from '@/helpers/tx_helper';\r\n\r\nconst MAX_GAS = new BN(1000_000_000_000);\r\n\r\n/**\r\n * Returns the current gas price in WEI from the network\r\n */\r\nexport async function getGasPrice(): Promise<BN> {\r\n    return new BN(await web3.eth.getGasPrice());\r\n}\r\n\r\n/**\r\n * Returns the gas price + 25%, or max gas\r\n */\r\nexport async function getAdjustedGasPrice(): Promise<BN> {\r\n    let gasPrice = await getGasPrice();\r\n    let adjustedGas = adjustValue(gasPrice, 25);\r\n    return BN.min(adjustedGas, MAX_GAS);\r\n}\r\n\r\n/**\r\n *\r\n * @param val\r\n * @param perc What percentage to adjust with\r\n */\r\nexport function adjustValue(val: BN, perc: number) {\r\n    let padAmt = val.div(new BN(100)).mul(new BN(perc));\r\n    return val.add(padAmt);\r\n}\r\n\r\n/**\r\n * Returns the base fee from the network.\r\n */\r\nexport async function getBaseFee(): Promise<BN> {\r\n    const rawHex = (await avalanche().CChain().getBaseFee()).substring(2);\r\n    return new BN(rawHex, 'hex');\r\n}\r\n\r\n/**\r\n * Returns the current base fee + 25%\r\n */\r\nexport async function getBaseFeeRecommended() {\r\n    const baseFee = await getBaseFee();\r\n    return adjustValue(baseFee, 25);\r\n}\r\n\r\n/**\r\n * Returns the base max priority fee from the network.\r\n */\r\nexport async function getMaxPriorityFee(): Promise<BN> {\r\n    const rawHex = (await avalanche().CChain().getMaxPriorityFeePerGas()).substring(2);\r\n    return new BN(rawHex, 'hex');\r\n}\r\n\r\n/**\r\n * Calculate max fee for EIP 1559 transactions given baseFee and maxPriorityFee.\r\n * According to https://www.blocknative.com/blog/eip-1559-fees\r\n * @param baseFee in WEI\r\n * @param maxPriorityFee in WEI\r\n */\r\nexport function calculateMaxFee(baseFee: BN, maxPriorityFee: BN): BN {\r\n    return baseFee.mul(new BN(2)).add(maxPriorityFee);\r\n}\r\n\r\n/**\r\n * Creates a mock import transaction and estimates the gas required for it. Returns fee in units of gas.\r\n * @param numIns Number of inputs for the import transaction.\r\n * @param numSigs Number of signatures used in the import transactions. This value is the sum of owner addresses in every UTXO.\r\n */\r\nexport function estimateImportGasFeeFromMockTx(\r\n    numIns = 1,\r\n    numSigs: number // number of signatures (sum of owner addresses in each utxo)\r\n): number {\r\n    const ATOMIC_TX_COST = 10000; // in gas\r\n    const SIG_COST = 1000; // in gas\r\n    const BASE_TX_SIZE = 78;\r\n    const SINGLE_OWNER_INPUT_SIZE = 90; // in bytes\r\n    const OUTPUT_SIZE = 60; // in bytes\r\n\r\n    // C chain imports consolidate inputs to one output\r\n    const numOutputs = 1;\r\n    // Assuming each input has 1 owner\r\n    const baseSize = BASE_TX_SIZE + numIns * SINGLE_OWNER_INPUT_SIZE + numOutputs * OUTPUT_SIZE;\r\n    const importGas = baseSize + numSigs * SIG_COST + ATOMIC_TX_COST;\r\n\r\n    return importGas;\r\n}\r\n\r\n/**\r\n * Estimates the gas fee using a mock ExportTx built from the passed values.\r\n * @param destinationChain `X` or `P`\r\n * @param amount in nAVAX\r\n * @param from The C chain hex address exported from\r\n * @param to The destination X or P address\r\n */\r\nexport function estimateExportGasFeeFromMockTx(\r\n    destinationChain: ExportChainsC,\r\n    amount: BN,\r\n    from: string,\r\n    to: string\r\n): number {\r\n    const destChainId = chainIdFromAlias(destinationChain);\r\n    const destChainIdBuff = bintools.cb58Decode(destChainId);\r\n    const toBuff = bintools.stringToAddress(to);\r\n    const netID = activeNetwork.networkID;\r\n    const chainID = activeNetwork.cChainID;\r\n    const AVAX_ID = activeNetwork.avaxID;\r\n    const avaxIDBuff = bintools.cb58Decode(AVAX_ID);\r\n\r\n    const txIn = new EVMInput(from, amount, avaxIDBuff);\r\n    const secpOut = new SECPTransferOutput(amount, [toBuff]);\r\n    const txOut = new TransferableOutput(avaxIDBuff, secpOut);\r\n\r\n    // Create fake export Tx\r\n    const chainIdBuff = bintools.cb58Decode(chainID);\r\n    const exportTx = new ExportTx(netID, chainIdBuff, destChainIdBuff, [txIn], [txOut]);\r\n\r\n    const unisgnedTx = new UnsignedTx(exportTx);\r\n\r\n    return costExportTx(avalanche().getNetwork().C, unisgnedTx);\r\n}\r\n\r\n/**\r\n * Returns the estimated gas for the export transaction.\r\n * @param destinationChain Either `X` or `P`\r\n * @param amount The amount to export. In nAVAX.\r\n * @param from The C chain hex address exporting the asset\r\n * @param fromBech The C chain bech32 address exporting the asset\r\n * @param to The destination address on the destination chain\r\n */\r\nexport async function estimateExportGasFee(\r\n    destinationChain: ExportChainsC,\r\n    from: string,\r\n    fromBech: string,\r\n    to: string,\r\n    amount: BN\r\n): Promise<number> {\r\n    let exportTx = await buildEvmExportTransaction([from], to, amount, fromBech, destinationChain, new BN(0));\r\n\r\n    return costExportTx(avalanche().getNetwork().C, exportTx);\r\n}\r\n","import {\r\n    AssetBalanceP,\r\n    AssetBalanceRawX,\r\n    AssetBalanceX,\r\n    BTCNetworkType,\r\n    ERC20Balance,\r\n    ExportChainsC,\r\n    ExportChainsP,\r\n    ExportChainsX,\r\n    iAvaxBalance,\r\n    WalletBalanceX,\r\n    WalletEventArgsType,\r\n    WalletEventType,\r\n    WalletNameType,\r\n} from './types';\r\nimport {\r\n    buildAvmExportTransaction,\r\n    buildCreateNftFamilyTx,\r\n    buildCustomEvmTx,\r\n    buildEvmExportTransaction,\r\n    buildEvmTransferEIP1559Tx,\r\n    buildEvmTransferErc20Tx,\r\n    buildEvmTransferErc721Tx,\r\n    buildEvmTransferNativeTx,\r\n    buildMintNftTx,\r\n    buildPlatformExportTransaction,\r\n    estimateAvaxGas,\r\n    estimateErc20Gas,\r\n} from '@/helpers/tx_helper';\r\nimport { BN, Buffer } from '@c4tplatform/caminojs/dist';\r\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\r\nimport { activeNetwork, avalanche, web3 } from '@/Network/network';\r\nimport { EvmWallet } from '@/Wallet/EVM/EvmWallet';\r\n\r\nimport {\r\n    avmGetAllUTXOs,\r\n    avmGetAtomicUTXOs,\r\n    evmGetAtomicUTXOs,\r\n    getStakeForAddresses,\r\n    platformGetAllUTXOs,\r\n    platformGetAtomicUTXOs,\r\n} from '@/helpers/utxo_helper';\r\n\r\nimport {\r\n    UTXOSet as AVMUTXOSet,\r\n    UnsignedTx as AVMUnsignedTx,\r\n    UTXO as AVMUTXO,\r\n    Tx as AvmTx,\r\n    AVMConstants,\r\n    AmountOutput,\r\n} from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport {\r\n    UTXOSet as PlatformUTXOSet,\r\n    UTXO as PlatformUTXO,\r\n    UnsignedTx as PlatformUnsignedTx,\r\n    Tx as PlatformTx,\r\n    PlatformVMConstants,\r\n    StakeableLockOut,\r\n} from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { UnsignedTx as EVMUnsignedTx, Tx as EVMTx, UTXOSet as EVMUTXOSet } from '@c4tplatform/caminojs/dist/apis/evm';\r\n\r\nimport { PayloadBase, UnixNow } from '@c4tplatform/caminojs/dist/utils';\r\nimport { getAssetDescription } from '@/Asset/Assets';\r\nimport { getErc20Token } from '@/Asset/Erc20';\r\nimport { NO_NETWORK } from '@/errors';\r\nimport { avaxCtoX, bnToLocaleString, getTxFeeP, getTxFeeX, waitTxC, waitTxEvm, waitTxP, waitTxX } from '@/utils';\r\nimport { EvmWalletReadonly } from '@/Wallet/EVM/EvmWalletReadonly';\r\nimport EventEmitter from 'events';\r\nimport { getTransactionSummary, getTransactionSummaryEVM, HistoryItemType } from '@/History';\r\nimport { bintools } from '@/common';\r\nimport { ChainIdType } from '@/common';\r\nimport {\r\n    createGraphForC,\r\n    createGraphForP,\r\n    createGraphForX,\r\n    getStepsForBalanceC,\r\n    getStepsForBalanceP,\r\n    getStepsForBalanceX,\r\n    UniversalTx,\r\n} from '@/UniversalTx';\r\nimport { UniversalNodeAbstract } from '@/UniversalTx/UniversalNode';\r\nimport { GetStakeResponse } from '@c4tplatform/caminojs/dist/apis/platformvm/interfaces';\r\nimport { networkEvents } from '@/Network/eventEmitter';\r\nimport { NetworkConfig } from '@/Network';\r\nimport { chainIdFromAlias } from '@/Network/helpers/idFromAlias';\r\nimport {\r\n    estimateExportGasFee,\r\n    estimateExportGasFeeFromMockTx,\r\n    estimateImportGasFeeFromMockTx,\r\n    getBaseFeeRecommended,\r\n} from '@/helpers/gas_helper';\r\nimport { getErc20History, getNormalHistory } from '@/Explorer/snowtrace';\r\nimport {\r\n    filterDuplicateOrtelius,\r\n    getAddressHistory,\r\n    getAddressHistoryEVM,\r\n    getTx,\r\n    getTxEvm,\r\n    OrteliusAvalancheTx,\r\n} from '@/Explorer';\r\nimport { TypedDataV1, TypedMessage } from '@metamask/eth-sig-util';\r\n\r\nexport abstract class WalletProvider {\r\n    abstract type: WalletNameType;\r\n    abstract evmWallet: EvmWallet | EvmWalletReadonly;\r\n\r\n    /**\r\n     * The X chain UTXOs of the wallet's current state\r\n     */\r\n    public utxosX: AVMUTXOSet = new AVMUTXOSet();\r\n\r\n    /**\r\n     * The P chain UTXOs of the wallet's current state\r\n     */\r\n    public utxosP: PlatformUTXOSet = new PlatformUTXOSet();\r\n\r\n    public balanceX: WalletBalanceX = {};\r\n\r\n    abstract signEvm(tx: Transaction | FeeMarketEIP1559Transaction): Promise<Transaction | FeeMarketEIP1559Transaction>;\r\n    abstract signX(tx: AVMUnsignedTx): Promise<AvmTx>;\r\n    abstract signP(tx: PlatformUnsignedTx): Promise<PlatformTx>;\r\n    abstract signC(tx: EVMUnsignedTx): Promise<EVMTx>;\r\n\r\n    abstract getAddressX(): string;\r\n    abstract getChangeAddressX(): string;\r\n    abstract getAddressP(): string;\r\n\r\n    abstract getExternalAddressesX(): Promise<string[]>;\r\n    abstract getExternalAddressesXSync(): string[];\r\n    abstract getInternalAddressesX(): Promise<string[]>;\r\n    abstract getInternalAddressesXSync(): string[];\r\n    abstract getExternalAddressesP(): Promise<string[]>;\r\n    abstract getExternalAddressesPSync(): string[];\r\n\r\n    abstract getAllAddressesX(): Promise<string[]>;\r\n    abstract getAllAddressesXSync(): string[];\r\n    abstract getAllAddressesP(): Promise<string[]>;\r\n    abstract getAllAddressesPSync(): string[];\r\n\r\n    abstract personalSign(data: string): Promise<string>;\r\n    abstract signTypedData_V1(data: TypedDataV1): Promise<string>;\r\n    abstract signTypedData_V3(data: TypedMessage<any>): Promise<string>;\r\n    abstract signTypedData_V4(data: TypedMessage<any>): Promise<string>;\r\n\r\n    protected constructor() {\r\n        networkEvents.on('network_change', this.onNetworkChange.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Call after getting done with the wallet to avoi memory leaks and remove event listeners\r\n     */\r\n    public destroy() {\r\n        networkEvents.off('network_change', this.onNetworkChange);\r\n    }\r\n\r\n    /**\r\n     * Fired when the network changes\r\n     * @param config\r\n     * @protected\r\n     */\r\n    //@ts-ignore\r\n    protected onNetworkChange(config: NetworkConfig) {}\r\n\r\n    /***\r\n     * Used to get an identifier string that is consistent across different network connections.\r\n     * Currently returns the C address of this wallet.\r\n     */\r\n    public getBaseAddress(): string {\r\n        return this.getAddressC();\r\n    }\r\n\r\n    protected emitter: EventEmitter = new EventEmitter();\r\n\r\n    public on(event: WalletEventType, listener: (...args: any[]) => void): void {\r\n        this.emitter.on(event, listener);\r\n    }\r\n\r\n    public off(event: WalletEventType, listener: (...args: any[]) => void): void {\r\n        this.emitter.off(event, listener);\r\n    }\r\n\r\n    protected emit(event: WalletEventType, args?: WalletEventArgsType): void {\r\n        this.emitter.emit(event, args);\r\n    }\r\n\r\n    protected emitAddressChange(): void {\r\n        this.emit('addressChanged', {\r\n            X: this.getAddressX(),\r\n            changeX: this.getChangeAddressX(),\r\n            P: this.getAddressP(),\r\n        });\r\n    }\r\n\r\n    protected emitBalanceChangeX(): void {\r\n        this.emit('balanceChangedX', this.balanceX);\r\n    }\r\n\r\n    protected emitBalanceChangeP(): void {\r\n        this.emit('balanceChangedP', this.getAvaxBalanceP());\r\n    }\r\n\r\n    protected emitBalanceChangeC(): void {\r\n        this.emit('balanceChangedC', this.getAvaxBalanceC());\r\n    }\r\n\r\n    /**\r\n     * Gets the active address on the C chain\r\n     * @return Hex representation of the EVM address.\r\n     */\r\n    public getAddressC() {\r\n        return this.evmWallet.getAddress();\r\n    }\r\n\r\n    public getEvmAddressBech() {\r\n        return this.evmWallet.getAddressBech32();\r\n    }\r\n\r\n    /**\r\n     * Returns the BTC address of the C-Chain public key.\r\n     */\r\n    public getAddressBTC(type: BTCNetworkType): string {\r\n        return this.evmWallet.getAddressBTC(type);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param to - the address funds are being send to.\r\n     * @param amount - amount of AVAX to send in nAVAX\r\n     * @param memo - A MEMO for the transaction\r\n     */\r\n    async sendAvaxX(to: string, amount: BN, memo?: string): Promise<string> {\r\n        if (!activeNetwork) throw NO_NETWORK;\r\n\r\n        let memoBuff = memo ? Buffer.from(memo) : undefined;\r\n\r\n        let froms = await this.getAllAddressesX();\r\n        let changeAddress = this.getChangeAddressX();\r\n        let utxoSet = this.utxosX;\r\n\r\n        let tx = await avalanche()\r\n            .XChain()\r\n            .buildBaseTx(utxoSet, amount, activeNetwork.avaxID, [to], froms, [changeAddress], memoBuff);\r\n        let signedTx = await this.signX(tx);\r\n        let txId = await avalanche().XChain().issueTx(signedTx);\r\n        await waitTxX(txId);\r\n\r\n        // Update UTXOs\r\n        this.updateUtxosX();\r\n\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     * Sends AVAX to another address on the C chain using legacy transaction format.\r\n     * @param to Hex address to send AVAX to.\r\n     * @param amount Amount of AVAX to send, represented in WEI format.\r\n     * @param gasPrice Gas price in WEI format\r\n     * @param gasLimit Gas limit\r\n     *\r\n     * @return Returns the transaction hash\r\n     */\r\n    async sendAvaxC(to: string, amount: BN, gasPrice: BN, gasLimit: number): Promise<string> {\r\n        let fromAddr = this.getAddressC();\r\n        let tx = await buildEvmTransferNativeTx(fromAddr, to, amount, gasPrice, gasLimit);\r\n        let txId = await this.issueEvmTx(tx);\r\n        await this.updateAvaxBalanceC();\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     * Send Avalanche Native Tokens on X chain\r\n     * @param assetID ID of the token to send\r\n     * @param amount How many units of the token to send. Based on smallest divisible unit.\r\n     * @param to X chain address to send tokens to\r\n     */\r\n    async sendANT(assetID: string, amount: BN, to: string): Promise<string> {\r\n        let utxoSet = this.getUtxosX();\r\n        let fromAddrs = await this.getAllAddressesX();\r\n        let changeAddr = this.getChangeAddressX();\r\n\r\n        let tx = await avalanche().XChain().buildBaseTx(utxoSet, amount, assetID, [to], fromAddrs, [changeAddr]);\r\n        let signed = await this.signX(tx);\r\n        let txId = await avalanche().XChain().issueTx(signed);\r\n        await waitTxX(txId);\r\n\r\n        this.updateUtxosX();\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     * Makes a transfer call on a ERC20 contract.\r\n     * @param to Hex address to transfer tokens to.\r\n     * @param amount Amount of the ERC20 token to send, donated in the token's correct denomination.\r\n     * @param gasPrice Gas price in WEI format\r\n     * @param gasLimit Gas limit\r\n     * @param contractAddress Contract address of the ERC20 token\r\n     */\r\n    async sendErc20(to: string, amount: BN, gasPrice: BN, gasLimit: number, contractAddress: string): Promise<string> {\r\n        let fromAddr = this.getAddressC();\r\n        let token = await getErc20Token(contractAddress);\r\n        let balOld = await token.balanceOf(fromAddr);\r\n        let tx = await buildEvmTransferErc20Tx(fromAddr, to, amount, gasPrice, gasLimit, contractAddress);\r\n        let txHash = await this.issueEvmTx(tx);\r\n\r\n        // TODO: We should not be using setTimeout, wait until tx is confirmed on chain\r\n        // TODO: Can it be an issue with sticky sessions? Nodes behind a LB?\r\n        // If new balance doesnt match old, emit balance change\r\n        setTimeout(async () => {\r\n            let balNew = await token.balanceOf(fromAddr);\r\n            if (!balOld.eq(balNew)) {\r\n                this.emitBalanceChangeC();\r\n            }\r\n        }, 2000);\r\n\r\n        return txHash;\r\n    }\r\n\r\n    /**\r\n     * Makes a `safeTransferFrom` call on a ERC721 contract.\r\n     * @param to Hex address to transfer the NFT to.\r\n     * @param tokenID ID of the token to transfer inside the ERC71 family.\r\n     * @param gasPrice Gas price in WEI format\r\n     * @param gasLimit Gas limit\r\n     * @param contractAddress Contract address of the ERC721 token\r\n     */\r\n    async sendErc721(contractAddress: string, to: string, tokenID: number, gasPrice: BN, gasLimit: number) {\r\n        const tx = await buildEvmTransferErc721Tx(this.getAddressC(), to, gasPrice, gasLimit, contractAddress, tokenID);\r\n        return await this.issueEvmTx(tx);\r\n    }\r\n\r\n    /**\r\n     * Estimate the gas needed for an ERC20 Transfer transaction\r\n     * @param contractAddress The ERC20 contract address\r\n     * @param to Address receiving the tokens\r\n     * @param amount Amount to send. Given in the smallest divisible unit.\r\n     */\r\n    async estimateErc20Gas(contractAddress: string, to: string, amount: BN): Promise<number> {\r\n        let from = this.getAddressC();\r\n        return await estimateErc20Gas(contractAddress, from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * Estimate the gas needed for an ERC721 `safeTransferFrom` transaction\r\n     * @param contractAddress The ERC20 contract address\r\n     * @param to Address receiving the tokens\r\n     * @param tokenID ID of the token to transfer inside the ERC71 family.\r\n     */\r\n    async estimateErc721TransferGasLimit(contractAddress: string, to: string, tokenID: number) {\r\n        return this.evmWallet.estimateErc721TransferGasLimit(contractAddress, to, tokenID);\r\n    }\r\n\r\n    /**\r\n     * Estimate gas limit for the given inputs.\r\n     * @param to\r\n     * @param data\r\n     */\r\n    async estimateGas(to: string, data: string) {\r\n        const from = this.getAddressC();\r\n        const nonce = await web3.eth.getTransactionCount(from);\r\n        return await web3.eth.estimateGas({\r\n            from: from,\r\n            nonce: nonce,\r\n            to: to,\r\n            data: data,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Estimate the gas needed for a AVAX send transaction on the C chain.\r\n     * @param to Destination address.\r\n     * @param amount Amount of AVAX to send, in WEI.\r\n     */\r\n    async estimateAvaxGasLimit(to: string, amount: BN, gasPrice: BN): Promise<number> {\r\n        let from = this.getAddressC();\r\n        return await estimateAvaxGas(from, to, amount, gasPrice);\r\n    }\r\n\r\n    /**\r\n     * A method to create custom EVM transactions.\r\n     * @param gasPrice\r\n     * @param gasLimit\r\n     * @param data `data` field of the transaction, in hex format\r\n     * @param to `to` field of the transaction, in hex format\r\n     * @param value `value` field of the transaction, in hex format\r\n     * @param nonce Nonce of the transaction, in number. If not provided, SDK will get the latest nonce from the network\r\n     */\r\n    async sendCustomEvmTx(gasPrice: BN, gasLimit: number, data?: string, to?: string, value?: string, nonce?: number) {\r\n        let from = this.getAddressC();\r\n        let tx = await buildCustomEvmTx(from, gasPrice, gasLimit, data, to, value, nonce);\r\n        return await this.issueEvmTx(tx);\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum spendable AVAX balance for the given chain.\r\n     * Scans all chains and take cross over fees into account\r\n     * @param chainType X, P or C\r\n     */\r\n    public getUsableAvaxBalanceForChain(chainType: ChainIdType, atomicFeeXP: BN, atomicFeeC: BN): BN {\r\n        return this.createUniversalNode(chainType, atomicFeeXP, atomicFeeC).reduceTotalBalanceFromParents();\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of a UniversalNode for the given chain using current balance state\r\n     * @param chain Chain of the universal node.\r\n     * @private\r\n     */\r\n    private createUniversalNode(chain: ChainIdType, atomicFeeXP: BN, atomicFeeC: BN): UniversalNodeAbstract {\r\n        let xBal = this.getAvaxBalanceX().unlocked;\r\n        let pBal = this.getAvaxBalanceP().unlocked;\r\n        let cBal = avaxCtoX(this.getAvaxBalanceC()); // need to use 9 decimal places\r\n\r\n        switch (chain) {\r\n            case 'X':\r\n                return createGraphForX(xBal, pBal, cBal, atomicFeeXP, atomicFeeC);\r\n            case 'P':\r\n                return createGraphForP(xBal, pBal, cBal, atomicFeeXP, atomicFeeC);\r\n            case 'C':\r\n                return createGraphForC(xBal, pBal, cBal, atomicFeeXP, atomicFeeC);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Can this wallet have the given amount on the given chain after a series of internal transactions (if required).\r\n     * @param chain X/P/C\r\n     * @param amount The amount to check against\r\n     */\r\n    public canHaveBalanceOnChain(chain: ChainIdType, amount: BN, atomicFeeXP: BN, atomicFeeC: BN): boolean {\r\n        // The maximum amount of AVAX we can have on this chain\r\n        let maxAmt = this.createUniversalNode(chain, atomicFeeXP, atomicFeeC).reduceTotalBalanceFromParents();\r\n        return maxAmt.gte(amount);\r\n    }\r\n\r\n    /**\r\n     * Returns an array of transaction to do in order to have the target amount on the given chain\r\n     * @param chain The chain (X/P/C) to have the desired amount on\r\n     * @param amount The desired amount\r\n     */\r\n    public getTransactionsForBalance(chain: ChainIdType, amount: BN, atomicFeeXP: BN, atomicFeeC: BN): UniversalTx[] {\r\n        let xBal = this.getAvaxBalanceX().unlocked;\r\n        let pBal = this.getAvaxBalanceP().unlocked;\r\n        let cBal = avaxCtoX(this.getAvaxBalanceC()); // need to use 9 decimal places\r\n\r\n        switch (chain) {\r\n            case 'P':\r\n                return getStepsForBalanceP(xBal, pBal, cBal, amount, atomicFeeXP, atomicFeeC);\r\n            case 'C':\r\n                return getStepsForBalanceC(xBal, pBal, cBal, amount, atomicFeeXP, atomicFeeC);\r\n            case 'X':\r\n                return getStepsForBalanceX(xBal, pBal, cBal, amount, atomicFeeXP, atomicFeeC);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a `Transaction`, it will sign and issue it to the network.\r\n     * @param tx The unsigned transaction to issue.\r\n     */\r\n    async issueEvmTx(tx: Transaction | FeeMarketEIP1559Transaction): Promise<string> {\r\n        let signedTx = await this.signEvm(tx);\r\n        let txHex = signedTx.serialize().toString('hex');\r\n        let hash = await web3.eth.sendSignedTransaction('0x' + txHex);\r\n        const txHash = hash.transactionHash;\r\n        return await waitTxEvm(txHash);\r\n    }\r\n\r\n    /**\r\n     * Returns the C chain AVAX balance of the wallet in WEI format.\r\n     */\r\n    async updateAvaxBalanceC(): Promise<BN> {\r\n        let balOld = this.evmWallet.getBalance();\r\n        let balNew = await this.evmWallet.updateBalance();\r\n\r\n        if (!balOld.eq(balNew)) {\r\n            this.emitBalanceChangeC();\r\n        }\r\n\r\n        return balNew;\r\n    }\r\n\r\n    /**\r\n     *  Returns UTXOs on the X chain that belong to this wallet.\r\n     *  - Makes network request.\r\n     *  - Updates `this.utxosX` with new UTXOs\r\n     *  - Calls `this.updateBalanceX()` after success.\r\n     *  */\r\n    public async updateUtxosX(): Promise<AVMUTXOSet> {\r\n        const addresses = await this.getAllAddressesX();\r\n        this.utxosX = await avmGetAllUTXOs(addresses);\r\n\r\n        await this.updateUnknownAssetsX();\r\n        this.updateBalanceX();\r\n\r\n        return this.utxosX;\r\n    }\r\n\r\n    /**\r\n     *  Returns the fetched UTXOs on the X chain that belong to this wallet.\r\n     */\r\n    public getUtxosX(): AVMUTXOSet {\r\n        return this.utxosX;\r\n    }\r\n\r\n    /**\r\n     *  Returns UTXOs on the P chain that belong to this wallet.\r\n     *  - Makes network request.\r\n     *  - Updates `this.utxosP` with the new UTXOs\r\n     */\r\n    public async updateUtxosP(): Promise<PlatformUTXOSet> {\r\n        let addresses = await this.getAllAddressesP();\r\n        this.utxosP = await platformGetAllUTXOs(addresses);\r\n\r\n        this.emitBalanceChangeP();\r\n\r\n        return this.utxosP;\r\n    }\r\n\r\n    /**\r\n     * Returns the fetched UTXOs on the P chain that belong to this wallet.\r\n     */\r\n    public getUtxosP(): PlatformUTXOSet {\r\n        return this.utxosP;\r\n    }\r\n\r\n    /**\r\n     * Returns the number AVAX staked by this wallet.\r\n     */\r\n    public async getStake(): Promise<GetStakeResponse> {\r\n        let addrs = await this.getAllAddressesP();\r\n        return await getStakeForAddresses(addrs);\r\n    }\r\n\r\n    /**\r\n     * Returns the wallet's balance of the given ERC20 contracts\r\n     * @param addresses ERC20 Contract addresses\r\n     */\r\n    public async getBalanceERC20(addresses: string[]): Promise<ERC20Balance[]> {\r\n        let walletAddr = this.getAddressC();\r\n        let tokenCalls = addresses.map((addr) => getErc20Token(addr));\r\n        let tokens = await Promise.all(tokenCalls);\r\n\r\n        let balanceCalls = tokens.map((token) => token.balanceOf(walletAddr));\r\n        let balances = await Promise.all(balanceCalls);\r\n\r\n        return balances.map((bal, i) => {\r\n            let token = tokens[i];\r\n            let balance: ERC20Balance = {\r\n                address: token.address,\r\n                denomination: token.decimals,\r\n                balanceParsed: bnToLocaleString(bal, token.decimals),\r\n                balance: bal,\r\n                name: token.name,\r\n                symbol: token.symbol,\r\n            };\r\n            return balance;\r\n        });\r\n    }\r\n\r\n    private async updateUnknownAssetsX() {\r\n        let utxos = this.utxosX.getAllUTXOs();\r\n\r\n        let assetIds = utxos.map((utxo) => {\r\n            let idBuff = utxo.getAssetID();\r\n            return bintools.cb58Encode(idBuff);\r\n        });\r\n        let uniqueIds = assetIds.filter((id, index) => {\r\n            return assetIds.indexOf(id) === index;\r\n        });\r\n\r\n        let promises = uniqueIds.map((id) => getAssetDescription(id));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Uses the X chain UTXOs owned by this wallet, gets asset description for unknown assets,\r\n     * and returns a dictionary of Asset IDs to balance amounts.\r\n     * - Updates `this.balanceX`\r\n     * - Expensive operation if there are unknown assets\r\n     * - Uses existing UTXOs\r\n     * @private\r\n     */\r\n    private async updateBalanceX(): Promise<WalletBalanceX> {\r\n        if (!activeNetwork) throw NO_NETWORK;\r\n        let utxos = this.utxosX.getAllUTXOs();\r\n\r\n        let unixNow = UnixNow();\r\n\r\n        let res: WalletBalanceX = {};\r\n\r\n        for (let i = 0; i < utxos.length; i++) {\r\n            let utxo = utxos[i];\r\n            let out = utxo.getOutput();\r\n            let type = out.getOutputID();\r\n\r\n            if (type != AVMConstants.SECPXFEROUTPUTID) continue;\r\n\r\n            let locktime = out.getLocktime();\r\n            let amount = (out as AmountOutput).getAmount();\r\n            let assetIdBuff = utxo.getAssetID();\r\n            let assetId = bintools.cb58Encode(assetIdBuff);\r\n\r\n            let asset: AssetBalanceX = res[assetId];\r\n\r\n            if (!asset) {\r\n                let assetInfo = await getAssetDescription(assetId);\r\n                asset = { locked: new BN(0), unlocked: new BN(0), meta: assetInfo };\r\n            }\r\n\r\n            if (locktime.lte(unixNow)) {\r\n                // not locked\r\n                asset.unlocked = asset.unlocked.add(amount);\r\n            } else {\r\n                // locked\r\n                asset.locked = asset.locked.add(amount);\r\n            }\r\n\r\n            res[assetId] = asset;\r\n        }\r\n\r\n        // If there are no AVAX UTXOs create a dummy empty balance object\r\n        let avaxID = activeNetwork.avaxID;\r\n        if (!res[avaxID]) {\r\n            let assetInfo = await getAssetDescription(avaxID);\r\n            res[avaxID] = {\r\n                locked: new BN(0),\r\n                unlocked: new BN(0),\r\n                meta: assetInfo,\r\n            };\r\n        }\r\n\r\n        this.balanceX = res;\r\n\r\n        // TODO: Check previous value\r\n        this.emitBalanceChangeX();\r\n        return res;\r\n    }\r\n\r\n    public getBalanceX(): WalletBalanceX {\r\n        return this.balanceX;\r\n    }\r\n\r\n    /**\r\n     * A helpful method that returns the AVAX balance on X, P, C chains.\r\n     * Internally calls chain specific getAvaxBalance methods.\r\n     */\r\n    public getAvaxBalance(): iAvaxBalance {\r\n        let X = this.getAvaxBalanceX();\r\n        let P = this.getAvaxBalanceP();\r\n        let C = this.getAvaxBalanceC();\r\n\r\n        return {\r\n            X,\r\n            P,\r\n            C,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the X chain AVAX balance of the current wallet state.\r\n     * - Does not make a network request.\r\n     * - Does not refresh wallet balance.\r\n     */\r\n    public getAvaxBalanceX(): AssetBalanceRawX {\r\n        if (!activeNetwork) {\r\n            throw new Error('Network not selected.');\r\n        }\r\n        return (\r\n            this.balanceX[activeNetwork.avaxID] || {\r\n                unlocked: new BN(0),\r\n                locked: new BN(0),\r\n            }\r\n        );\r\n    }\r\n\r\n    public getAvaxBalanceC(): BN {\r\n        return this.evmWallet.getBalance();\r\n    }\r\n\r\n    /**\r\n     * Returns the P chain AVAX balance of the current wallet state.\r\n     * - Does not make a network request.\r\n     * - Does not refresh wallet balance.\r\n     */\r\n    public getAvaxBalanceP(): AssetBalanceP {\r\n        let unlocked = new BN(0);\r\n        let locked = new BN(0);\r\n        let lockedStakeable = new BN(0);\r\n\r\n        let utxos = this.utxosP.getAllUTXOs();\r\n        let unixNow = UnixNow();\r\n\r\n        for (let i = 0; i < utxos.length; i++) {\r\n            let utxo = utxos[i];\r\n            let out = utxo.getOutput();\r\n            let type = out.getOutputID();\r\n\r\n            let amount = (out as AmountOutput).getAmount();\r\n\r\n            if (type === PlatformVMConstants.STAKEABLELOCKOUTID) {\r\n                let locktime = (out as StakeableLockOut).getStakeableLocktime();\r\n                if (locktime.lte(unixNow)) {\r\n                    unlocked.iadd(amount);\r\n                } else {\r\n                    lockedStakeable = lockedStakeable.add(amount);\r\n                }\r\n            } else {\r\n                let locktime = (out as AmountOutput).getLocktime();\r\n                if (locktime.lte(unixNow)) {\r\n                    unlocked.iadd(amount);\r\n                } else {\r\n                    locked.iadd(amount);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            unlocked,\r\n            locked,\r\n            lockedStakeable: lockedStakeable,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Exports AVAX from P chain to X chain\r\n     * @remarks\r\n     * The export fee is added automatically to the amount. Make sure the exported amount includes the import fee for the destination chain.\r\n     *\r\n     * @param amt amount of nAVAX to transfer. Fees excluded.\r\n     * @param destinationChain Either `X` or `C`\r\n     * @return returns the transaction id.\r\n     */\r\n    async exportPChain(amt: BN, destinationChain: ExportChainsP) {\r\n        let pChangeAddr = this.getAddressP();\r\n        let fromAddrs = await this.getAllAddressesP();\r\n\r\n        const destinationAddr = destinationChain === 'X' ? this.getAddressX() : this.getEvmAddressBech();\r\n\r\n        let utxoSet = this.utxosP;\r\n\r\n        const exportTx = await buildPlatformExportTransaction(\r\n            utxoSet,\r\n            fromAddrs,\r\n            destinationAddr,\r\n            amt,\r\n            pChangeAddr,\r\n            destinationChain\r\n        );\r\n\r\n        let tx = await this.signP(exportTx);\r\n        let txId = await avalanche().PChain().issueTx(tx);\r\n        await waitTxP(txId);\r\n\r\n        await this.updateUtxosP();\r\n\r\n        return txId;\r\n    }\r\n\r\n    /***\r\n     * Estimates the required fee for a C chain export transaction\r\n     * @param destinationChain Either `X` or `P`\r\n     * @param baseFee Current base fee of the network, use a padded amount.\r\n     * @return BN C chain atomic export transaction fee in nAVAX.\r\n     */\r\n    estimateAtomicFeeExportC(destinationChain: ExportChainsC, baseFee: BN): BN {\r\n        let destinationAddr = destinationChain === 'X' ? this.getAddressX() : this.getAddressP();\r\n        const hexAddr = this.getAddressC();\r\n        // The amount does not effect the fee that much\r\n        const amt = new BN(0);\r\n        const gas = estimateExportGasFeeFromMockTx(destinationChain, amt, hexAddr, destinationAddr);\r\n        return avaxCtoX(baseFee.mul(new BN(gas)));\r\n    }\r\n\r\n    /**\r\n     * Exports AVAX from C chain to X chain\r\n     * @remarks\r\n     * Make sure the exported `amt` includes the import fee for the destination chain.\r\n     *\r\n     * @param amt amount of nAVAX to transfer\r\n     * @param destinationChain either `X` or `P`\r\n     * @param exportFee Export fee in nAVAX\r\n     * @return returns the transaction id.\r\n     */\r\n    async exportCChain(amt: BN, destinationChain: ExportChainsC, exportFee?: BN): Promise<string> {\r\n        let hexAddr = this.getAddressC();\r\n        let bechAddr = this.getEvmAddressBech();\r\n\r\n        let fromAddresses = [hexAddr];\r\n        let destinationAddr = destinationChain === 'X' ? this.getAddressX() : this.getAddressP();\r\n\r\n        // Calculate export fee if it's not given.\r\n        if (!exportFee) {\r\n            const gas = estimateExportGasFeeFromMockTx(destinationChain, amt, hexAddr, destinationAddr);\r\n            const baseFee = await getBaseFeeRecommended();\r\n            exportFee = avaxCtoX(baseFee.mul(new BN(gas)));\r\n        }\r\n\r\n        let exportTx = await buildEvmExportTransaction(\r\n            fromAddresses,\r\n            destinationAddr,\r\n            amt,\r\n            bechAddr,\r\n            destinationChain,\r\n            exportFee\r\n        );\r\n\r\n        let tx = await this.signC(exportTx);\r\n\r\n        let txId = await avalanche().CChain().issueTx(tx);\r\n\r\n        await waitTxC(txId);\r\n\r\n        await this.updateAvaxBalanceC();\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     * Exports AVAX from X chain to either P or C chain\r\n     * @remarks\r\n     * The export fee will be added to the amount automatically. Make sure the exported amount has the import fee for the destination chain.\r\n     *\r\n     * @param amt amount of nAVAX to transfer\r\n     * @param destinationChain Which chain to export to.\r\n     * @return returns the transaction id.\r\n     */\r\n    async exportXChain(amt: BN, destinationChain: ExportChainsX) {\r\n        let destinationAddr = destinationChain === 'P' ? this.getAddressP() : this.getEvmAddressBech();\r\n\r\n        let fromAddresses = await this.getAllAddressesX();\r\n        let changeAddress = this.getChangeAddressX();\r\n        let utxos = this.utxosX;\r\n        let exportTx = await buildAvmExportTransaction(\r\n            destinationChain,\r\n            utxos,\r\n            fromAddresses,\r\n            destinationAddr,\r\n            amt,\r\n            changeAddress\r\n        );\r\n\r\n        let tx = await this.signX(exportTx);\r\n\r\n        let txId = await avalanche().XChain().issueTx(tx);\r\n        await waitTxX(txId);\r\n\r\n        // Update UTXOs\r\n        await this.updateUtxosX();\r\n\r\n        return txId;\r\n    }\r\n\r\n    async getAtomicUTXOsX(sourceChain: ExportChainsX) {\r\n        let addrs = await this.getAllAddressesX();\r\n        let result = await avmGetAtomicUTXOs(addrs, sourceChain);\r\n        return result;\r\n    }\r\n\r\n    async getAtomicUTXOsP(sourceChain: ExportChainsP): Promise<PlatformUTXOSet> {\r\n        let addrs = await this.getAllAddressesP();\r\n        return await platformGetAtomicUTXOs(addrs, sourceChain);\r\n    }\r\n\r\n    async getAtomicUTXOsC(sourceChain: ExportChainsC) {\r\n        const bechAddr = this.getEvmAddressBech();\r\n        return await evmGetAtomicUTXOs([bechAddr], sourceChain);\r\n    }\r\n\r\n    /**\r\n     * Imports atomic X chain UTXOs to the current active X chain address\r\n     * @param sourceChain The chain to import from, either `P` or `C`\r\n     */\r\n    async importX(sourceChain: ExportChainsX) {\r\n        const utxoSet = await this.getAtomicUTXOsX(sourceChain);\r\n\r\n        if (utxoSet.getAllUTXOs().length === 0) {\r\n            throw new Error('Nothing to import.');\r\n        }\r\n\r\n        let xToAddr = this.getAddressX();\r\n\r\n        let hrp = avalanche().getHRP();\r\n        let utxoAddrs = utxoSet.getAddresses().map((addr) => bintools.addressToString(hrp, 'X', addr));\r\n\r\n        let fromAddrs = utxoAddrs;\r\n        let ownerAddrs = utxoAddrs;\r\n\r\n        const sourceChainId = chainIdFromAlias(sourceChain);\r\n\r\n        // Owner addresses, the addresses we exported to\r\n        const unsignedTx = await avalanche()\r\n            .XChain()\r\n            .buildImportTx(utxoSet, ownerAddrs, sourceChainId, [xToAddr], fromAddrs, [xToAddr]);\r\n\r\n        const tx = await this.signX(unsignedTx);\r\n        const txId = await avalanche().XChain().issueTx(tx);\r\n\r\n        await waitTxX(txId);\r\n\r\n        // Update UTXOs\r\n        await this.updateUtxosX();\r\n\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     * Import utxos in atomic memory to the P chain.\r\n     * @param sourceChain Either `X` or `C`\r\n     * @param [toAddress] The destination P chain address assets will get imported to. Defaults to the P chain address of the wallet.\r\n     */\r\n    async importP(sourceChain: ExportChainsP, toAddress?: string): Promise<string> {\r\n        const utxoSet = await this.getAtomicUTXOsP(sourceChain);\r\n\r\n        if (utxoSet.getAllUTXOs().length === 0) {\r\n            throw new Error('Nothing to import.');\r\n        }\r\n\r\n        // Owner addresses, the addresses we exported to\r\n        let walletAddrP = this.getAddressP();\r\n\r\n        let hrp = avalanche().getHRP();\r\n        let utxoAddrs = utxoSet.getAddresses().map((addr) => bintools.addressToString(hrp, 'P', addr));\r\n\r\n        let ownerAddrs = utxoAddrs;\r\n\r\n        if (!toAddress) {\r\n            toAddress = walletAddrP;\r\n        }\r\n\r\n        const sourceChainId = chainIdFromAlias(sourceChain);\r\n\r\n        const unsignedTx = await avalanche()\r\n            .PChain()\r\n            .buildImportTx(\r\n                utxoSet,\r\n                ownerAddrs,\r\n                sourceChainId,\r\n                [toAddress],\r\n                ownerAddrs,\r\n                [walletAddrP],\r\n                undefined,\r\n                undefined\r\n            );\r\n        const tx = await this.signP(unsignedTx);\r\n        const txId = await avalanche().PChain().issueTx(tx);\r\n\r\n        await waitTxP(txId);\r\n\r\n        await this.updateUtxosP();\r\n\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param sourceChain Which chain to import from. `X` or `P`\r\n     * @param [fee] The import fee to use in the transactions. If omitted the SDK will try to calculate the fee. For deterministic transactions you should always pre calculate and provide this value.\r\n     * @param [utxoSet] If omitted imports all atomic UTXOs.\r\n     */\r\n    async importC(sourceChain: ExportChainsC, fee?: BN, utxoSet?: EVMUTXOSet) {\r\n        let bechAddr = this.getEvmAddressBech();\r\n\r\n        if (!utxoSet) {\r\n            utxoSet = await this.getAtomicUTXOsC(sourceChain);\r\n        }\r\n\r\n        const utxos = utxoSet.getAllUTXOs();\r\n        if (utxos.length === 0) {\r\n            throw new Error('Nothing to import.');\r\n        }\r\n\r\n        let toAddress = this.getAddressC();\r\n        let ownerAddresses = [bechAddr];\r\n        let fromAddresses = ownerAddresses;\r\n        const sourceChainId = chainIdFromAlias(sourceChain);\r\n\r\n        // Calculate fee if not provided\r\n        if (!fee) {\r\n            // Calculate number of signatures\r\n            const numSigs = utxos.reduce((acc, utxo) => {\r\n                return acc + utxo.getOutput().getAddresses().length;\r\n            }, 0);\r\n            const numIns = utxos.length;\r\n\r\n            const importGas = estimateImportGasFeeFromMockTx(numIns, numSigs);\r\n            const baseFee = await getBaseFeeRecommended();\r\n            fee = avaxCtoX(baseFee.mul(new BN(importGas)));\r\n        }\r\n\r\n        const unsignedTx = await avalanche()\r\n            .CChain()\r\n            .buildImportTx(utxoSet, toAddress, ownerAddresses, sourceChainId, fromAddresses, fee);\r\n        let tx = await this.signC(unsignedTx);\r\n        let id = await avalanche().CChain().issueTx(tx);\r\n\r\n        await waitTxC(id);\r\n\r\n        await this.updateAvaxBalanceC();\r\n\r\n        return id;\r\n    }\r\n\r\n    async createNftFamily(name: string, symbol: string, groupNum: number) {\r\n        let fromAddresses = await this.getAllAddressesX();\r\n        let changeAddress = this.getChangeAddressX();\r\n\r\n        let minterAddress = this.getAddressX();\r\n\r\n        let utxoSet = this.utxosX;\r\n\r\n        let unsignedTx = await buildCreateNftFamilyTx(\r\n            name,\r\n            symbol,\r\n            groupNum,\r\n            fromAddresses,\r\n            minterAddress,\r\n            changeAddress,\r\n            utxoSet\r\n        );\r\n\r\n        let signed = await this.signX(unsignedTx);\r\n        const txId = await avalanche().XChain().issueTx(signed);\r\n        return await waitTxX(txId);\r\n    }\r\n\r\n    async mintNft(mintUtxo: AVMUTXO, payload: PayloadBase, quantity: number) {\r\n        let ownerAddress = this.getAddressX();\r\n        let changeAddress = this.getChangeAddressX();\r\n\r\n        let sourceAddresses = await this.getAllAddressesX();\r\n\r\n        let utxoSet = this.utxosX;\r\n        let tx = await buildMintNftTx(\r\n            mintUtxo,\r\n            payload,\r\n            quantity,\r\n            ownerAddress,\r\n            changeAddress,\r\n            sourceAddresses,\r\n            utxoSet\r\n        );\r\n        let signed = await this.signX(tx);\r\n        const txId = await avalanche().XChain().issueTx(signed);\r\n        return await waitTxX(txId);\r\n    }\r\n\r\n    /**\r\n     * Adds a validator to the network using the given node id.\r\n     *\r\n     * @param nodeID The node id you are adding as a validator\r\n     * @param amt Amount of AVAX to stake in nAVAX\r\n     * @param start Validation period start date\r\n     * @param end Validation period end date\r\n     * @param delegationFee Minimum 2%\r\n     * @param rewardAddress P chain address to send staking rewards\r\n     * @param utxos\r\n     *\r\n     * @return Transaction id\r\n     */\r\n    async validate(\r\n        nodeID: string,\r\n        amt: BN,\r\n        start: Date,\r\n        end: Date,\r\n        delegationFee: number,\r\n        rewardAddress?: string,\r\n        utxos?: PlatformUTXO[]\r\n    ): Promise<string> {\r\n        let utxoSet = this.utxosP;\r\n\r\n        // If given custom UTXO set use that\r\n        if (utxos) {\r\n            utxoSet = new PlatformUTXOSet();\r\n            utxoSet.addArray(utxos);\r\n        }\r\n\r\n        let pAddressStrings = await this.getAllAddressesP();\r\n\r\n        let stakeAmount = amt;\r\n\r\n        // If reward address isn't given use index 0 address\r\n        if (!rewardAddress) {\r\n            rewardAddress = this.getAddressP();\r\n        }\r\n\r\n        // For change address use first available on the platform chain\r\n        let changeAddress = this.getAddressP();\r\n\r\n        let stakeReturnAddr = this.getAddressP();\r\n\r\n        // Convert dates to unix time\r\n        let startTime = new BN(Math.round(start.getTime() / 1000));\r\n        let endTime = new BN(Math.round(end.getTime() / 1000));\r\n\r\n        const unsignedTx = await avalanche().PChain().buildAddValidatorTx(\r\n            utxoSet,\r\n            [stakeReturnAddr],\r\n            pAddressStrings, // from\r\n            [changeAddress], // change\r\n            nodeID,\r\n            startTime,\r\n            endTime,\r\n            stakeAmount,\r\n            [rewardAddress],\r\n            delegationFee\r\n        );\r\n\r\n        let tx = await this.signP(unsignedTx);\r\n        const txId = await avalanche().PChain().issueTx(tx);\r\n        await waitTxP(txId);\r\n\r\n        this.updateUtxosP();\r\n\r\n        return txId;\r\n    }\r\n\r\n    async delegate(\r\n        nodeID: string,\r\n        amt: BN,\r\n        start: Date,\r\n        end: Date,\r\n        rewardAddress?: string,\r\n        utxos?: PlatformUTXO[]\r\n    ): Promise<string> {\r\n        let utxoSet = this.utxosP;\r\n        let pAddressStrings = await this.getAllAddressesP();\r\n\r\n        let stakeAmount = amt;\r\n\r\n        // If given custom UTXO set use that\r\n        if (utxos) {\r\n            utxoSet = new PlatformUTXOSet();\r\n            utxoSet.addArray(utxos);\r\n        }\r\n\r\n        // If reward address isn't given use current P address\r\n        if (!rewardAddress) {\r\n            rewardAddress = this.getAddressP();\r\n        }\r\n\r\n        let stakeReturnAddr = this.getAddressP();\r\n\r\n        // For change address use the current platform chain\r\n        let changeAddress = this.getAddressP();\r\n\r\n        // Convert dates to unix time\r\n        let startTime = new BN(Math.round(start.getTime() / 1000));\r\n        let endTime = new BN(Math.round(end.getTime() / 1000));\r\n\r\n        const unsignedTx = await avalanche().PChain().buildAddDelegatorTx(\r\n            utxoSet,\r\n            [stakeReturnAddr],\r\n            pAddressStrings,\r\n            [changeAddress],\r\n            nodeID,\r\n            startTime,\r\n            endTime,\r\n            stakeAmount,\r\n            [rewardAddress] // reward address\r\n        );\r\n\r\n        const tx = await this.signP(unsignedTx);\r\n        const txId = await avalanche().PChain().issueTx(tx);\r\n        await waitTxP(txId);\r\n\r\n        this.updateUtxosP();\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     * Issues the given transaction.\r\n     * @param tx A universal transaction json object.\r\n     */\r\n    public async issueUniversalTx(tx: UniversalTx): Promise<string> {\r\n        switch (tx.action) {\r\n            case 'export_x_c':\r\n                return await this.exportXChain(tx.amount, 'C');\r\n            case 'import_x_c':\r\n                return await this.importC('X', tx.fee);\r\n            case 'export_x_p':\r\n                return await this.exportXChain(tx.amount, 'P');\r\n            case 'import_x_p':\r\n                return await this.importP('X');\r\n            case 'export_c_x':\r\n                return await this.exportCChain(tx.amount, 'X', tx.fee);\r\n            case 'import_c_x':\r\n                return await this.importX('C');\r\n            case 'export_c_p':\r\n                return await this.exportCChain(tx.amount, 'P', tx.fee);\r\n            case 'import_c_p':\r\n                return await this.importP('C');\r\n            case 'export_p_x':\r\n                return await this.exportPChain(tx.amount, 'X');\r\n            case 'import_p_x':\r\n                return await this.importX('P');\r\n            case 'export_p_c':\r\n                return await this.exportPChain(tx.amount, 'C');\r\n            case 'import_p_c':\r\n                return await this.importC('P', tx.fee);\r\n            default:\r\n                throw new Error('Method not supported.');\r\n        }\r\n    }\r\n\r\n    async getHistoryX(limit = 0): Promise<OrteliusAvalancheTx[]> {\r\n        let addrs = await this.getAllAddressesX();\r\n        return await getAddressHistory(addrs, limit, avalanche().XChain().getBlockchainID());\r\n    }\r\n\r\n    async getHistoryP(limit = 0): Promise<OrteliusAvalancheTx[]> {\r\n        let addrs = await this.getAllAddressesP();\r\n        return await getAddressHistory(addrs, limit, avalanche().PChain().getBlockchainID());\r\n    }\r\n\r\n    /**\r\n     * Returns atomic history for this wallet on the C chain.\r\n     * @remarks Excludes EVM transactions.\r\n     * @param limit\r\n     */\r\n    async getHistoryC(limit = 0): Promise<OrteliusAvalancheTx[]> {\r\n        let addrs = [this.getEvmAddressBech(), ...(await this.getAllAddressesX())];\r\n        return await getAddressHistory(addrs, limit, avalanche().CChain().getBlockchainID());\r\n    }\r\n\r\n    /**\r\n     * Returns history for this wallet on the C chain.\r\n     * @remarks Excludes atomic C chain import/export transactions.\r\n     */\r\n    async getHistoryEVM() {\r\n        let addr = this.getAddressC();\r\n        return await getAddressHistoryEVM(addr);\r\n    }\r\n\r\n    /**\r\n     * Returns the erc 20 activity for this wallet's C chain address. Uses Snowtrace APIs.\r\n     * @param offset Number of items per page. Optional.\r\n     * @param page If provided will paginate the results. Optional.\r\n     * @param contractAddress Filter activity by the ERC20 contract address. Optional.\r\n     */\r\n    async getHistoryERC20(page?: number, offset?: number, contractAddress?: string) {\r\n        const erc20Hist = await getErc20History(this.getAddressC(), activeNetwork, page, offset, contractAddress);\r\n        return erc20Hist;\r\n    }\r\n\r\n    /**\r\n     * Get a list of 'Normal' Transactions for wallet's C chain address. Uses Snowtrace APIs.\r\n     * @param offset Number of items per page. Optional.\r\n     * @param page If provided will paginate the results. Optional.\r\n     */\r\n    async getHistoryNormalTx(page?: number, offset?: number) {\r\n        const normalHist = await getNormalHistory(this.getAddressC(), activeNetwork, page, offset);\r\n        return normalHist;\r\n    }\r\n\r\n    async getHistory(limit: number = 0): Promise<HistoryItemType[]> {\r\n        let [txsX, txsP, txsC] = await Promise.all([\r\n            this.getHistoryX(limit),\r\n            this.getHistoryP(limit),\r\n            this.getHistoryC(limit),\r\n        ]);\r\n\r\n        let txsXPC = filterDuplicateOrtelius(txsX.concat(txsP, txsC));\r\n\r\n        let txsEVM = await this.getHistoryEVM();\r\n\r\n        let addrsX = await this.getAllAddressesX();\r\n        let addrBechC = this.getEvmAddressBech();\r\n        let addrs = [...addrsX, addrBechC];\r\n\r\n        let addrC = this.getAddressC();\r\n\r\n        // Parse X,P,C transactions\r\n        // Have to loop because of the asynchronous call\r\n        let parsedXPC = [];\r\n        for (let i = 0; i < txsXPC.length; i++) {\r\n            let tx = txsXPC[i];\r\n            try {\r\n                let summary = await getTransactionSummary(tx, addrs, addrC);\r\n                parsedXPC.push(summary);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n\r\n        // Parse EVM Transactions\r\n        let parsedEVM = txsEVM.map((tx) => getTransactionSummaryEVM(tx, addrC));\r\n\r\n        // Sort and join X,P,C transactions\r\n        let parsedAll = [...parsedXPC, ...parsedEVM];\r\n        let txsSorted = parsedAll.sort((x, y) => (x.timestamp.getTime() < y.timestamp.getTime() ? 1 : -1));\r\n\r\n        // If there is a limit only return that much\r\n        if (limit > 0) {\r\n            return txsSorted.slice(0, limit);\r\n        }\r\n        return txsSorted;\r\n    }\r\n\r\n    /**\r\n     * Fetches information about the given txId and parses it from the wallet's perspective\r\n     * @param txId\r\n     */\r\n    async getHistoryTx(txId: string): Promise<HistoryItemType> {\r\n        let addrs = await this.getAllAddressesX();\r\n        let addrC = this.getAddressC();\r\n\r\n        let rawData = await getTx(txId);\r\n        return await getTransactionSummary(rawData, addrs, addrC);\r\n    }\r\n\r\n    /**\r\n     * Fetches information about the given txId and parses it from the wallet's perspective\r\n     * @param txHash\r\n     */\r\n    async getHistoryTxEvm(txHash: string): Promise<HistoryItemType> {\r\n        let addrC = this.getAddressC();\r\n\r\n        let rawData = await getTxEvm(txHash);\r\n        return getTransactionSummaryEVM(rawData, addrC);\r\n    }\r\n\r\n    async parseOrteliusTx(tx: OrteliusAvalancheTx): Promise<HistoryItemType> {\r\n        let addrsX = await this.getAllAddressesX();\r\n        let addrBechC = this.getEvmAddressBech();\r\n        let addrs = [...addrsX, addrBechC];\r\n        let addrC = this.getAddressC();\r\n        return await getTransactionSummary(tx, addrs, addrC);\r\n    }\r\n}\r\n","import * as bip32 from 'bip32';\r\nimport { activeNetwork, avalanche } from '@/Network/network';\r\nimport { KeyPair as AVMKeyPair, KeyChain as AVMKeyChain } from '@c4tplatform/caminojs/dist/apis/avm/keychain';\r\nimport { KeyChain as PlatformKeyChain, KeyPair as PlatformKeyPair } from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { HdChainType } from './types';\r\nimport { Buffer } from '@c4tplatform/caminojs/dist';\r\nimport {\r\n    DERIVATION_SLEEP_INTERVAL,\r\n    HD_SCAN_GAP_SIZE,\r\n    HD_SCAN_LOOK_UP_WINDOW,\r\n    SCAN_RANGE,\r\n    SCAN_SIZE,\r\n} from './constants';\r\nimport { getAddressChains } from '@/Explorer';\r\nimport { NO_NETWORK } from '@/errors';\r\nimport { bintools } from '@/common';\r\nimport { sleep } from '@/utils';\r\n\r\ntype AddressCache = {\r\n    [index: string]: bip32.BIP32Interface;\r\n};\r\n\r\ntype KeyCacheX = {\r\n    [index: string]: AVMKeyPair;\r\n};\r\n\r\ntype KeyCacheP = {\r\n    [index: string]: PlatformKeyPair;\r\n};\r\n\r\n// Each HD wallet has 2 HdScaners, one for internal chain, one for external\r\nexport class HdScanner {\r\n    protected index = 0;\r\n    protected addressCache: AddressCache = {};\r\n    protected keyCacheX: KeyCacheX = {};\r\n    protected keyCacheP: KeyCacheP = {};\r\n    readonly changePath: string;\r\n    private avmAddrFactory: AVMKeyPair;\r\n    readonly accountKey: bip32.BIP32Interface;\r\n\r\n    constructor(accountKey: bip32.BIP32Interface, isInternal = true) {\r\n        this.changePath = isInternal ? '1' : '0';\r\n        this.accountKey = accountKey;\r\n        // We need an instance of an AVM key to generate adddresses from public keys\r\n        let hrp = avalanche().getHRP();\r\n        this.avmAddrFactory = new AVMKeyPair(hrp, 'X');\r\n    }\r\n\r\n    getIndex() {\r\n        return this.index;\r\n    }\r\n\r\n    setIndex(index: number) {\r\n        let round = Math.floor(index);\r\n        if (round < 0) throw new Error('A derivation index can not be less than 0.');\r\n        this.index = round;\r\n    }\r\n\r\n    public increment(): number {\r\n        return this.index++;\r\n    }\r\n\r\n    public getAddressX() {\r\n        return this.getAddressForIndex(this.index, 'X');\r\n    }\r\n\r\n    public getAddressP() {\r\n        return this.getAddressForIndex(this.index, 'P');\r\n    }\r\n\r\n    /**\r\n     * Returns every address up to and including the current index.\r\n     * @param chainId Either X or P\r\n     */\r\n    public async getAllAddresses(chainId: HdChainType = 'X'): Promise<string[]> {\r\n        let upTo = this.index;\r\n        return await this.getAddressesInRange(0, upTo + 1, chainId);\r\n    }\r\n\r\n    /**\r\n     * Returns every address up to and including the current index synchronously.\r\n     * @param chainId Either X or P\r\n     */\r\n    public getAllAddressesSync(chainId: HdChainType = 'X'): string[] {\r\n        let upTo = this.index;\r\n        return this.getAddressesInRangeSync(0, upTo + 1, chainId);\r\n    }\r\n\r\n    /**\r\n     * Returns addresses in the given range\r\n     * @param start Start index\r\n     * @param end End index, exclusive\r\n     * @param chainId  `X` or `P` optional, returns X by default\r\n     */\r\n    public async getAddressesInRange(start: number, end: number, chainId: HdChainType = 'X'): Promise<string[]> {\r\n        let res = [];\r\n        for (let i = start; i < end; i++) {\r\n            res.push(this.getAddressForIndex(i, chainId));\r\n\r\n            // Sleep every Nth address to open up the thread\r\n            if ((i - start) % DERIVATION_SLEEP_INTERVAL === 0) {\r\n                await sleep(0);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Returns addresses in the given range\r\n     * @param start Start index\r\n     * @param end End index, exclusive\r\n     * @param chainId  `X` or `P` optional, returns X by default\r\n     */\r\n    public getAddressesInRangeSync(start: number, end: number, chainId: HdChainType = 'X'): string[] {\r\n        let res = [];\r\n        for (let i = start; i < end; i++) {\r\n            res.push(this.getAddressForIndex(i, chainId));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    getKeyChainX(): AVMKeyChain {\r\n        let keychain = avalanche().XChain().newKeyChain();\r\n        for (let i = 0; i <= this.index; i++) {\r\n            let key = this.getKeyForIndexX(i);\r\n            keychain.addKey(key);\r\n        }\r\n        return keychain;\r\n    }\r\n\r\n    getKeyChainP(): PlatformKeyChain {\r\n        let keychain = avalanche().PChain().newKeyChain();\r\n        for (let i = 0; i <= this.index; i++) {\r\n            let key = this.getKeyForIndexP(i);\r\n            keychain.addKey(key);\r\n        }\r\n        return keychain;\r\n    }\r\n\r\n    getKeyForIndexX(index: number): AVMKeyPair {\r\n        let cache = this.keyCacheX[index];\r\n        if (cache) return cache;\r\n\r\n        let hdKey = this.getHdKeyForIndex(index);\r\n        let pkHex = hdKey.privateKey!.toString('hex');\r\n\r\n        let pkBuf: Buffer = new Buffer(pkHex, 'hex');\r\n\r\n        let keychain = avalanche().XChain().newKeyChain();\r\n        let keypair = keychain.importKey(pkBuf);\r\n\r\n        this.keyCacheX[index] = keypair;\r\n        return keypair;\r\n    }\r\n\r\n    getKeyForIndexP(index: number): PlatformKeyPair {\r\n        let cache = this.keyCacheP[index];\r\n        if (cache) return cache;\r\n\r\n        let hdKey = this.getHdKeyForIndex(index);\r\n        let pkHex = hdKey.privateKey!.toString('hex');\r\n\r\n        let pkBuf: Buffer = new Buffer(pkHex, 'hex');\r\n\r\n        let keychain = avalanche().PChain().newKeyChain();\r\n        let keypair = keychain.importKey(pkBuf);\r\n\r\n        this.keyCacheP[index] = keypair;\r\n\r\n        return keypair;\r\n    }\r\n\r\n    private getHdKeyForIndex(index: number): bip32.BIP32Interface {\r\n        let key: bip32.BIP32Interface;\r\n        if (this.addressCache[index]) {\r\n            key = this.addressCache[index];\r\n        } else {\r\n            key = this.accountKey.derivePath(`${this.changePath}/${index}`);\r\n            this.addressCache[index] = key;\r\n        }\r\n        return key;\r\n    }\r\n\r\n    public getAddressForIndex(index: number, chainId: HdChainType = 'X'): string {\r\n        let key = this.getHdKeyForIndex(index);\r\n\r\n        let publicKey = key.publicKey.toString('hex');\r\n        let publicKeyBuff = Buffer.from(publicKey, 'hex');\r\n\r\n        let hrp = avalanche().getHRP();\r\n\r\n        let addrBuf = AVMKeyPair.addressFromPublicKey(publicKeyBuff);\r\n        let addr = bintools.addressToString(hrp, chainId, addrBuf);\r\n\r\n        return addr;\r\n    }\r\n\r\n    // Uses the explorer to scan used addresses and find its starting index\r\n    public async resetIndex(startIndex = 0): Promise<number> {\r\n        if (!activeNetwork) throw NO_NETWORK;\r\n\r\n        let index;\r\n        if (activeNetwork.explorerURL) {\r\n            index = await this.findAvailableIndexExplorer(startIndex);\r\n        } else {\r\n            index = await this.findAvailableIndexNode(startIndex);\r\n        }\r\n        this.index = index;\r\n        return index;\r\n    }\r\n\r\n    // Scans the address space of this hd path and finds the last used index using the\r\n    // explorer API.\r\n    private async findAvailableIndexExplorer(startIndex = 0): Promise<number> {\r\n        let addrs = await this.getAddressesInRange(startIndex, startIndex + HD_SCAN_LOOK_UP_WINDOW);\r\n        let addrChains = await getAddressChains(addrs);\r\n\r\n        for (let i = 0; i < addrs.length - HD_SCAN_GAP_SIZE; i++) {\r\n            let gapSize: number = 0;\r\n\r\n            for (let n = 0; n < HD_SCAN_GAP_SIZE; n++) {\r\n                let scanIndex = i + n;\r\n                let scanAddr = addrs[scanIndex];\r\n\r\n                let rawAddr = scanAddr.split('-')[1];\r\n                let chains: string[] = addrChains[rawAddr];\r\n\r\n                if (!chains) {\r\n                    // If doesnt exist on any chain\r\n                    gapSize++;\r\n                } else {\r\n                    i = i + n;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // If the gap is reached return the index\r\n            if (gapSize === HD_SCAN_GAP_SIZE) {\r\n                return startIndex + i;\r\n            }\r\n        }\r\n\r\n        return await this.findAvailableIndexExplorer(startIndex + (HD_SCAN_LOOK_UP_WINDOW - HD_SCAN_GAP_SIZE));\r\n    }\r\n\r\n    // Uses the node to find last used HD index\r\n    // Only used when there is no explorer API available\r\n    private async findAvailableIndexNode(start = 0): Promise<number> {\r\n        let addrsX: string[] = [];\r\n        let addrsP: string[] = [];\r\n\r\n        // Get keys for indexes start to start+scan_size\r\n        for (let i: number = start; i < start + SCAN_SIZE; i++) {\r\n            let addressX = this.getAddressForIndex(i, 'X');\r\n            let addressP = this.getAddressForIndex(i, 'P');\r\n            addrsX.push(addressX);\r\n            addrsP.push(addressP);\r\n        }\r\n\r\n        let utxoSetX = (await avalanche().XChain().getUTXOs(addrsX)).utxos;\r\n        let utxoSetP = (await avalanche().PChain().getUTXOs(addrsP)).utxos;\r\n\r\n        // Scan UTXOs of these indexes and try to find a gap of HD_SCAN_GAP_SIZE\r\n        for (let i: number = 0; i < addrsX.length - HD_SCAN_GAP_SIZE; i++) {\r\n            let gapSize: number = 0;\r\n            for (let n: number = 0; n < HD_SCAN_GAP_SIZE; n++) {\r\n                let scanIndex: number = i + n;\r\n                let addr: string = addrsX[scanIndex];\r\n                let addrBuf = bintools.parseAddress(addr, 'X');\r\n                let addrUTXOsX: string[] = utxoSetX.getUTXOIDs([addrBuf]);\r\n                let addrUTXOsP: string[] = utxoSetP.getUTXOIDs([addrBuf]);\r\n                if (addrUTXOsX.length === 0 && addrUTXOsP.length === 0) {\r\n                    gapSize++;\r\n                } else {\r\n                    // Potential improvement\r\n                    i = i + n;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // If we found a gap of 20, we can return the last fullIndex+1\r\n            if (gapSize === HD_SCAN_GAP_SIZE) {\r\n                let targetIndex = start + i;\r\n                return targetIndex;\r\n            }\r\n        }\r\n        return await this.findAvailableIndexNode(start + SCAN_RANGE);\r\n    }\r\n}\r\n","import { WalletProvider } from '@/Wallet/Wallet';\r\nimport { HdScanner } from '@/Wallet/HdScanner';\r\nimport { UTXOSet as AVMUTXOSet } from '@c4tplatform/caminojs/dist/apis/avm/utxos';\r\nimport { avalanche } from '@/Network/network';\r\nimport { UTXOSet as PlatformUTXOSet } from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { iHDWalletIndex } from '@/Wallet/types';\r\nimport { bintools } from '@/common';\r\nimport * as bip32 from 'bip32';\r\nimport { NetworkConfig } from '@/Network';\r\n\r\nexport abstract class HDWalletAbstract extends WalletProvider {\r\n    protected internalScan: HdScanner;\r\n    protected externalScan: HdScanner;\r\n    protected accountKey: bip32.BIP32Interface;\r\n    public isHdReady = false;\r\n\r\n    /**\r\n     *\r\n     * @param accountKey The bip32 HD node for path `m/44'/9000'/n'` where n is the desired account index.\r\n     * @protected\r\n     */\r\n    protected constructor(accountKey: bip32.BIP32Interface) {\r\n        super();\r\n\r\n        this.internalScan = new HdScanner(accountKey, true);\r\n        this.externalScan = new HdScanner(accountKey, false);\r\n        this.accountKey = accountKey;\r\n    }\r\n\r\n    protected onNetworkChange(config: NetworkConfig) {\r\n        super.onNetworkChange(config);\r\n\r\n        this.isHdReady = false;\r\n    }\r\n\r\n    /**\r\n     * Returns current index used for external address derivation.\r\n     */\r\n    public getExternalIndex(): number {\r\n        return this.externalScan.getIndex();\r\n    }\r\n\r\n    /**\r\n     * Returns current index used for internal address derivation.\r\n     */\r\n    public getInternalIndex(): number {\r\n        return this.internalScan.getIndex();\r\n    }\r\n\r\n    /**\r\n     * Gets the active external address on the X chain\r\n     * - The X address will change after every deposit.\r\n     */\r\n    public getAddressX(): string {\r\n        return this.externalScan.getAddressX();\r\n    }\r\n\r\n    /**\r\n     * Gets the active change address on the X chain\r\n     * - The change address will change after every transaction on the X chain.\r\n     */\r\n    public getChangeAddressX() {\r\n        return this.internalScan.getAddressX();\r\n    }\r\n\r\n    /**\r\n     * Gets the active address on the P chain\r\n     */\r\n    public getAddressP(): string {\r\n        return this.externalScan.getAddressP();\r\n    }\r\n\r\n    /**\r\n     * Returns every external X chain address used by the wallet up to now.\r\n     */\r\n    public async getExternalAddressesX(): Promise<string[]> {\r\n        return await this.externalScan.getAllAddresses('X');\r\n    }\r\n\r\n    /**\r\n     * Returns every external X chain address used by the wallet up to now.\r\n     */\r\n    public getExternalAddressesXSync(): string[] {\r\n        return this.externalScan.getAllAddressesSync('X');\r\n    }\r\n\r\n    /**\r\n     * Returns every internal X chain address used by the wallet up to now.\r\n     */\r\n    public async getInternalAddressesX(): Promise<string[]> {\r\n        return await this.internalScan.getAllAddresses('X');\r\n    }\r\n\r\n    /**\r\n     * Returns every internal X chain address used by the wallet up to now.\r\n     */\r\n    public getInternalAddressesXSync(): string[] {\r\n        return this.internalScan.getAllAddressesSync('X');\r\n    }\r\n\r\n    /**\r\n     * Returns every X chain address used by the wallet up to now (internal + external).\r\n     */\r\n    public async getAllAddressesX(): Promise<string[]> {\r\n        return [...(await this.getExternalAddressesX()), ...(await this.getInternalAddressesX())];\r\n    }\r\n\r\n    /**\r\n     * Returns every X chain address used by the wallet up to now (internal + external).\r\n     */\r\n    public getAllAddressesXSync(): string[] {\r\n        return [...this.getExternalAddressesXSync(), ...this.getInternalAddressesXSync()];\r\n    }\r\n\r\n    public async getExternalAddressesP(): Promise<string[]> {\r\n        return this.externalScan.getAllAddresses('P');\r\n    }\r\n\r\n    public getExternalAddressesPSync(): string[] {\r\n        return this.externalScan.getAllAddressesSync('P');\r\n    }\r\n\r\n    /**\r\n     * Returns every P chain address used by the wallet up to now.\r\n     */\r\n    public getAllAddressesP(): Promise<string[]> {\r\n        return this.getExternalAddressesP();\r\n    }\r\n\r\n    /**\r\n     * Returns every P chain address used by the wallet up to now.\r\n     */\r\n    public getAllAddressesPSync(): string[] {\r\n        return this.getExternalAddressesPSync();\r\n    }\r\n\r\n    /**\r\n     * Scans the network and initializes internal and external addresses on P and X chains.\r\n     * - Heavy operation\r\n     * - MUST use the explorer api to find the last used address\r\n     * - If explorer is not available it will use the connected node. This may result in invalid balances.\r\n     */\r\n    public async resetHdIndices(externalStart = 0, internalStart = 0): Promise<iHDWalletIndex> {\r\n        let promiseExt = this.externalScan.resetIndex(externalStart);\r\n        let promiseInt = this.internalScan.resetIndex(internalStart);\r\n\r\n        const [indexExt, indexInt] = await Promise.all([promiseExt, promiseInt]);\r\n\r\n        this.emitAddressChange();\r\n        this.isHdReady = true;\r\n        this.emitHdReady();\r\n\r\n        return {\r\n            internal: indexInt,\r\n            external: indexExt,\r\n        };\r\n    }\r\n\r\n    public setHdIndices(external: number, internal: number) {\r\n        this.externalScan.setIndex(external);\r\n        this.internalScan.setIndex(internal);\r\n\r\n        this.emitAddressChange();\r\n        this.isHdReady = true;\r\n        this.emitHdReady();\r\n    }\r\n\r\n    /**\r\n     * Emits an event to indicate the wallet has finishing calculating its last use address\r\n     * @protected\r\n     */\r\n    protected emitHdReady(): void {\r\n        this.emit('hd_ready', {\r\n            external: this.getExternalIndex(),\r\n            internal: this.getInternalIndex(),\r\n        });\r\n    }\r\n\r\n    public async updateUtxosX(): Promise<AVMUTXOSet> {\r\n        let utxosX = await super.updateUtxosX();\r\n\r\n        // If the current internal or external X address is in the utxo set, increment hd index\r\n        let utxoAddrs = utxosX.getAddresses();\r\n        let utxoAddrsStr = utxoAddrs.map((addr) => {\r\n            return bintools.addressToString(avalanche().getHRP(), 'X', addr);\r\n        });\r\n\r\n        let addrExternalX = this.getAddressX();\r\n        let addrInternalX = this.getChangeAddressX();\r\n\r\n        let isAddrChange = false;\r\n        // Increment external index if the current address is in the utxo set\r\n        if (utxoAddrsStr.includes(addrExternalX)) {\r\n            this.incrementExternal();\r\n            isAddrChange = true;\r\n        }\r\n\r\n        // Increment internal index if the current address is in the utxo set\r\n        if (utxoAddrsStr.includes(addrInternalX)) {\r\n            this.incrementInternal();\r\n            isAddrChange = true;\r\n        }\r\n\r\n        if (isAddrChange) this.emitAddressChange();\r\n\r\n        return utxosX;\r\n    }\r\n\r\n    private incrementExternal() {\r\n        this.externalScan.increment();\r\n    }\r\n\r\n    private incrementInternal() {\r\n        this.internalScan.increment();\r\n    }\r\n\r\n    public async updateUtxosP(): Promise<PlatformUTXOSet> {\r\n        let utxosP = await super.updateUtxosP();\r\n\r\n        // If the current P address is in the utxo set, increment hd index\r\n        let utxoAddrs = utxosP.getAddresses();\r\n        let utxoAddrsStr = utxoAddrs.map((addr) => {\r\n            return bintools.addressToString(avalanche().getHRP(), 'P', addr);\r\n        });\r\n\r\n        let addrExternalP = this.getAddressP();\r\n\r\n        // Increment external index if the current address is in the utxo set\r\n        if (utxoAddrsStr.includes(addrExternalP)) {\r\n            this.incrementExternal();\r\n            this.emitAddressChange();\r\n        }\r\n\r\n        return utxosP;\r\n    }\r\n\r\n    public getAddressAtIndexExternalX(index: number): string {\r\n        if (index < 0) throw new Error('Index must be >= 0');\r\n        return this.externalScan.getKeyForIndexX(index).getAddressString();\r\n    }\r\n\r\n    public getAddressAtIndexInternalX(index: number): string {\r\n        if (index < 0) throw new Error('Index must be >= 0');\r\n        return this.internalScan.getKeyForIndexX(index).getAddressString();\r\n    }\r\n\r\n    public getAddressAtIndexExternalP(index: number): string {\r\n        if (index < 0) throw new Error('Index must be >= 0');\r\n        return this.externalScan.getKeyForIndexP(index).getAddressString();\r\n    }\r\n}\r\n","import { BN, Buffer as BufferAvalanche } from '@c4tplatform/caminojs/dist';\r\nimport { avalanche, web3 } from '@/Network/network';\r\nimport { ethers } from 'ethers';\r\nimport { KeyPair as EVMKeyPair } from '@c4tplatform/caminojs/dist/apis/evm/keychain';\r\nimport { bintools } from '@/common';\r\nimport { computePublicKey, computeAddress } from 'ethers/lib/utils';\r\nimport { payments, ECPair, networks } from 'bitcoinjs-lib';\r\nimport { BTCNetworkType } from '@/Wallet';\r\nimport { buildEvmTransferErc721Tx, estimateErc721TransferGas } from '@/helpers/tx_helper';\r\n\r\nexport class EvmWalletReadonly {\r\n    balance = new BN(0);\r\n    address: string;\r\n    publicKey: string;\r\n    publicKeyBuff: Buffer;\r\n\r\n    /**\r\n     *\r\n     * @param publicKey 64 byte uncompressed public key. Starts with `0x`.\r\n     */\r\n    constructor(publicKey: string) {\r\n        this.publicKey = publicKey;\r\n        this.publicKeyBuff = Buffer.from(publicKey.substr(2), 'hex');\r\n        this.address = computeAddress(publicKey);\r\n    }\r\n\r\n    getBalance(): BN {\r\n        return this.balance;\r\n    }\r\n\r\n    getAddress(): string {\r\n        return ethers.utils.getAddress(this.address);\r\n    }\r\n\r\n    getCompressedPublicKey() {\r\n        return computePublicKey(this.publicKey, true);\r\n    }\r\n\r\n    getAddressBech32(): string {\r\n        const compressedKey = this.getCompressedPublicKey();\r\n        let addr = EVMKeyPair.addressFromPublicKey(BufferAvalanche.from(compressedKey.substring(2), 'hex'));\r\n        return bintools.addressToString(avalanche().getHRP(), 'C', addr);\r\n    }\r\n\r\n    /**\r\n     * Returns a native P2WPKH address with the prefix `bc1q`. This bitcoin address is\r\n     * derived from the same public key of the C chain address.\r\n     */\r\n    getAddressBTC(networkType: BTCNetworkType = 'bitcoin'): string {\r\n        let network;\r\n        if (networkType === 'bitcoin') {\r\n            network = networks.bitcoin;\r\n        } else if (networkType === 'testnet') {\r\n            network = networks.testnet;\r\n        } else {\r\n            network = networks.regtest;\r\n        }\r\n\r\n        const compressedBuff = Buffer.from(this.getCompressedPublicKey().substring(2), 'hex');\r\n        let ecPair = ECPair.fromPublicKey(compressedBuff);\r\n        let { address } = payments.p2wpkh({ pubkey: ecPair.publicKey, network });\r\n        if (!address) throw new Error('Unable to get BTC address.');\r\n        return address;\r\n    }\r\n\r\n    async updateBalance() {\r\n        let bal = await web3.eth.getBalance(this.address);\r\n        this.balance = new BN(bal);\r\n        return this.balance;\r\n    }\r\n\r\n    /**\r\n     * Builds an unsigned ERC721 transfer transaction from this wallet.\r\n     * @param contract The ERC721 Contract address\r\n     * @param tokenID Token ID\r\n     * @param to Recipient hex address.\r\n     * @param gasPrice Gas price in `BN`\r\n     * @param gasLimit Gas limit\r\n     */\r\n    buildErc721TransferTx(contract: string, tokenID: number, to: string, gasPrice: BN, gasLimit: number) {\r\n        return buildEvmTransferErc721Tx(this.getAddress(), to, gasPrice, gasLimit, contract, tokenID);\r\n    }\r\n\r\n    async estimateErc721TransferGasLimit(contract: string, to: string, tokenID: number) {\r\n        return estimateErc721TransferGas(contract, this.getAddress(), to, tokenID);\r\n    }\r\n}\r\n","import { HDWalletAbstract } from '@/Wallet/HDWalletAbstract';\r\nimport { UnsignedTx as EVMUnsignedTx, Tx as EVMTx } from '@c4tplatform/caminojs/dist/apis/evm';\r\nimport { UnsignedTx as PlatformUnsignedTx, Tx as PlatformTx } from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { UnsignedTx as AVMUnsignedTx, Tx as AVMTx } from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport { Transaction } from '@ethereumjs/tx';\r\nimport { WalletNameType } from '@/Wallet/types';\r\nimport { EvmWallet } from '@/Wallet/EVM/EvmWallet';\r\nimport { EvmWalletReadonly } from '@/Wallet/EVM/EvmWalletReadonly';\r\nimport * as bip32 from 'bip32';\r\nimport { importPublic } from 'ethereumjs-util';\r\nimport { computePublicKey } from 'ethers/lib/utils';\r\nimport { TypedDataV1, TypedMessage } from '@metamask/eth-sig-util';\r\n\r\nexport class PublicMnemonicWallet extends HDWalletAbstract {\r\n    /**\r\n     *\r\n     * @param xpubAVM of derivation path m/44'/9000'/n' where `n` is the account index\r\n     * @param xpubEVM of derivation path m/44'/60'/0'/0/n where `n` is the account index\r\n     */\r\n    constructor(xpubAVM: string, xpubEVM: string) {\r\n        let avmAcct = bip32.fromBase58(xpubAVM);\r\n        let evmAcct = bip32.fromBase58(xpubEVM);\r\n        super(avmAcct);\r\n        this.type = 'xpub';\r\n        const uncompressedKey = computePublicKey(evmAcct.publicKey);\r\n        this.evmWallet = new EvmWalletReadonly(uncompressedKey);\r\n    }\r\n\r\n    evmWallet: EvmWallet | EvmWalletReadonly;\r\n    type: WalletNameType;\r\n\r\n    //@ts-ignore\r\n    signC(tx: EVMUnsignedTx): Promise<EVMTx> {\r\n        throw new Error('Not supported.');\r\n    }\r\n\r\n    //@ts-ignore\r\n    signEvm(tx: Transaction): Promise<Transaction> {\r\n        throw new Error('Not supported.');\r\n    }\r\n    //@ts-ignore\r\n    signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\r\n        throw new Error('Not supported.');\r\n    }\r\n\r\n    //@ts-ignore\r\n    signX(tx: AVMUnsignedTx): Promise<AVMTx> {\r\n        throw new Error('Not supported.');\r\n    }\r\n\r\n    //@ts-ignore\r\n    async personalSign(data: string): Promise<string> {\r\n        throw new Error('Not supported.');\r\n    }\r\n\r\n    /**\r\n     * V1 is based upon an early version of EIP-712 that lacked some later security improvements, and should generally be neglected in favor of later versions.\r\n     * @param data The typed data to sign.\r\n     * */\r\n    //@ts-ignore\r\n    signTypedData_V1(data: TypedDataV1): Promise<string> {\r\n        throw new Error('Not supported.');\r\n    }\r\n\r\n    /**\r\n     * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\r\n     * @param data The typed data to sign.\r\n     */\r\n    //@ts-ignore\r\n    signTypedData_V3(data: TypedMessage<any>): Promise<string> {\r\n        throw new Error('Not supported.');\r\n    }\r\n\r\n    /**\r\n     * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\r\n     * @param data The typed data to sign.\r\n     */\r\n    //@ts-ignore\r\n    signTypedData_V4(data: TypedMessage<any>): Promise<string> {\r\n        throw new Error('Not supported.');\r\n    }\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _bip32Path = require(\"bip32-path\");\n\nvar _bip32Path2 = _interopRequireDefault(_bip32Path);\n\nvar _createHash = require(\"create-hash\");\n\nvar _createHash2 = _interopRequireDefault(_createHash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\n/**\n * Avalanche API\n *\n * @example\n * import Avalanche from \"@obsidiansystems/hw-app-avalanche\";\n * const avalanche = new Avalanche(transport);\n */\nclass Avalanche {\n\n  constructor(transport, scrambleKey = \"Avalanche\", logger = console.error) {\n    this.CLA = 0x80;\n    this.MAX_APDU_SIZE = 230;\n    this.MAX_HRP_LENGTH = 24;\n    this.INS_VERSION = 0x00;\n    this.INS_GET_WALLET_ID = 0x01;\n    this.INS_PROMPT_PUBLIC_KEY = 0x02;\n    this.INS_PROMPT_EXT_PUBLIC_KEY = 0x03;\n    this.INS_SIGN_HASH = 0x04;\n    this.INS_SIGN_TRANSACTION = 0x05;\n\n    this.transport = transport;\n    this.logger = logger;\n    if (scrambleKey) {\n      transport.decorateAppAPIMethods(this, [\"getAppConfiguration\", \"getWalletAddress\", \"getWalletExtendedPublicKey\", \"getWalletId\", \"signHash\", \"signTransaction\"], scrambleKey);\n    }\n  }\n\n  /**\n   * get Avalanche address for a given BIP-32 path.\n   *\n   * @param derivation_path a path in BIP 32 format\n   * @return a buffer with a public key, and TODO: should be address, not public key\n   * @example\n   * await avalanche.getWalletPublicKey(\"44'/9000'/0'/0/0\");\n   */\n  getWalletAddress(derivation_path, hrp = \"\") {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (hrp.length > _this.MAX_HRP_LENGTH) {\n        throw \"Maximum Bech32 'human readable part' length exceeded\";\n      }\n\n      const cla = _this.CLA;\n      const ins = _this.INS_PROMPT_PUBLIC_KEY;\n      const p1 = hrp.length;\n      const p2 = 0x00;\n      const data = Buffer.concat([Buffer.from(hrp, \"latin1\"), _this.encodeBip32Path(_bip32Path2.default.fromString(derivation_path))]);\n\n      const response = yield _this.transport.send(cla, ins, p1, p2, data);\n      return response.slice(0, -2);\n    })();\n  }\n\n  /**\n   * get extended public key for a given BIP-32 path.\n   *\n   * @param derivation_path a path in BIP-32 format\n   * @return an object with a buffer for the public key data and a buffer for the chain code\n   * @example\n   * await avalanche.getWalletExtendedPublicKey(\"44'/9000'/0'/0/0\");\n   */\n  getWalletExtendedPublicKey(derivation_path) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const cla = _this2.CLA;\n      const ins = _this2.INS_PROMPT_EXT_PUBLIC_KEY;\n      const p1 = 0x00;\n      const p2 = 0x00;\n      const data = _this2.encodeBip32Path(_bip32Path2.default.fromString(derivation_path));\n\n      const response = yield _this2.transport.send(cla, ins, p1, p2, data);\n      const publicKeyLength = response[0];\n      const chainCodeOffset = 2 + publicKeyLength;\n      const chainCodeLength = response[1 + publicKeyLength];\n      return {\n        public_key: response.slice(1, 1 + publicKeyLength),\n        chain_code: response.slice(chainCodeOffset, chainCodeOffset + chainCodeLength)\n      };\n    })();\n  }\n\n  /**\n   * Sign a hash with a given set of BIP-32 paths.\n   *\n   * @param derivationPathPrefix a BIP-32 path that will act as the prefix to all other signing paths.\n   * @param derivationPathSuffixes an array of BIP-32 path suffixes that will be\n   *                               appended to the prefix to form the final path for signing.\n   * @param hash 32-byte buffer containing the hash to sign\n   * @return a map of path suffixes (as strings) to signature buffers\n   * @example\n   * const signatures = await avalanche.signHash(\n   *   BIPPath.fromString(\"44'/9000'/0'\"),\n   *   [BIPPath.fromString(\"0/0\")],\n   *   Buffer.from(\"0000000000000000000000000000000000000000000000000000000000000000\", \"hex\"));\n   */\n  signHash(derivationPathPrefix, derivationPathSuffixes, hash) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (hash.length != 32) {\n        throw \"Hash buffer must be 32 bytes\";\n      }\n\n      const firstMessage = Buffer.concat([_this3.uInt8Buffer(derivationPathSuffixes.length), hash, _this3.encodeBip32Path(derivationPathPrefix)]);\n      const responseHash = yield _this3.transport.send(_this3.CLA, _this3.INS_SIGN_HASH, 0x00, 0x00, firstMessage);\n      if (!responseHash.slice(0, 32).equals(hash)) {\n        throw \"Ledger reported a hash that does not match the input hash!\";\n      }\n\n      return _this3._collectSignaturesFromSuffixes(derivationPathSuffixes, _this3.INS_SIGN_HASH, 0x01, 0x81);\n    })();\n  }\n\n  /**\n   * Sign a transaction with a given set of BIP-32 paths.\n   *\n   * @param derivationPathPrefix a BIP-32 path that will act as the prefix to all other signing paths.\n   * @param derivationPathSuffixes an array of BIP-32 path suffixes that will be\n   *                               appended to the prefix to form the final path for signing.\n   * @param txn binary of the transaction\n   * @return an object with a hash of the transaction and a map of path suffixes (as strings) to signature buffers\n   * @example\n   * const signatures = await avalanche.signTransaction(\n   *   BIPPath.fromString(\"44'/9000'/0'\"),\n   *   [BIPPath.fromString(\"0/0\")],\n   *   Buffer.from(\"...\", \"hex\"),\n   *   BIPPath.fromString(\"44'/9000'/0'/0'/0'\"));\n   * );\n   */\n  signTransaction(derivationPathPrefix, derivationPathSuffixes, txn, changePath) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n\n      const SIGN_TRANSACTION_SECTION_PREAMBLE = 0x00;\n      const SIGN_TRANSACTION_SECTION_PAYLOAD_CHUNK = 0x01;\n      const SIGN_TRANSACTION_SECTION_PAYLOAD_CHUNK_LAST = 0x81;\n      const SIGN_TRANSACTION_SECTION_SIGN_WITH_PATH = 0x02;\n      const SIGN_TRANSACTION_SECTION_SIGN_WITH_PATH_LAST = 0x82;\n\n      const preamble = Buffer.concat([_this4.uInt8Buffer(derivationPathSuffixes.length), _this4.encodeBip32Path(derivationPathPrefix)]);\n      if (changePath != null) {\n        const preamble_ = Buffer.concat([preamble, _this4.encodeBip32Path(changePath)]);\n        yield _this4.transport.send(_this4.CLA, _this4.INS_SIGN_TRANSACTION, SIGN_TRANSACTION_SECTION_PREAMBLE, 0x01, preamble_);\n      } else {\n        yield _this4.transport.send(_this4.CLA, _this4.INS_SIGN_TRANSACTION, SIGN_TRANSACTION_SECTION_PREAMBLE, 0x00, preamble);\n      }\n\n      let remainingData = txn.slice(0); // copy\n      let response;\n      while (remainingData.length > 0) {\n        const thisChunk = remainingData.slice(0, _this4.MAX_APDU_SIZE);\n        remainingData = remainingData.slice(_this4.MAX_APDU_SIZE);\n        response = yield _this4.transport.send(_this4.CLA, _this4.INS_SIGN_TRANSACTION, remainingData.length > 0 ? SIGN_TRANSACTION_SECTION_PAYLOAD_CHUNK : SIGN_TRANSACTION_SECTION_PAYLOAD_CHUNK_LAST, 0x00, thisChunk);\n      }\n\n      const responseHash = response.slice(0, 32);\n      const expectedHash = Buffer.from((0, _createHash2.default)('sha256').update(txn).digest());\n      if (!responseHash.equals(expectedHash)) {\n        throw \"Ledger reported a hash that does not match the expected transaction hash!\";\n      }\n\n      return {\n        hash: responseHash,\n        signatures: yield _this4._collectSignaturesFromSuffixes(derivationPathSuffixes, _this4.INS_SIGN_TRANSACTION, SIGN_TRANSACTION_SECTION_SIGN_WITH_PATH, SIGN_TRANSACTION_SECTION_SIGN_WITH_PATH_LAST)\n      };\n    })();\n  }\n\n  /**\n   * Get the version of the Avalanche app installed on the hardware device\n   *\n   * @return an object with a version\n   * @example\n   * console.log(await avalanche.getAppConfiguration());\n   *\n   * {\n   *   \"version\": \"1.0.3\",\n   *   \"commit\": \"abcdcefg\"\n   *   \"name\": \"Avalanche\"\n   * }\n   */\n  getAppConfiguration() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const data = yield _this5.transport.send(_this5.CLA, _this5.INS_VERSION, 0x00, 0x00);\n\n      const eatNBytes = function (input, n) {\n        const out = input.slice(0, n);\n        return [out, input.slice(n)];\n      };\n\n      const eatWhile = function (input, f) {\n        for (var i = 0; i < input.length; i++) {\n          if (!f(input[i])) {\n            return [input.slice(0, i), input.slice(i)];\n          }\n        }\n        return [input, \"\"];\n      };\n\n      const [versionData, rest1] = eatNBytes(data, 3);\n      const [commitData, rest2] = eatWhile(rest1, function (c) {\n        return c != 0;\n      });\n      const [nameData, rest3] = eatWhile(rest2.slice(1), function (c) {\n        return c != 0;\n      });\n      if (rest3.toString(\"hex\") != \"009000\") {\n        _this5.logger(\"WARNING: Response data does not exactly match expected format for VERSION instruction\");\n      }\n\n      return {\n        version: \"\" + versionData[0] + \".\" + versionData[1] + \".\" + versionData[2],\n        commit: commitData.toString(\"latin1\"),\n        name: nameData.toString(\"latin1\")\n      };\n    })();\n  }\n\n  /**\n   * Get the wallet identifier for the Ledger wallet\n   *\n   * @return a byte string\n   * @example\n   * console.log((await avalanche.getWalletId()).toString(\"hex\"));\n   *\n   * 79c46bc3\n   */\n  getWalletId() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this6.transport.send(_this6.CLA, _this6.INS_GET_WALLET_ID, 0x00, 0x00);\n      return result.slice(0, -2);\n    })();\n  }\n\n  _collectSignaturesFromSuffixes(suffixes, ins, p1NotDone, p1Done) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      let resultMap = new Map();\n      for (let ix = 0; ix < suffixes.length; ix++) {\n        const suffix = suffixes[ix];\n        _this7.logger(\"Signing with \" + suffix.toString(true));\n        const message = _this7.encodeBip32Path(suffix);\n        const isLastMessage = ix >= suffixes.length - 1;\n        const signatureData = yield _this7.transport.send(_this7.CLA, ins, isLastMessage ? p1Done : p1NotDone, 0x00, message);\n        resultMap.set(suffix.toString(true), signatureData.slice(0, -2));\n      };\n      return resultMap;\n    })();\n  }\n\n  uInt8Buffer(uint8) {\n    let buff = Buffer.alloc(1);\n    buff.writeUInt8(uint8);\n    return buff;\n  }\n\n  uInt32BEBuffer(uint32) {\n    let buff = Buffer.alloc(4);\n    buff.writeUInt32BE(uint32);\n    return buff;\n  }\n\n  encodeBip32Path(path) {\n    const pathArr = path.toPathArray();\n    return Buffer.concat([this.uInt8Buffer(pathArr.length)].concat(pathArr.map(this.uInt32BEBuffer)));\n  }\n}\nexports.default = Avalanche;\n//# sourceMappingURL=Avalanche.js.map","import * as bip32 from 'bip32';\r\nimport Eth from '@ledgerhq/hw-app-eth';\r\n// @ts-ignore\r\nimport AppAvax from '@obsidiansystems/hw-app-avalanche';\r\nimport { MIN_EVM_SUPPORT_V } from '@/Wallet/constants';\r\nimport { ILedgerAppConfig } from '@/Wallet/types';\r\n\r\n/**\r\n *\r\n * @param xpub Extended public key for m/44'/60'/0'\r\n * @param index Index of the Eth address\r\n * @returns Extended public key for m/44'/60'/0'/0/n where `n` is the address index\r\n */\r\nexport function getEthAddressKeyFromAccountKey(xpub: string, index: number) {\r\n    const node = bip32.fromBase58(xpub).derivePath(`0/${index}`);\r\n    return node.toBase58();\r\n}\r\n\r\nexport function getAppAvax(transport: any): AppAvax {\r\n    return new AppAvax(transport, 'w0w');\r\n}\r\n\r\nexport function getAppEth(transport: any): Eth {\r\n    return new Eth(transport, 'w0w');\r\n}\r\n\r\nexport async function getLedgerConfigAvax(transport: any): Promise<ILedgerAppConfig> {\r\n    const app = getAppAvax(transport);\r\n    let config = await app.getAppConfiguration();\r\n\r\n    if (!config) {\r\n        throw new Error(`Unable to connect ledger. You must use ledger version ${MIN_EVM_SUPPORT_V} or above.`);\r\n    }\r\n\r\n    return config;\r\n}\r\n","export const ERR_TransportNotSet = new Error('Transport is not set.');\r\nexport const ERR_ConfigNotSet = new Error('Ledger configuration is not set.');\r\n","//@ts-ignore\r\nimport Eth from '@ledgerhq/hw-app-eth';\r\n// @ts-ignore\r\nimport AppAvax from '@obsidiansystems/hw-app-avalanche';\r\nimport EthereumjsCommon from '@ethereumjs/common';\r\nimport { importPublic, bnToRlp, rlp, BN as EthBN } from 'ethereumjs-util';\r\nimport {\r\n    AVAX_ACCOUNT_PATH,\r\n    ETH_ACCOUNT_PATH,\r\n    LEDGER_ETH_ACCOUNT_PATH,\r\n    LEDGER_EXCHANGE_TIMEOUT,\r\n    MIN_EVM_SUPPORT_V,\r\n} from '@/Wallet/constants';\r\nimport HDKey from 'hdkey';\r\nimport { ChainAlias, ILedgerAppConfig, WalletNameType } from '@/Wallet/types';\r\nimport { Transaction, TxOptions } from '@ethereumjs/tx';\r\nimport {\r\n    UnsignedTx as AVMUnsignedTx,\r\n    Tx as AVMTx,\r\n    TransferableOperation,\r\n    OperationTx,\r\n    AVMConstants,\r\n    ImportTx as AVMImportTx,\r\n    SelectCredentialClass as AVMSelectCredentialClass,\r\n} from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport { Credential, SigIdx, Signature } from '@c4tplatform/caminojs/dist/common';\r\nimport {\r\n    UnsignedTx as EVMUnsignedTx,\r\n    Tx as EVMTx,\r\n    ImportTx as EVMImportTx,\r\n    ExportTx as EVMExportTx,\r\n    EVMInput,\r\n    SelectCredentialClass as EVMSelectCredentialClass,\r\n    EVMConstants,\r\n} from '@c4tplatform/caminojs/dist/apis/evm';\r\nimport {\r\n    UnsignedTx as PlatformUnsignedTx,\r\n    Tx as PlatformTx,\r\n    PlatformVMConstants,\r\n    ExportTx as PlatformExportTx,\r\n    ImportTx as PlatformImportTx,\r\n    SelectCredentialClass as PlatformSelectCredentialClass,\r\n} from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { activeNetwork, avalanche, web3 } from '@/Network/network';\r\nimport { Buffer } from '@c4tplatform/caminojs/dist';\r\nimport { ChainIdType } from '@/common';\r\nimport { Buffer as BufferNative } from 'buffer';\r\nimport { ParseableAvmTxEnum, ParseablePlatformEnum, ParseableEvmTxEnum } from '@/helpers/tx_helper';\r\nimport createHash from 'create-hash';\r\n//@ts-ignore\r\nimport bippath from 'bip32-path';\r\nimport { bintools } from '@/common';\r\nimport { idToChainAlias } from '@/Network';\r\nimport { getAccountPathAvalanche, getAccountPathEVM } from '@/Wallet/helpers/derivationHelper';\r\nimport { PublicMnemonicWallet } from '@/Wallet/PublicMnemonicWallet';\r\nimport { getAppAvax, getAppEth, getEthAddressKeyFromAccountKey, getLedgerConfigAvax } from '@/Wallet/Ledger/utils';\r\nimport Transport from '@ledgerhq/hw-transport';\r\nimport { ERR_ConfigNotSet, ERR_TransportNotSet } from '@/Wallet/Ledger/errors';\r\nimport { TypedDataV1, TypedMessage, typedSignatureHash } from '@metamask/eth-sig-util';\r\n\r\nexport class LedgerWallet extends PublicMnemonicWallet {\r\n    type: WalletNameType;\r\n    static transport: Transport | undefined;\r\n    static config: ILedgerAppConfig | undefined;\r\n    accountIndex: number;\r\n\r\n    /**\r\n     *\r\n     * @param xpubAVM of derivation path m/44'/9000'/n' where `n` is the account index\r\n     * @param xpubEVM of derivation path m/44'/60'/0'/0/n where `n` is the account index\r\n     * @param accountIndex The given xpubs must match this index\r\n     * @param config\r\n     */\r\n    constructor(xpubAVM: string, xpubEVM: string, accountIndex: number) {\r\n        super(xpubAVM, xpubEVM);\r\n\r\n        this.type = 'ledger';\r\n        this.accountIndex = accountIndex;\r\n    }\r\n\r\n    static async setTransport(transport: Transport) {\r\n        LedgerWallet.transport = transport;\r\n\r\n        transport.on('disconnect', () => {\r\n            console.log('transport disconnect');\r\n            LedgerWallet.transport = undefined;\r\n        });\r\n\r\n        // Update the config\r\n        const config = await getLedgerConfigAvax(transport);\r\n        LedgerWallet.config = config;\r\n    }\r\n    /**\r\n     * Create a new ledger wallet instance from the given transport\r\n     * @param transport\r\n     * @param accountIndex\r\n     */\r\n    static async fromTransport(transport: Transport, accountIndex = 0) {\r\n        transport.setExchangeTimeout(LEDGER_EXCHANGE_TIMEOUT);\r\n\r\n        const pubAvax = await LedgerWallet.getExtendedPublicKeyAvaxAccount(transport, accountIndex);\r\n        const pubEth = await LedgerWallet.getExtendedPublicKeyEthAddress(transport, accountIndex);\r\n\r\n        let config = await getLedgerConfigAvax(transport);\r\n\r\n        if (config.version < MIN_EVM_SUPPORT_V) {\r\n            throw new Error(`Unable to connect ledger. You must use ledger version ${MIN_EVM_SUPPORT_V} or above.`);\r\n        }\r\n        // Use this transport for all ledger instances\r\n        await LedgerWallet.setTransport(transport);\r\n        const wallet = new LedgerWallet(pubAvax, pubEth, accountIndex);\r\n        return wallet;\r\n    }\r\n\r\n    /**\r\n     * Returns the extended public key used by C chain for address derivation.\r\n     * @remarks Returns the extended public key for path `m/44'/60'/0'`. This key can be used to derive C chain addresses.\r\n     * @param transport\r\n     */\r\n    static async getExtendedPublicKeyEthAccount(transport: Transport): Promise<string> {\r\n        const ethApp = getAppEth(transport);\r\n        let ethRes = await ethApp.getAddress(ETH_ACCOUNT_PATH, true, true);\r\n        let hdEth = new HDKey();\r\n\r\n        hdEth.publicKey = BufferNative.from(ethRes.publicKey, 'hex');\r\n        hdEth.chainCode = BufferNative.from(ethRes.chainCode!, 'hex');\r\n        return hdEth.publicExtendedKey;\r\n    }\r\n\r\n    /**\r\n     * Get the extended public key for a specific C chain address.\r\n     * @returns The xpub of HD node m/44'/60'/0'/0/n where `n` is `accountIndex`\r\n     * @param transport\r\n     * @param accountIndex\r\n     */\r\n    static async getExtendedPublicKeyEthAddress(transport: Transport, accountIndex: number): Promise<string> {\r\n        const accountKey = await LedgerWallet.getExtendedPublicKeyEthAccount(transport);\r\n        return getEthAddressKeyFromAccountKey(accountKey, accountIndex);\r\n    }\r\n\r\n    /**\r\n     * Returns the extended public key used by X and P chains for address derivation.\r\n     * @remarks Returns the extended public key for path `m/44'/90000'/n'` where `n` is the account index.\r\n     * @param transport\r\n     * @param accountIndex Which account's public key to derive\r\n     */\r\n    static async getExtendedPublicKeyAvaxAccount(transport: Transport, accountIndex = 0): Promise<string> {\r\n        const app = getAppAvax(transport);\r\n\r\n        let res = await app.getWalletExtendedPublicKey(getAccountPathAvalanche(accountIndex));\r\n\r\n        let pubKey = res.public_key;\r\n        let chainCode = res.chain_code;\r\n\r\n        // Get the base58 publick key from the HDKey instance\r\n        let hdKey = new HDKey();\r\n        // @ts-ignore\r\n        hdKey.publicKey = pubKey;\r\n        // @ts-ignore\r\n        hdKey.chainCode = chainCode;\r\n\r\n        return hdKey.publicExtendedKey;\r\n    }\r\n\r\n    /**\r\n     * Get information about the AVAX app on the ledger device.\r\n     * @param transport\r\n     */\r\n    static async getAvaxConfig(transport: Transport) {\r\n        return getLedgerConfigAvax(transport);\r\n    }\r\n\r\n    async signEvm(tx: Transaction): Promise<Transaction> {\r\n        if (!LedgerWallet.transport) throw ERR_TransportNotSet;\r\n\r\n        const rawUnsignedTx = rlp.encode([\r\n            bnToRlp(tx.nonce),\r\n            bnToRlp(tx.gasPrice),\r\n            bnToRlp(tx.gasLimit),\r\n            tx.to !== undefined ? tx.to.buf : Buffer.from([]),\r\n            bnToRlp(tx.value),\r\n            tx.data,\r\n            bnToRlp(tx.common.chainIdBN()),\r\n            Buffer.from([]),\r\n            Buffer.from([]),\r\n        ]);\r\n\r\n        const ethApp = getAppEth(LedgerWallet.transport);\r\n        const signature = await ethApp.signTransaction(\r\n            getAccountPathEVM(this.accountIndex),\r\n            rawUnsignedTx.toString('hex')\r\n        );\r\n\r\n        const signatureBN = {\r\n            v: new EthBN(signature.v, 16),\r\n            r: new EthBN(signature.r, 16),\r\n            s: new EthBN(signature.s, 16),\r\n        };\r\n\r\n        const chainId = await web3.eth.getChainId();\r\n        const networkId = await web3.eth.net.getId();\r\n\r\n        let common = EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul');\r\n\r\n        const chainParams: TxOptions = {\r\n            common,\r\n        };\r\n\r\n        const signedTx = Transaction.fromTxData(\r\n            {\r\n                nonce: tx.nonce,\r\n                gasPrice: tx.gasPrice,\r\n                gasLimit: tx.gasLimit,\r\n                to: tx.to,\r\n                value: tx.value,\r\n                data: tx.data,\r\n                ...signatureBN,\r\n            },\r\n            chainParams\r\n        );\r\n        return signedTx;\r\n    }\r\n\r\n    // Returns an array of derivation paths that need to sign this transaction\r\n    // Used with signTransactionHash and signTransactionParsable\r\n    async getTransactionPaths<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx>(\r\n        unsignedTx: UnsignedTx,\r\n        chainId: ChainIdType\r\n    ): Promise<{ paths: string[]; isAvaxOnly: boolean }> {\r\n        let tx = unsignedTx.getTransaction();\r\n        let txType = tx.getTxType();\r\n\r\n        let ins = tx.getIns();\r\n        let operations: TransferableOperation[] = [];\r\n\r\n        // Try to get operations, it will fail if there are none, ignore and continue\r\n        try {\r\n            operations = (tx as OperationTx).getOperations();\r\n        } catch (e) {\r\n            console.log('Failed to get tx operations.');\r\n        }\r\n\r\n        let items = ins;\r\n        if (\r\n            (txType === AVMConstants.IMPORTTX && chainId === 'X') ||\r\n            (txType === PlatformVMConstants.IMPORTTX && chainId === 'P')\r\n        ) {\r\n            items = ((tx as AVMImportTx) || PlatformImportTx).getImportInputs();\r\n        }\r\n\r\n        let hrp = avalanche().getHRP();\r\n        let paths: string[] = [];\r\n\r\n        let isAvaxOnly = true;\r\n        // Collect paths derivation paths for source addresses\r\n        for (let i = 0; i < items.length; i++) {\r\n            let item = items[i];\r\n\r\n            let assetId = bintools.cb58Encode(item.getAssetID());\r\n            if (assetId !== activeNetwork.avaxID) {\r\n                isAvaxOnly = false;\r\n            }\r\n\r\n            let sigidxs: SigIdx[] = item.getInput().getSigIdxs();\r\n            let sources = sigidxs.map((sigidx) => sigidx.getSource());\r\n            let addrs: string[] = sources.map((source) => {\r\n                return bintools.addressToString(hrp, chainId, source);\r\n            });\r\n\r\n            for (let j = 0; j < addrs.length; j++) {\r\n                let srcAddr = addrs[j];\r\n                let pathStr = await this.getPathFromAddress(srcAddr); // returns change/index\r\n\r\n                paths.push(pathStr);\r\n            }\r\n        }\r\n\r\n        // Do the Same for operational inputs, if there are any...\r\n        for (let i = 0; i < operations.length; i++) {\r\n            let op = operations[i];\r\n            let sigidxs: SigIdx[] = op.getOperation().getSigIdxs();\r\n            let sources = sigidxs.map((sigidx) => sigidx.getSource());\r\n            let addrs: string[] = sources.map((source) => {\r\n                return bintools.addressToString(hrp, chainId, source);\r\n            });\r\n\r\n            for (let j = 0; j < addrs.length; j++) {\r\n                let srcAddr = addrs[j];\r\n                let pathStr = await this.getPathFromAddress(srcAddr); // returns change/index\r\n\r\n                paths.push(pathStr);\r\n            }\r\n        }\r\n\r\n        return { paths, isAvaxOnly };\r\n    }\r\n\r\n    async getPathFromAddress(address: string) {\r\n        let externalAddrs = await this.externalScan.getAllAddresses();\r\n        let internalAddrs = await this.internalScan.getAllAddresses();\r\n        let platformAddrs = await this.externalScan.getAllAddresses('P');\r\n\r\n        let extIndex = externalAddrs.indexOf(address);\r\n        let intIndex = internalAddrs.indexOf(address);\r\n        let platformIndex = platformAddrs.indexOf(address);\r\n\r\n        if (extIndex >= 0) {\r\n            return `0/${extIndex}`;\r\n        } else if (intIndex >= 0) {\r\n            return `1/${intIndex}`;\r\n        } else if (platformIndex >= 0) {\r\n            return `0/${platformIndex}`;\r\n        } else if (address[0] === 'C') {\r\n            return '0/0';\r\n        } else {\r\n            throw new Error('Unable to find source address.');\r\n        }\r\n    }\r\n\r\n    async signX(unsignedTx: AVMUnsignedTx): Promise<AVMTx> {\r\n        let tx = unsignedTx.getTransaction();\r\n        let txType = tx.getTxType();\r\n        let chainId: ChainIdType = 'X';\r\n\r\n        let parseableTxs = ParseableAvmTxEnum;\r\n        let { paths, isAvaxOnly } = await this.getTransactionPaths<AVMUnsignedTx>(unsignedTx, chainId);\r\n\r\n        if (!LedgerWallet.config) throw ERR_ConfigNotSet;\r\n\r\n        // If ledger doesnt support parsing, sign hash\r\n        let canLedgerParse = LedgerWallet.config.version >= '0.3.1';\r\n        let isParsableType = txType in parseableTxs && isAvaxOnly;\r\n\r\n        let signedTx;\r\n        if (canLedgerParse && isParsableType) {\r\n            signedTx = await this.signTransactionParsable<AVMUnsignedTx, AVMTx>(unsignedTx, paths, chainId);\r\n        } else {\r\n            signedTx = await this.signTransactionHash<AVMUnsignedTx, AVMTx>(unsignedTx, paths, chainId);\r\n        }\r\n\r\n        return signedTx;\r\n    }\r\n\r\n    getChangePath(chainId?: ChainAlias): string {\r\n        switch (chainId) {\r\n            case 'P':\r\n                return 'm/0';\r\n            case 'X':\r\n            default:\r\n                return 'm/1';\r\n        }\r\n    }\r\n\r\n    getChangeIndex(chainId?: ChainAlias): number {\r\n        switch (chainId) {\r\n            case 'P':\r\n                // return this.platformHelper.hdIndex\r\n                return this.externalScan.getIndex();\r\n            case 'X':\r\n            default:\r\n                // return this.internalHelper.hdIndex\r\n                return this.internalScan.getIndex();\r\n        }\r\n    }\r\n\r\n    getChangeBipPath<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx>(\r\n        unsignedTx: UnsignedTx,\r\n        chainId: ChainIdType\r\n    ) {\r\n        if (chainId === 'C') {\r\n            return null;\r\n        }\r\n\r\n        let tx = unsignedTx.getTransaction();\r\n        let txType = tx.getTxType();\r\n\r\n        const chainChangePath = this.getChangePath(chainId).split('m/')[1];\r\n        let changeIdx = this.getChangeIndex(chainId);\r\n        // If change and destination paths are the same\r\n        // it can cause ledger to not display the destination amt.\r\n        // Since platform helper does not have internal/external\r\n        // path for change (it uses the external index)\r\n        // there will be address collisions. So return null.\r\n        if (\r\n            txType === PlatformVMConstants.IMPORTTX ||\r\n            txType === PlatformVMConstants.EXPORTTX ||\r\n            txType === PlatformVMConstants.ADDVALIDATORTX ||\r\n            txType === PlatformVMConstants.ADDDELEGATORTX\r\n        ) {\r\n            return null;\r\n        }\r\n\r\n        return bippath.fromString(`${AVAX_ACCOUNT_PATH}/${chainChangePath}/${changeIdx}`);\r\n    }\r\n\r\n    // Used for signing transactions that are parsable\r\n    async signTransactionParsable<\r\n        UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx,\r\n        SignedTx extends AVMTx | PlatformTx | EVMTx\r\n    >(unsignedTx: UnsignedTx, paths: string[], chainId: ChainIdType): Promise<SignedTx> {\r\n        // There must be an active transport connection\r\n        if (!LedgerWallet.transport) throw ERR_TransportNotSet;\r\n        let tx = unsignedTx.getTransaction();\r\n        let txType = tx.getTxType();\r\n        let parseableTxs = {\r\n            X: ParseableAvmTxEnum,\r\n            P: ParseablePlatformEnum,\r\n            C: ParseableEvmTxEnum,\r\n        }[chainId];\r\n\r\n        let bip32Paths = this.pathsToUniqueBipPaths(paths);\r\n\r\n        const appAvax = getAppAvax(LedgerWallet.transport);\r\n        const accountPath =\r\n            chainId === 'C'\r\n                ? bippath.fromString(`${ETH_ACCOUNT_PATH}`)\r\n                : bippath.fromString(getAccountPathAvalanche(this.accountIndex));\r\n        let txbuff = unsignedTx.toBuffer();\r\n        let changePath = this.getChangeBipPath(unsignedTx, chainId);\r\n\r\n        let ledgerSignedTx = await appAvax.signTransaction(accountPath, bip32Paths, txbuff, changePath);\r\n\r\n        let sigMap = ledgerSignedTx.signatures;\r\n        let creds = this.getCredentials<UnsignedTx>(unsignedTx, paths, sigMap, chainId);\r\n\r\n        let signedTx;\r\n        switch (chainId) {\r\n            case 'X':\r\n                signedTx = new AVMTx(unsignedTx as AVMUnsignedTx, creds);\r\n                break;\r\n            case 'P':\r\n                signedTx = new PlatformTx(unsignedTx as PlatformUnsignedTx, creds);\r\n                break;\r\n            case 'C':\r\n                signedTx = new EVMTx(unsignedTx as EVMUnsignedTx, creds);\r\n                break;\r\n        }\r\n\r\n        return signedTx as SignedTx;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param accountPath `m/44'/9000'/0'` For X/P Chains, `m/44'/60'/0'` for C Chain\r\n     * @param bip32Paths an array of paths to sign with `['0/0','0/1'..]`\r\n     * @param hash A buffer of the hash to sign\r\n     * @remarks Never sign untrusted hashes. This can lead to loss of funds.\r\n     */\r\n    async signHash(accountPath: any, bip32Paths: any, hash: Buffer): Promise<Map<string, Buffer>> {\r\n        if (!LedgerWallet.transport) throw ERR_TransportNotSet;\r\n        const appAvax = getAppAvax(LedgerWallet.transport);\r\n        return await appAvax.signHash(accountPath, bip32Paths, hash);\r\n    }\r\n    // Used for non parsable transactions.\r\n    // Ideally we wont use this function at all, but ledger is not ready yet.\r\n    async signTransactionHash<\r\n        UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx,\r\n        SignedTx extends AVMTx | PlatformTx | EVMTx\r\n    >(unsignedTx: UnsignedTx, paths: string[], chainId: ChainIdType): Promise<SignedTx> {\r\n        if (!LedgerWallet.transport) throw ERR_TransportNotSet;\r\n        let txbuff = unsignedTx.toBuffer();\r\n        const msg: Buffer = Buffer.from(createHash('sha256').update(txbuff).digest());\r\n\r\n        let bip32Paths = this.pathsToUniqueBipPaths(paths);\r\n\r\n        const appAvax = getAppAvax(LedgerWallet.transport);\r\n        // Sign the msg with ledger\r\n        //TODO: Update when ledger supports Accounts\r\n        const accountPathSource = chainId === 'C' ? ETH_ACCOUNT_PATH : getAccountPathAvalanche(this.accountIndex);\r\n        const accountPath = bippath.fromString(accountPathSource);\r\n        let sigMap = await appAvax.signHash(accountPath, bip32Paths, msg);\r\n\r\n        let creds: Credential[] = this.getCredentials<UnsignedTx>(unsignedTx, paths, sigMap, chainId);\r\n\r\n        let signedTx;\r\n        switch (chainId) {\r\n            case 'X':\r\n                signedTx = new AVMTx(unsignedTx as AVMUnsignedTx, creds);\r\n                break;\r\n            case 'P':\r\n                signedTx = new PlatformTx(unsignedTx as PlatformUnsignedTx, creds);\r\n                break;\r\n            case 'C':\r\n                signedTx = new EVMTx(unsignedTx as EVMUnsignedTx, creds);\r\n                break;\r\n        }\r\n\r\n        return signedTx as SignedTx;\r\n    }\r\n\r\n    pathsToUniqueBipPaths(paths: string[]) {\r\n        let uniquePaths = paths.filter((val: any, i: number) => {\r\n            return paths.indexOf(val) === i;\r\n        });\r\n\r\n        let bip32Paths = uniquePaths.map((path) => {\r\n            return bippath.fromString(path, false);\r\n        });\r\n\r\n        return bip32Paths;\r\n    }\r\n\r\n    getCredentials<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx>(\r\n        unsignedTx: UnsignedTx,\r\n        paths: string[],\r\n        sigMap: any,\r\n        chainId: ChainIdType\r\n    ): Credential[] {\r\n        let creds: Credential[] = [];\r\n        let tx = unsignedTx.getTransaction();\r\n        let txType = tx.getTxType();\r\n\r\n        // @ts-ignore\r\n        let ins = tx.getIns ? tx.getIns() : [];\r\n        let operations: TransferableOperation[] = [];\r\n        let evmInputs: EVMInput[] = [];\r\n\r\n        let items = ins;\r\n        if (\r\n            (txType === AVMConstants.IMPORTTX && chainId === 'X') ||\r\n            (txType === PlatformVMConstants.IMPORTTX && chainId === 'P') ||\r\n            (txType === EVMConstants.IMPORTTX && chainId === 'C')\r\n        ) {\r\n            items = ((tx as AVMImportTx) || PlatformImportTx || EVMImportTx).getImportInputs();\r\n        }\r\n\r\n        // Try to get operations, it will fail if there are none, ignore and continue\r\n        try {\r\n            operations = (tx as OperationTx).getOperations();\r\n        } catch (e) {\r\n            console.log('Failed to get tx operations.');\r\n        }\r\n\r\n        let CredentialClass;\r\n        if (chainId === 'X') {\r\n            CredentialClass = AVMSelectCredentialClass;\r\n        } else if (chainId === 'P') {\r\n            CredentialClass = PlatformSelectCredentialClass;\r\n        } else {\r\n            CredentialClass = EVMSelectCredentialClass;\r\n        }\r\n\r\n        // Try to get evm inputs, it will fail if there are none, ignore and continue\r\n        try {\r\n            evmInputs = (tx as EVMExportTx).getInputs();\r\n        } catch (e) {\r\n            console.log('Failed to get EVM inputs.');\r\n        }\r\n\r\n        for (let i = 0; i < items.length; i++) {\r\n            const sigidxs: SigIdx[] = items[i].getInput().getSigIdxs();\r\n            const cred: Credential = CredentialClass(items[i].getInput().getCredentialID());\r\n\r\n            for (let j = 0; j < sigidxs.length; j++) {\r\n                let pathIndex = i + j;\r\n                let pathStr = paths[pathIndex];\r\n\r\n                let sigRaw = sigMap.get(pathStr);\r\n                let sigBuff = Buffer.from(sigRaw);\r\n                const sig: Signature = new Signature();\r\n                sig.fromBuffer(sigBuff);\r\n                cred.addSignature(sig);\r\n            }\r\n            creds.push(cred);\r\n        }\r\n\r\n        for (let i = 0; i < operations.length; i++) {\r\n            let op = operations[i].getOperation();\r\n            const sigidxs: SigIdx[] = op.getSigIdxs();\r\n            const cred: Credential = CredentialClass(op.getCredentialID());\r\n\r\n            for (let j = 0; j < sigidxs.length; j++) {\r\n                let pathIndex = items.length + i + j;\r\n                let pathStr = paths[pathIndex];\r\n\r\n                let sigRaw = sigMap.get(pathStr);\r\n                let sigBuff = Buffer.from(sigRaw);\r\n                const sig: Signature = new Signature();\r\n                sig.fromBuffer(sigBuff);\r\n                cred.addSignature(sig);\r\n            }\r\n            creds.push(cred);\r\n        }\r\n\r\n        for (let i = 0; i < evmInputs.length; i++) {\r\n            let evmInput = evmInputs[i];\r\n            const sigidxs: SigIdx[] = evmInput.getSigIdxs();\r\n            const cred: Credential = CredentialClass(evmInput.getCredentialID());\r\n\r\n            for (let j = 0; j < sigidxs.length; j++) {\r\n                let pathIndex = items.length + i + j;\r\n                let pathStr = paths[pathIndex];\r\n\r\n                let sigRaw = sigMap.get(pathStr);\r\n                let sigBuff = Buffer.from(sigRaw);\r\n                const sig: Signature = new Signature();\r\n                sig.fromBuffer(sigBuff);\r\n                cred.addSignature(sig);\r\n            }\r\n            creds.push(cred);\r\n        }\r\n\r\n        return creds;\r\n    }\r\n\r\n    async signP(unsignedTx: PlatformUnsignedTx): Promise<PlatformTx> {\r\n        if (!LedgerWallet.transport) throw ERR_TransportNotSet;\r\n\r\n        let tx = unsignedTx.getTransaction();\r\n        let txType = tx.getTxType();\r\n        let chainId: ChainIdType = 'P';\r\n        let parseableTxs = ParseablePlatformEnum;\r\n\r\n        let { paths, isAvaxOnly } = await this.getTransactionPaths<PlatformUnsignedTx>(unsignedTx, chainId);\r\n\r\n        if (!LedgerWallet.config) throw ERR_ConfigNotSet;\r\n\r\n        // If ledger doesnt support parsing, sign hash\r\n        let canLedgerParse = LedgerWallet.config.version >= '0.3.1';\r\n        let isParsableType = txType in parseableTxs && isAvaxOnly;\r\n\r\n        // TODO: Remove after ledger is fixed\r\n        // If UTXOS contain lockedStakeable funds always use sign hash\r\n        let txIns = unsignedTx.getTransaction().getIns();\r\n        for (let i = 0; i < txIns.length; i++) {\r\n            let typeID = txIns[i].getInput().getTypeID();\r\n            if (typeID === PlatformVMConstants.STAKEABLELOCKINID) {\r\n                canLedgerParse = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // TODO: Remove after ledger update\r\n        // Ledger is not able to parse P/C atomic transactions\r\n        if (txType === PlatformVMConstants.EXPORTTX) {\r\n            const destChainBuff = (tx as PlatformExportTx).getDestinationChain();\r\n            // If destination chain is C chain, sign hash\r\n            const destChain = idToChainAlias(bintools.cb58Encode(destChainBuff));\r\n            if (destChain === 'C') {\r\n                canLedgerParse = false;\r\n            }\r\n        }\r\n        // TODO: Remove after ledger update\r\n        // Ledger is not able to parse P/C atomic transactions\r\n        if (txType === PlatformVMConstants.IMPORTTX) {\r\n            const sourceChainBuff = (tx as PlatformImportTx).getSourceChain();\r\n            // If destination chain is C chain, sign hash\r\n            const sourceChain = idToChainAlias(bintools.cb58Encode(sourceChainBuff));\r\n            if (sourceChain === 'C') {\r\n                canLedgerParse = false;\r\n            }\r\n        }\r\n\r\n        let signedTx;\r\n        if (canLedgerParse && isParsableType) {\r\n            signedTx = await this.signTransactionParsable<PlatformUnsignedTx, PlatformTx>(unsignedTx, paths, chainId);\r\n        } else {\r\n            signedTx = await this.signTransactionHash<PlatformUnsignedTx, PlatformTx>(unsignedTx, paths, chainId);\r\n        }\r\n        return signedTx;\r\n    }\r\n\r\n    async signC(unsignedTx: EVMUnsignedTx): Promise<EVMTx> {\r\n        // TODO: Might need to upgrade paths array to:\r\n        //  paths = Array(utxoSet.getAllUTXOs().length).fill('0/0'),\r\n        let tx = unsignedTx.getTransaction();\r\n        let typeId = tx.getTxType();\r\n\r\n        let paths = [`0/${this.accountIndex}`];\r\n        if (typeId === EVMConstants.EXPORTTX) {\r\n            let ins = (tx as EVMExportTx).getInputs();\r\n            paths = ins.map(() => `0/${this.accountIndex}`);\r\n        } else if (typeId === EVMConstants.IMPORTTX) {\r\n            let ins = (tx as EVMImportTx).getImportInputs();\r\n            paths = ins.map(() => `0/${this.accountIndex}`);\r\n        }\r\n\r\n        let canLedgerParse = true;\r\n\r\n        // TODO: Remove after ledger update\r\n        // Ledger is not able to parse P/C atomic transactions\r\n        if (typeId === EVMConstants.EXPORTTX) {\r\n            const destChainBuff = (tx as EVMExportTx).getDestinationChain();\r\n            // If destination chain is C chain, sign hash\r\n            const destChain = idToChainAlias(bintools.cb58Encode(destChainBuff));\r\n            if (destChain === 'P') {\r\n                canLedgerParse = false;\r\n            }\r\n        }\r\n        // TODO: Remove after ledger update\r\n        if (typeId === EVMConstants.IMPORTTX) {\r\n            const sourceChainBuff = (tx as EVMImportTx).getSourceChain();\r\n            // If destination chain is C chain, sign hash\r\n            const sourceChain = idToChainAlias(bintools.cb58Encode(sourceChainBuff));\r\n            if (sourceChain === 'P') {\r\n                canLedgerParse = false;\r\n            }\r\n        }\r\n\r\n        let txSigned;\r\n        if (canLedgerParse) {\r\n            txSigned = (await this.signTransactionParsable(unsignedTx, paths, 'C')) as EVMTx;\r\n        } else {\r\n            txSigned = (await this.signTransactionHash(unsignedTx, paths, 'C')) as EVMTx;\r\n        }\r\n\r\n        return txSigned;\r\n    }\r\n\r\n    // /**\r\n    //  * This function is equivalent to the eth_sign Ethereum JSON-RPC method as specified in EIP-1417,\r\n    //  * as well as the MetaMask's personal_sign method.\r\n    //  * @param data The hex data to sign\r\n    //  */\r\n    // async personalSign(data: string): Promise<string> {\r\n    //     throw new Error('Not implemented.');\r\n    // const ethApp = getAppEth(LedgerWallet.transport);\r\n    // const path = getAccountPathEVM(this.accountIndex).substr(2);\r\n    // const result = await ethApp.signPersonalMessage(path, data.substr(2));\r\n    //\r\n    // let v = result['v'] - 27;\r\n    // let vStr = v.toString(16);\r\n    // if (vStr.length < 2) {\r\n    //     vStr = '0' + v;\r\n    // }\r\n    // const sig = `0x${result['r'] + result['s'] + vStr}`;\r\n    // return sig;\r\n    // }\r\n}\r\n","import { Buffer as BufferAvalanche } from '@c4tplatform/caminojs/dist';\r\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\r\nimport { avalanche } from '@/Network/network';\r\nimport {\r\n    KeyChain as EVMKeyChain,\r\n    KeyPair as EVMKeyPair,\r\n    Tx as EVMTx,\r\n    UnsignedTx as EVMUnsignedTx,\r\n} from '@c4tplatform/caminojs/dist/apis/evm';\r\nimport { EvmWalletReadonly } from '@/Wallet/EVM/EvmWalletReadonly';\r\nimport { bintools } from '@/common';\r\nimport { computePublicKey } from 'ethers/lib/utils';\r\nimport {\r\n    MessageTypes,\r\n    personalSign,\r\n    signTypedData,\r\n    SignTypedDataVersion,\r\n    TypedDataV1,\r\n    TypedMessage,\r\n} from '@metamask/eth-sig-util';\r\nimport * as bitcoin from 'bitcoinjs-lib';\r\nexport class EvmWallet extends EvmWalletReadonly {\r\n    private privateKey: Buffer;\r\n    private btcPair: bitcoin.ECPairInterface;\r\n\r\n    constructor(key: Buffer) {\r\n        // Compute the uncompressed public key from private key\r\n        let pubKey = computePublicKey(key);\r\n\r\n        super(pubKey);\r\n\r\n        this.btcPair = bitcoin.ECPair.fromPrivateKey(key);\r\n        this.privateKey = key;\r\n    }\r\n\r\n    static fromPrivateKey(key: string) {\r\n        return new EvmWallet(Buffer.from(key, 'hex'));\r\n    }\r\n\r\n    private getPrivateKeyBech(): string {\r\n        return `PrivateKey-` + bintools.cb58Encode(BufferAvalanche.from(this.privateKey));\r\n    }\r\n\r\n    getKeyChain(): EVMKeyChain {\r\n        let keychain = new EVMKeyChain(avalanche().getHRP(), 'C');\r\n        keychain.importKey(this.getPrivateKeyBech());\r\n        return keychain;\r\n    }\r\n\r\n    getKeyPair(): EVMKeyPair {\r\n        let keychain = new EVMKeyChain(avalanche().getHRP(), 'C');\r\n        return keychain.importKey(this.getPrivateKeyBech());\r\n    }\r\n\r\n    signEVM(tx: Transaction | FeeMarketEIP1559Transaction) {\r\n        return tx.sign(this.privateKey);\r\n    }\r\n\r\n    signBTCHash(hash: Buffer) {\r\n        return this.btcPair.sign(hash);\r\n    }\r\n\r\n    signC(tx: EVMUnsignedTx): EVMTx {\r\n        return tx.sign(this.getKeyChain());\r\n    }\r\n\r\n    getPrivateKeyHex(): string {\r\n        return this.privateKey.toString('hex');\r\n    }\r\n\r\n    /**\r\n     * This function is equivalent to the eth_sign Ethereum JSON-RPC method as specified in EIP-1417,\r\n     * as well as the MetaMask's personal_sign method.\r\n     * @param data The hex data to sign. Must start with `0x`.\r\n     */\r\n    personalSign(data: string) {\r\n        return personalSign({ privateKey: this.privateKey, data });\r\n    }\r\n\r\n    /**\r\n     * Sign typed data according to EIP-712. The signing differs based upon the version.\r\n     * V1 is based upon an early version of EIP-712 that lacked some later security improvements, and should generally be neglected in favor of later versions.\r\n     * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\r\n     * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\r\n     * @param data The typed data to sign.\r\n     * @param version The signing version to use.\r\n     */\r\n    signTypedData<V extends SignTypedDataVersion, T extends MessageTypes>(\r\n        data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>,\r\n        version: V\r\n    ) {\r\n        return signTypedData({\r\n            privateKey: this.privateKey,\r\n            data,\r\n            version,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * V1 is based upon an early version of EIP-712 that lacked some later security improvements, and should generally be neglected in favor of later versions.\r\n     * @param data The typed data to sign.\r\n     * */\r\n    signTypedData_V1(data: TypedDataV1) {\r\n        return this.signTypedData(data, SignTypedDataVersion.V1);\r\n    }\r\n\r\n    /**\r\n     * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\r\n     * @param data The typed data to sign.\r\n     */\r\n    signTypedData_V3(data: TypedMessage<any>) {\r\n        return this.signTypedData(data, SignTypedDataVersion.V3);\r\n    }\r\n\r\n    /**\r\n     * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\r\n     * @param data The typed data to sign.\r\n     */\r\n    signTypedData_V4(data: TypedMessage<any>) {\r\n        return this.signTypedData(data, SignTypedDataVersion.V4);\r\n    }\r\n}\r\n","import * as bip39 from 'bip39';\r\nimport * as bip32 from 'bip32';\r\nimport { EvmWallet } from './EVM/EvmWallet';\r\nimport { UnsafeWallet, WalletNameType } from './types';\r\nimport { Buffer } from '@c4tplatform/caminojs/dist';\r\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\r\nimport { Tx as AVMTx, UnsignedTx as AVMUnsignedTx } from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport { Tx as PlatformTx, UnsignedTx as PlatformUnsignedTx } from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { KeyPair as AVMKeyPair, KeyChain as AVMKeyChain } from '@c4tplatform/caminojs/dist/apis/avm/keychain';\r\nimport { KeyChain as PlatformKeyChain } from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { UnsignedTx as EVMUnsignedTx, Tx as EVMTx, KeyPair as EVMKeyPair } from '@c4tplatform/caminojs/dist/apis/evm';\r\nimport { CypherAES, digestMessage } from '@/utils';\r\nimport { HDWalletAbstract } from '@/Wallet/HDWalletAbstract';\r\nimport { bintools } from '@/common';\r\nimport { getAccountPathAvalanche, getAccountPathEVM } from '@/Wallet/helpers/derivationHelper';\r\nimport { TypedDataV1, TypedMessage } from '@metamask/eth-sig-util';\r\n\r\n//TODO: Should extend public mnemonic wallet\r\nexport class MnemonicWallet extends HDWalletAbstract implements UnsafeWallet {\r\n    evmWallet: EvmWallet;\r\n    type: WalletNameType;\r\n    private mnemonicCypher: CypherAES;\r\n    accountIndex: number;\r\n\r\n    private ethAccountKey: bip32.BIP32Interface;\r\n\r\n    constructor(mnemonic: string, account = 0) {\r\n        let seed: globalThis.Buffer = bip39.mnemonicToSeedSync(mnemonic);\r\n\r\n        let masterHdKey = bip32.fromSeed(seed);\r\n        let accountKey = masterHdKey.derivePath(getAccountPathAvalanche(account));\r\n\r\n        super(accountKey);\r\n\r\n        this.type = 'mnemonic';\r\n        if (!bip39.validateMnemonic(mnemonic)) {\r\n            throw new Error('Invalid mnemonic phrase.');\r\n        }\r\n\r\n        let ethAccountKey = masterHdKey.derivePath(getAccountPathEVM(account));\r\n        this.ethAccountKey = ethAccountKey;\r\n        let ethKey = ethAccountKey.privateKey;\r\n        let evmWallet = new EvmWallet(ethKey!);\r\n\r\n        this.accountIndex = account;\r\n        this.mnemonicCypher = new CypherAES(mnemonic);\r\n        this.evmWallet = evmWallet;\r\n    }\r\n\r\n    /**\r\n     * Returns the derived private key used by the EVM wallet.\r\n     */\r\n    public getEvmPrivateKeyHex(): string {\r\n        return this.evmWallet.getPrivateKeyHex();\r\n    }\r\n\r\n    /**\r\n     * Return the mnemonic phrase for this wallet.\r\n     */\r\n    public getMnemonic(): string {\r\n        return this.mnemonicCypher.getValue();\r\n    }\r\n\r\n    /**\r\n     * Generates a 24 word mnemonic phrase and initializes a wallet instance with it.\r\n     * @return Returns the initialized wallet.\r\n     */\r\n    static create(): MnemonicWallet {\r\n        const mnemonic = bip39.generateMnemonic(256);\r\n        return MnemonicWallet.fromMnemonic(mnemonic);\r\n    }\r\n\r\n    /**\r\n     * Returns a new 24 word mnemonic key phrase.\r\n     */\r\n    static generateMnemonicPhrase(): string {\r\n        return bip39.generateMnemonic(256);\r\n    }\r\n\r\n    /**\r\n     * Returns a new instance of a Mnemonic wallet from the given key phrase.\r\n     * @param mnemonic The 24 word mnemonic phrase of the wallet\r\n     */\r\n    static fromMnemonic(mnemonic: string): MnemonicWallet {\r\n        return new MnemonicWallet(mnemonic);\r\n    }\r\n\r\n    /**\r\n     * Validates the given string is a valid mnemonic.\r\n     * @param mnemonic\r\n     */\r\n    static validateMnemonic(mnemonic: string): boolean {\r\n        return bip39.validateMnemonic(mnemonic);\r\n    }\r\n\r\n    /**\r\n     * Signs an EVM transaction on the C chain.\r\n     * @param tx The unsigned transaction\r\n     */\r\n    async signEvm(tx: Transaction | FeeMarketEIP1559Transaction): Promise<Transaction | FeeMarketEIP1559Transaction> {\r\n        return this.evmWallet.signEVM(tx);\r\n    }\r\n\r\n    /**\r\n     * Signs an AVM transaction.\r\n     * @param tx The unsigned transaction\r\n     */\r\n    async signX(tx: AVMUnsignedTx): Promise<AVMTx> {\r\n        return tx.sign(this.getKeyChainX());\r\n    }\r\n\r\n    /**\r\n     * Signs a PlatformVM transaction.\r\n     * @param tx The unsigned transaction\r\n     */\r\n    async signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\r\n        return tx.sign(this.getKeyChainP());\r\n    }\r\n\r\n    /**\r\n     * Signs a C chain transaction\r\n     * @remarks\r\n     * Used for Import and Export transactions on the C chain. For everything else, use `this.signEvm()`\r\n     * @param tx The unsigned transaction\r\n     */\r\n    async signC(tx: EVMUnsignedTx): Promise<EVMTx> {\r\n        return this.evmWallet.signC(tx);\r\n    }\r\n\r\n    /**\r\n     * Returns a keychain with the keys of every derived X chain address.\r\n     * @private\r\n     */\r\n    private getKeyChainX(): AVMKeyChain {\r\n        let internal = this.internalScan.getKeyChainX();\r\n        let external = this.externalScan.getKeyChainX();\r\n        return internal.union(external);\r\n    }\r\n\r\n    /**\r\n     * Returns a keychain with the keys of every derived P chain address.\r\n     * @private\r\n     */\r\n    private getKeyChainP(): PlatformKeyChain {\r\n        return this.externalScan.getKeyChainP();\r\n    }\r\n\r\n    // TODO: Support internal address as well\r\n    signMessage(msgStr: string, index: number): string {\r\n        let key = this.externalScan.getKeyForIndexX(index) as AVMKeyPair;\r\n        let digest = digestMessage(msgStr);\r\n\r\n        // Convert to the other Buffer and sign\r\n        let digestHex = digest.toString('hex');\r\n        let digestBuff = Buffer.from(digestHex, 'hex');\r\n        let signed = key.sign(digestBuff);\r\n\r\n        return bintools.cb58Encode(signed);\r\n    }\r\n\r\n    /**\r\n     * This function is equivalent to the eth_sign Ethereum JSON-RPC method as specified in EIP-1417,\r\n     * as well as the MetaMask's personal_sign method.\r\n     * @remarks Signs using the C chain address.\r\n     * @param data The hex data to sign\r\n     */\r\n    async personalSign(data: string): Promise<string> {\r\n        return this.evmWallet.personalSign(data);\r\n    }\r\n\r\n    /**\r\n     * V1 is based upon an early version of EIP-712 that lacked some later security improvements, and should generally be neglected in favor of later versions.\r\n     * @param data The typed data to sign.\r\n     * */\r\n    async signTypedData_V1(data: TypedDataV1): Promise<string> {\r\n        return this.evmWallet.signTypedData_V1(data);\r\n    }\r\n\r\n    /**\r\n     * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\r\n     * @param data The typed data to sign.\r\n     */\r\n    async signTypedData_V3(data: TypedMessage<any>): Promise<string> {\r\n        return this.evmWallet.signTypedData_V3(data);\r\n    }\r\n\r\n    /**\r\n     * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\r\n     * @param data The typed data to sign.\r\n     */\r\n    async signTypedData_V4(data: TypedMessage<any>): Promise<string> {\r\n        return this.evmWallet.signTypedData_V4(data);\r\n    }\r\n}\r\n","import { WalletProvider } from '@/Wallet/Wallet';\r\nimport { UnsafeWallet, WalletNameType } from '@/Wallet/types';\r\n\r\nimport { KeyChain as AVMKeyChain, UnsignedTx as AVMUnsignedTx, Tx as AVMTx } from '@c4tplatform/caminojs/dist/apis/avm';\r\nimport {\r\n    KeyChain as PlatformKeyChain,\r\n    UnsignedTx as PlatformUnsignedTx,\r\n    Tx as PlatformTx,\r\n} from '@c4tplatform/caminojs/dist/apis/platformvm';\r\nimport { avalanche } from '@/Network/network';\r\nimport { Buffer as BufferAvalanche } from '@c4tplatform/caminojs/dist';\r\nimport { EvmWallet } from '@/Wallet/EVM/EvmWallet';\r\nimport { UnsignedTx, Tx, KeyPair as EVMKeyPair } from '@c4tplatform/caminojs/dist/apis/evm';\r\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\r\nimport { bintools } from '@/common';\r\nimport { TypedDataV1, TypedMessage } from '@metamask/eth-sig-util';\r\n\r\nexport class SingletonWallet extends WalletProvider implements UnsafeWallet {\r\n    type: WalletNameType = 'singleton';\r\n    key = '';\r\n    keyBuff: BufferAvalanche;\r\n    evmWallet: EvmWallet;\r\n\r\n    /**\r\n     *\r\n     * @param privateKey An avalanche private key, starts with `PrivateKey-`\r\n     */\r\n    constructor(privateKey: string) {\r\n        super();\r\n\r\n        this.key = privateKey;\r\n\r\n        // Derive EVM key and address\r\n        let pkBuf = bintools.cb58Decode(privateKey.split('-')[1]);\r\n        this.keyBuff = pkBuf;\r\n\r\n        let pkHex = pkBuf.toString('hex');\r\n        let pkBuffNative = Buffer.from(pkHex, 'hex');\r\n\r\n        this.evmWallet = new EvmWallet(pkBuffNative);\r\n    }\r\n\r\n    static fromPrivateKey(key: string): SingletonWallet {\r\n        return new SingletonWallet(key);\r\n    }\r\n\r\n    static fromEvmKey(key: string): SingletonWallet {\r\n        let keyBuff = bintools.cb58Encode(BufferAvalanche.from(key, 'hex'));\r\n        let avmKeyStr = `PrivateKey-${keyBuff}`;\r\n        return new SingletonWallet(avmKeyStr);\r\n    }\r\n\r\n    private getKeyChainX(): AVMKeyChain {\r\n        let keyChain = avalanche().XChain().newKeyChain();\r\n        keyChain.importKey(this.key);\r\n        return keyChain;\r\n    }\r\n\r\n    private getKeyChainP(): PlatformKeyChain {\r\n        let keyChain = avalanche().PChain().newKeyChain();\r\n        keyChain.importKey(this.key);\r\n        return keyChain;\r\n    }\r\n\r\n    /**\r\n     * Returns the derived private key used by the EVM wallet.\r\n     */\r\n    public getEvmPrivateKeyHex(): string {\r\n        return this.evmWallet.getPrivateKeyHex();\r\n    }\r\n\r\n    getAddressP(): string {\r\n        let keyChain = this.getKeyChainP();\r\n        return keyChain.getAddressStrings()[0];\r\n    }\r\n\r\n    getAddressX(): string {\r\n        let keyChain = this.getKeyChainX();\r\n        return keyChain.getAddressStrings()[0];\r\n    }\r\n\r\n    async getAllAddressesP(): Promise<string[]> {\r\n        return [this.getAddressP()];\r\n    }\r\n\r\n    getAllAddressesPSync(): string[] {\r\n        return [this.getAddressP()];\r\n    }\r\n\r\n    async getAllAddressesX(): Promise<string[]> {\r\n        return [this.getAddressX()];\r\n    }\r\n\r\n    getAllAddressesXSync(): string[] {\r\n        return [this.getAddressX()];\r\n    }\r\n\r\n    getChangeAddressX(): string {\r\n        return this.getAddressX();\r\n    }\r\n\r\n    async getExternalAddressesP(): Promise<string[]> {\r\n        return [this.getAddressP()];\r\n    }\r\n\r\n    getExternalAddressesPSync(): string[] {\r\n        return [this.getAddressP()];\r\n    }\r\n\r\n    async getExternalAddressesX(): Promise<string[]> {\r\n        return [this.getAddressX()];\r\n    }\r\n\r\n    getExternalAddressesXSync(): string[] {\r\n        return [this.getAddressX()];\r\n    }\r\n\r\n    async getInternalAddressesX(): Promise<string[]> {\r\n        return [this.getAddressX()];\r\n    }\r\n\r\n    getInternalAddressesXSync(): string[] {\r\n        return [this.getAddressX()];\r\n    }\r\n\r\n    async signC(tx: UnsignedTx): Promise<Tx> {\r\n        return this.evmWallet.signC(tx);\r\n    }\r\n\r\n    async signEvm(tx: Transaction | FeeMarketEIP1559Transaction): Promise<Transaction | FeeMarketEIP1559Transaction> {\r\n        return this.evmWallet.signEVM(tx);\r\n    }\r\n\r\n    async signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\r\n        return tx.sign(this.getKeyChainP());\r\n    }\r\n\r\n    async signX(tx: AVMUnsignedTx): Promise<AVMTx> {\r\n        return tx.sign(this.getKeyChainX());\r\n    }\r\n\r\n    /**\r\n     * This function is equivalent to the eth_sign Ethereum JSON-RPC method as specified in EIP-1417,\r\n     * as well as the MetaMask's personal_sign method.\r\n     * @param data The hex data to sign\r\n     */\r\n    async personalSign(data: string): Promise<string> {\r\n        return this.evmWallet.personalSign(data);\r\n    }\r\n\r\n    /**\r\n     * V1 is based upon an early version of EIP-712 that lacked some later security improvements, and should generally be neglected in favor of later versions.\r\n     * @param data The typed data to sign.\r\n     * */\r\n    async signTypedData_V1(data: TypedDataV1): Promise<string> {\r\n        return this.evmWallet.signTypedData_V1(data);\r\n    }\r\n\r\n    /**\r\n     * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\r\n     * @param data The typed data to sign.\r\n     */\r\n    async signTypedData_V3(data: TypedMessage<any>): Promise<string> {\r\n        return this.evmWallet.signTypedData_V3(data);\r\n    }\r\n\r\n    /**\r\n     * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\r\n     * @param data The typed data to sign.\r\n     */\r\n    async signTypedData_V4(data: TypedMessage<any>): Promise<string> {\r\n        return this.evmWallet.signTypedData_V4(data);\r\n    }\r\n}\r\n","export const stakingHeaders = [\r\n    'Tx ID',\r\n    'Tx Date',\r\n    'Type',\r\n    'Node ID',\r\n    'Stake Amount',\r\n    'Stake Start',\r\n    'Reward Date (Stake End)',\r\n    'Is Rewarded',\r\n    'Reward Amount',\r\n];\r\n\r\nexport const normalHeaders = ['Tx ID', 'Timestamp', 'Type', 'Token Symbol', 'Amount', 'Addresses', 'Chain'];\r\n","export function createCSVContent(rows: string[][]) {\r\n    let csvContent = '';\r\n    rows.forEach(function (arr) {\r\n        let row = arr.join(',');\r\n        csvContent += row + '\\r\\n';\r\n    });\r\n    return csvContent;\r\n}\r\n","import { HistoryItemType, iHistoryStaking, isHistoryStakingTx } from '@/History';\r\nimport { bnToBigAvaxP } from '@/utils';\r\nimport moment from 'moment';\r\nimport { createCSVContent } from '@/Csv/createCsvContent';\r\nimport { stakingHeaders } from '@/Csv/constants';\r\n\r\n/**\r\n * Given an array of history transactions, filter the staking txs and returns the body of a csv file.\r\n * @remarks You can download the returned string as a CSV file.\r\n * @param txs An array of transactions made by a wallet.\r\n */\r\nexport function createCsvStaking(txs: HistoryItemType[]) {\r\n    // Filter only staking transactions\r\n    const filtered = txs.filter(isHistoryStakingTx);\r\n    // Sort by stake end date\r\n    const sorted = filtered.sort((a, b) => {\r\n        const aTime = a.stakeEnd.getTime();\r\n        const bTime = b.stakeEnd.getTime();\r\n        return bTime - aTime;\r\n    });\r\n\r\n    const rows = [stakingHeaders, ...parseStakingTxs(sorted)];\r\n    return createCSVContent(rows);\r\n}\r\n\r\n/**\r\n * Parses each staking transaction according to the headers defined in constants and returns an array of strings for\r\n * each cell in the CSV.\r\n * @param txs\r\n */\r\nexport function parseStakingTxs(txs: iHistoryStaking[]) {\r\n    return txs.map((tx) => {\r\n        const txDate = moment(tx.timestamp).format();\r\n        const stakeStart = moment(tx.stakeStart).format();\r\n        const stakeEnd = moment(tx.stakeEnd).format();\r\n        const now = Date.now();\r\n\r\n        const stakeAmt = bnToBigAvaxP(tx.amount).toString();\r\n\r\n        let rewardAmt;\r\n        if (tx.stakeEnd.getTime() > now) {\r\n            rewardAmt = 'Pending';\r\n        } else if (!tx.isRewarded) {\r\n            rewardAmt = 'Stake Not Rewarded';\r\n        } else if (tx.rewardAmount) {\r\n            rewardAmt = !tx.rewardAmount.isZero() ? bnToBigAvaxP(tx.rewardAmount).toString() : 'Not Reward Owner';\r\n        } else {\r\n            rewardAmt = 'Not Reward Owner';\r\n        }\r\n\r\n        return [tx.id, txDate, tx.type, tx.nodeID, stakeAmt, stakeStart, stakeEnd, tx.isRewarded.toString(), rewardAmt];\r\n    });\r\n}\r\n","import { HistoryItemType, isHistoryBaseTx, isHistoryEVMTx, isHistoryImportExportTx } from '@/History';\r\nimport { normalHeaders } from '@/Csv/constants';\r\nimport { createCSVContent } from '@/Csv/createCsvContent';\r\nimport { bnToBig, bnToBigAvaxC, bnToBigAvaxX } from '@/utils';\r\nimport moment from 'moment';\r\n\r\n/**\r\n * Given an array of history transactions, filter the base and export/import txs and returns the body of a csv file.\r\n * @remarks You can download the returned string as a CSV file.\r\n * @param txs An array of transactions made by a wallet.\r\n */\r\nexport function createCsvNormal(txs: HistoryItemType[]) {\r\n    const rows = [normalHeaders, ...parseNormalTxs(txs)];\r\n    return createCSVContent(rows);\r\n}\r\n\r\nexport function parseNormalTxs(txs: HistoryItemType[]) {\r\n    const rows: string[][] = [];\r\n    txs.map((tx) => {\r\n        const mom = moment(tx.timestamp);\r\n        const dateStr = mom.format();\r\n\r\n        if (isHistoryBaseTx(tx)) {\r\n            const tokenRows = tx.tokens.map((token) => {\r\n                const amtStr = bnToBig(token.amount, token.asset.denomination).toString();\r\n                return [tx.id, dateStr, tx.type, token.asset.symbol, amtStr, `\"${token.addresses.join('\\r')}\"`, 'X'];\r\n            });\r\n            rows.push(...tokenRows);\r\n        } else if (isHistoryImportExportTx(tx)) {\r\n            const amtStr = bnToBigAvaxX(tx.amount).toString();\r\n            rows.push([tx.id, dateStr, tx.type, 'AVAX', amtStr, '', `${tx.source} to ${tx.destination}`]);\r\n        } else if (isHistoryEVMTx(tx)) {\r\n            const amtStr = bnToBigAvaxC(tx.amount).toString();\r\n            const amtSigned = tx.isSender ? `-${amtStr}` : amtStr;\r\n            if (!tx.input) {\r\n                const addr = tx.isSender ? tx.to : tx.from;\r\n                rows.push([tx.id, dateStr, tx.type, 'AVAX', amtSigned, addr, `C`]);\r\n            }\r\n        }\r\n    });\r\n    return rows;\r\n}\r\n"],"names":["TestXBlockchainID","DefaultPlatformChainID","TestCBlockchainID","TestAvaxAssetID","Avalanche","ethers","eventsModule","EventEmitter","xss","activeNetwork","BN","erc20Cache","Web3","ethersProvider","Sockette","PubSub","ContractFactory","BinTools","Buffer","createHash","Crypto","AjsBuffer","bip39","MinterSet","OutputOwners","Common","tx","FeeMarketEIP1559Transaction","Transaction","EthereumjsCommon","AVMConstants","PlatformVMConstants","EVMConstants","PayloadTypes","BufferAvalanche","Big","randomstring","AES","CryptoJS","Assets.getAssetDescription","EVMInput","SECPTransferOutput","TransferableOutput","ExportTx","UnsignedTx","costExportTx","AVMUTXOSet","PlatformUTXOSet","UnixNow","AVMKeyPair","computeAddress","computePublicKey","EVMKeyPair","networks","ECPair","payments","bip32","Avalanche_1","require$$0","require$$1","AppAvax","Eth","HDKey","BufferNative","rlp","bnToRlp","EthBN","PlatformImportTx","bippath","AVMTx","PlatformTx","EVMTx","EVMImportTx","AVMSelectCredentialClass","PlatformSelectCredentialClass","EVMSelectCredentialClass","Signature","bitcoin","EVMKeyChain","personalSign","signTypedData","SignTypedDataVersion","moment"],"mappings":"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"}